
6.Timer_input_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000031c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004c4  080004cc  000104cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004c4  080004c4  000104cc  2**0
                  CONTENTS
  4 .ARM          00000000  080004c4  080004c4  000104cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004c4  080004cc  000104cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c4  080004c4  000104c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004c8  080004c8  000104c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000104cc  2**0
                  CONTENTS
 10 .bss          00000028  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000104cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004e3  00000000  00000000  000104f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000ee  00000000  00000000  000109d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  00010ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000048  00000000  00000000  00010b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016352  00000000  00000000  00010b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000054a  00000000  00000000  00026ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007bd79  00000000  00000000  0002740c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000a3185  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000b8  00000000  00000000  000a31d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080004ac 	.word	0x080004ac

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080004ac 	.word	0x080004ac

080001e8 <gpio_initialize>:
uint32_t current_CCR=0;
uint32_t previous_CCR=0;
uint32_t difference = 0;

void gpio_initialize()
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	// LED Initialize
	RCC->AHB1ENR |= (1<<2);			//enable clock for GPIOC
 80001ec:	4b28      	ldr	r3, [pc, #160]	; (8000290 <gpio_initialize+0xa8>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a27      	ldr	r2, [pc, #156]	; (8000290 <gpio_initialize+0xa8>)
 80001f2:	f043 0304 	orr.w	r3, r3, #4
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &= ~(3<<12);
 80001f8:	4b26      	ldr	r3, [pc, #152]	; (8000294 <gpio_initialize+0xac>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a25      	ldr	r2, [pc, #148]	; (8000294 <gpio_initialize+0xac>)
 80001fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000202:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (2<<12);		// Select Alternate function PC6
 8000204:	4b23      	ldr	r3, [pc, #140]	; (8000294 <gpio_initialize+0xac>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a22      	ldr	r2, [pc, #136]	; (8000294 <gpio_initialize+0xac>)
 800020a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800020e:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[0] &= ~(0xF<<24);
 8000210:	4b20      	ldr	r3, [pc, #128]	; (8000294 <gpio_initialize+0xac>)
 8000212:	6a1b      	ldr	r3, [r3, #32]
 8000214:	4a1f      	ldr	r2, [pc, #124]	; (8000294 <gpio_initialize+0xac>)
 8000216:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800021a:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (2<<24);		// AF2 Alternate TIM3_CH1 285
 800021c:	4b1d      	ldr	r3, [pc, #116]	; (8000294 <gpio_initialize+0xac>)
 800021e:	6a1b      	ldr	r3, [r3, #32]
 8000220:	4a1c      	ldr	r2, [pc, #112]	; (8000294 <gpio_initialize+0xac>)
 8000222:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000226:	6213      	str	r3, [r2, #32]
	GPIOC->OTYPER &= ~(1<<6);		//push pull output
 8000228:	4b1a      	ldr	r3, [pc, #104]	; (8000294 <gpio_initialize+0xac>)
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	4a19      	ldr	r2, [pc, #100]	; (8000294 <gpio_initialize+0xac>)
 800022e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000232:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~(3<<12);
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <gpio_initialize+0xac>)
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	4a16      	ldr	r2, [pc, #88]	; (8000294 <gpio_initialize+0xac>)
 800023a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800023e:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= (1<<12);		// medium speed
 8000240:	4b14      	ldr	r3, [pc, #80]	; (8000294 <gpio_initialize+0xac>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	4a13      	ldr	r2, [pc, #76]	; (8000294 <gpio_initialize+0xac>)
 8000246:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800024a:	6093      	str	r3, [r2, #8]


	//switch initialize
	RCC->AHB1ENR |= (1<<1);			//GPIOB Clock enable
 800024c:	4b10      	ldr	r3, [pc, #64]	; (8000290 <gpio_initialize+0xa8>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000250:	4a0f      	ldr	r2, [pc, #60]	; (8000290 <gpio_initialize+0xa8>)
 8000252:	f043 0302 	orr.w	r3, r3, #2
 8000256:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB->MODER &= ~(3<<6);		// Clear Mode of PB3
 8000258:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <gpio_initialize+0xb0>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a0e      	ldr	r2, [pc, #56]	; (8000298 <gpio_initialize+0xb0>)
 800025e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000262:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (2<<6);			// Set alternate function mode of PB3
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <gpio_initialize+0xb0>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a0b      	ldr	r2, [pc, #44]	; (8000298 <gpio_initialize+0xb0>)
 800026a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800026e:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] &= ~(0xF<<12);	// clear alt setting of PB3
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <gpio_initialize+0xb0>)
 8000272:	6a1b      	ldr	r3, [r3, #32]
 8000274:	4a08      	ldr	r2, [pc, #32]	; (8000298 <gpio_initialize+0xb0>)
 8000276:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800027a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1<<12);		// AF1 is selected for PB3 (Timer 2 ch 2)
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <gpio_initialize+0xb0>)
 800027e:	6a1b      	ldr	r3, [r3, #32]
 8000280:	4a05      	ldr	r2, [pc, #20]	; (8000298 <gpio_initialize+0xb0>)
 8000282:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000286:	6213      	str	r3, [r2, #32]
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr
 8000290:	40023800 	.word	0x40023800
 8000294:	40020800 	.word	0x40020800
 8000298:	40020400 	.word	0x40020400

0800029c <TIM3_initialize>:

void TIM3_initialize()
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<1);			// enable Timer 3 Clock
 80002a0:	4b18      	ldr	r3, [pc, #96]	; (8000304 <TIM3_initialize+0x68>)
 80002a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002a4:	4a17      	ldr	r2, [pc, #92]	; (8000304 <TIM3_initialize+0x68>)
 80002a6:	f043 0302 	orr.w	r3, r3, #2
 80002aa:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->PSC = 0;					// Prescaler as 0
 80002ac:	4b16      	ldr	r3, [pc, #88]	; (8000308 <TIM3_initialize+0x6c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 16000-1;			// set for 1KHz frequency
 80002b2:	4b15      	ldr	r3, [pc, #84]	; (8000308 <TIM3_initialize+0x6c>)
 80002b4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80002b8:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CNT = 0;
 80002ba:	4b13      	ldr	r3, [pc, #76]	; (8000308 <TIM3_initialize+0x6c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CCMR1 &= ~(7<<4);
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <TIM3_initialize+0x6c>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a10      	ldr	r2, [pc, #64]	; (8000308 <TIM3_initialize+0x6c>)
 80002c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80002ca:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= (6<<4);			// PWM1 mode selection
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <TIM3_initialize+0x6c>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <TIM3_initialize+0x6c>)
 80002d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80002d6:	6193      	str	r3, [r2, #24]
	TIM3->CCER |= (1<<1);			// Active Low polarity
 80002d8:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <TIM3_initialize+0x6c>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a0a      	ldr	r2, [pc, #40]	; (8000308 <TIM3_initialize+0x6c>)
 80002de:	f043 0302 	orr.w	r3, r3, #2
 80002e2:	6213      	str	r3, [r2, #32]
	TIM3->CCER |= (1<<0);			// enable TIM3_CH1 to PC6
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <TIM3_initialize+0x6c>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a07      	ldr	r2, [pc, #28]	; (8000308 <TIM3_initialize+0x6c>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6213      	str	r3, [r2, #32]
	TIM3->CR1 |= (1<<0);			// start timer 3
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <TIM3_initialize+0x6c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <TIM3_initialize+0x6c>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6013      	str	r3, [r2, #0]
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	40023800 	.word	0x40023800
 8000308:	40000400 	.word	0x40000400

0800030c <TIM2_initialize>:

void TIM2_initialize()
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<0);
 8000310:	4b27      	ldr	r3, [pc, #156]	; (80003b0 <TIM2_initialize+0xa4>)
 8000312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000314:	4a26      	ldr	r2, [pc, #152]	; (80003b0 <TIM2_initialize+0xa4>)
 8000316:	f043 0301 	orr.w	r3, r3, #1
 800031a:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->PSC = 16000-1;		// set PSC for 1KHz
 800031c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000320:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000324:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 0xFFFF-1;		// set ARR to maximum RM 649
 8000326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800032a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800032e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;				// reset counter register
 8000330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000334:	2200      	movs	r2, #0
 8000336:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CCMR1 &= ~(0xFF00);	//resetting higher 8 bit (CH2) mode RM636
 8000338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000346:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1<<8);		// Set Input option for TIM2_CH2 RM 636
 8000348:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000356:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (3<<12);		// sampling  N=8
 8000358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000362:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000366:	6193      	str	r3, [r2, #24]
	TIM2->CCER |= (1<<5);		// falling edge detection(active low) RM 640
 8000368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800036c:	6a1b      	ldr	r3, [r3, #32]
 800036e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~(1<<7);		// falling edge selection ( noninverted/rising edge)
 8000378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800037c:	6a1b      	ldr	r3, [r3, #32]
 800037e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000386:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= (1<<4);		// Timer 2 ch2 connect to GPIO PB3 (configure as a output pin)
 8000388:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800038c:	6a1b      	ldr	r3, [r3, #32]
 800038e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000392:	f043 0310 	orr.w	r3, r3, #16
 8000396:	6213      	str	r3, [r2, #32]
	TIM2->CR1 |= (1<<0);		// start timer
 8000398:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003a2:	f043 0301 	orr.w	r3, r3, #1
 80003a6:	6013      	str	r3, [r2, #0]
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	40023800 	.word	0x40023800

080003b4 <main>:
 * As per the Input Capture  mode based on How fast you are clicking the
 * SWT2 you will get less difference value which will be given as
 * duty cycle for the PWM of LED connected to PC6
 */
int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	gpio_initialize();
 80003b8:	f7ff ff16 	bl	80001e8 <gpio_initialize>
	TIM3_initialize();
 80003bc:	f7ff ff6e 	bl	800029c <TIM3_initialize>
	TIM2_initialize();
 80003c0:	f7ff ffa4 	bl	800030c <TIM2_initialize>
	for(;;)
	{
		while(!(TIM2->SR & (1<<2)));		//check for capture RM 676
 80003c4:	bf00      	nop
 80003c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ca:	691b      	ldr	r3, [r3, #16]
 80003cc:	f003 0304 	and.w	r3, r3, #4
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d0f8      	beq.n	80003c6 <main+0x12>
		current_CCR = TIM2->CCR2;			// copy CCR2 value
 80003d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003da:	4a09      	ldr	r2, [pc, #36]	; (8000400 <main+0x4c>)
 80003dc:	6013      	str	r3, [r2, #0]
		difference = current_CCR - previous_CCR;	// calculate the difference
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <main+0x4c>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <main+0x50>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	1ad3      	subs	r3, r2, r3
 80003e8:	4a07      	ldr	r2, [pc, #28]	; (8000408 <main+0x54>)
 80003ea:	6013      	str	r3, [r2, #0]
		previous_CCR = current_CCR;			// store current to previous
 80003ec:	4b04      	ldr	r3, [pc, #16]	; (8000400 <main+0x4c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a04      	ldr	r2, [pc, #16]	; (8000404 <main+0x50>)
 80003f2:	6013      	str	r3, [r2, #0]
		TIM3->CCR1 = difference;			// Load value to CCR1 of TIM3 for PWM
 80003f4:	4a05      	ldr	r2, [pc, #20]	; (800040c <main+0x58>)
 80003f6:	4b04      	ldr	r3, [pc, #16]	; (8000408 <main+0x54>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	6353      	str	r3, [r2, #52]	; 0x34
		while(!(TIM2->SR & (1<<2)));		//check for capture RM 676
 80003fc:	e7e2      	b.n	80003c4 <main+0x10>
 80003fe:	bf00      	nop
 8000400:	2000001c 	.word	0x2000001c
 8000404:	20000020 	.word	0x20000020
 8000408:	20000024 	.word	0x20000024
 800040c:	40000400 	.word	0x40000400

08000410 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000410:	480d      	ldr	r0, [pc, #52]	; (8000448 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000412:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000414:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000418:	480c      	ldr	r0, [pc, #48]	; (800044c <LoopForever+0x6>)
  ldr r1, =_edata
 800041a:	490d      	ldr	r1, [pc, #52]	; (8000450 <LoopForever+0xa>)
  ldr r2, =_sidata
 800041c:	4a0d      	ldr	r2, [pc, #52]	; (8000454 <LoopForever+0xe>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000420:	e002      	b.n	8000428 <LoopCopyDataInit>

08000422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000426:	3304      	adds	r3, #4

08000428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800042c:	d3f9      	bcc.n	8000422 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800042e:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000430:	4c0a      	ldr	r4, [pc, #40]	; (800045c <LoopForever+0x16>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000434:	e001      	b.n	800043a <LoopFillZerobss>

08000436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000438:	3204      	adds	r2, #4

0800043a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800043c:	d3fb      	bcc.n	8000436 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800043e:	f000 f811 	bl	8000464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000442:	f7ff ffb7 	bl	80003b4 <main>

08000446 <LoopForever>:

LoopForever:
    b LoopForever
 8000446:	e7fe      	b.n	8000446 <LoopForever>
  ldr   r0, =_estack
 8000448:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800044c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000450:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000454:	080004cc 	.word	0x080004cc
  ldr r2, =_sbss
 8000458:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800045c:	20000028 	.word	0x20000028

08000460 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000460:	e7fe      	b.n	8000460 <ADC_IRQHandler>
	...

08000464 <__libc_init_array>:
 8000464:	b570      	push	{r4, r5, r6, lr}
 8000466:	4d0d      	ldr	r5, [pc, #52]	; (800049c <__libc_init_array+0x38>)
 8000468:	4c0d      	ldr	r4, [pc, #52]	; (80004a0 <__libc_init_array+0x3c>)
 800046a:	1b64      	subs	r4, r4, r5
 800046c:	10a4      	asrs	r4, r4, #2
 800046e:	2600      	movs	r6, #0
 8000470:	42a6      	cmp	r6, r4
 8000472:	d109      	bne.n	8000488 <__libc_init_array+0x24>
 8000474:	4d0b      	ldr	r5, [pc, #44]	; (80004a4 <__libc_init_array+0x40>)
 8000476:	4c0c      	ldr	r4, [pc, #48]	; (80004a8 <__libc_init_array+0x44>)
 8000478:	f000 f818 	bl	80004ac <_init>
 800047c:	1b64      	subs	r4, r4, r5
 800047e:	10a4      	asrs	r4, r4, #2
 8000480:	2600      	movs	r6, #0
 8000482:	42a6      	cmp	r6, r4
 8000484:	d105      	bne.n	8000492 <__libc_init_array+0x2e>
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	f855 3b04 	ldr.w	r3, [r5], #4
 800048c:	4798      	blx	r3
 800048e:	3601      	adds	r6, #1
 8000490:	e7ee      	b.n	8000470 <__libc_init_array+0xc>
 8000492:	f855 3b04 	ldr.w	r3, [r5], #4
 8000496:	4798      	blx	r3
 8000498:	3601      	adds	r6, #1
 800049a:	e7f2      	b.n	8000482 <__libc_init_array+0x1e>
 800049c:	080004c4 	.word	0x080004c4
 80004a0:	080004c4 	.word	0x080004c4
 80004a4:	080004c4 	.word	0x080004c4
 80004a8:	080004c8 	.word	0x080004c8

080004ac <_init>:
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	bf00      	nop
 80004b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b2:	bc08      	pop	{r3}
 80004b4:	469e      	mov	lr, r3
 80004b6:	4770      	bx	lr

080004b8 <_fini>:
 80004b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ba:	bf00      	nop
 80004bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004be:	bc08      	pop	{r3}
 80004c0:	469e      	mov	lr, r3
 80004c2:	4770      	bx	lr
