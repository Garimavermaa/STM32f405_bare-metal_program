
My_first_prog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ec0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001070  08001070  00011070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010b4  080010b4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080010b4  080010b4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010b4  080010b4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010b4  080010b4  000110b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010b8  080010b8  000110b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080010bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000030  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  00020064  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000007c0  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000031e  00000000  00000000  0002084e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00020b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000090  00000000  00000000  00020c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a6ce  00000000  00000000  00020cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000010b7  00000000  00000000  0004b396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b183  00000000  00000000  0004c44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000c75d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000608  00000000  00000000  000c7620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001058 	.word	0x08001058

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08001058 	.word	0x08001058

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <SetOutput>:
#include "lcd.h"


void SetOutput(GPIO_TypeDef *gpio,uint32_t pin)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]
	gpio->MODER|=(1<<(pin*2));
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	683a      	ldr	r2, [r7, #0]
 80002a0:	0052      	lsls	r2, r2, #1
 80002a2:	2101      	movs	r1, #1
 80002a4:	fa01 f202 	lsl.w	r2, r1, r2
 80002a8:	431a      	orrs	r2, r3
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	601a      	str	r2, [r3, #0]
	gpio->MODER&=~(1<<((pin*2)+1));
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	683a      	ldr	r2, [r7, #0]
 80002b4:	0052      	lsls	r2, r2, #1
 80002b6:	3201      	adds	r2, #1
 80002b8:	2101      	movs	r1, #1
 80002ba:	fa01 f202 	lsl.w	r2, r1, r2
 80002be:	43d2      	mvns	r2, r2
 80002c0:	401a      	ands	r2, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	601a      	str	r2, [r3, #0]
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr

080002d0 <SetBit>:

void SetBit(GPIO_TypeDef *gpio,uint32_t pin)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
	gpio->ODR|=(1<<pin);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	2101      	movs	r1, #1
 80002e0:	683a      	ldr	r2, [r7, #0]
 80002e2:	fa01 f202 	lsl.w	r2, r1, r2
 80002e6:	431a      	orrs	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	615a      	str	r2, [r3, #20]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr

080002f6 <ClrBit>:

void ClrBit(GPIO_TypeDef *gpio,uint32_t pin)
{
 80002f6:	b480      	push	{r7}
 80002f8:	b083      	sub	sp, #12
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	6078      	str	r0, [r7, #4]
 80002fe:	6039      	str	r1, [r7, #0]
	gpio->ODR&=~(1<<pin);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	2101      	movs	r1, #1
 8000306:	683a      	ldr	r2, [r7, #0]
 8000308:	fa01 f202 	lsl.w	r2, r1, r2
 800030c:	43d2      	mvns	r2, r2
 800030e:	401a      	ands	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	615a      	str	r2, [r3, #20]
}
 8000314:	bf00      	nop
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr

0800031e <DelayLcd>:
{
	gpio->ODR^=(1<<pin);
}

void DelayLcd(void)
{
 800031e:	b480      	push	{r7}
 8000320:	b083      	sub	sp, #12
 8000322:	af00      	add	r7, sp, #0
	volatile uint16_t i=0;
 8000324:	2300      	movs	r3, #0
 8000326:	80fb      	strh	r3, [r7, #6]
	for(i=0;i<16800;i++);
 8000328:	2300      	movs	r3, #0
 800032a:	80fb      	strh	r3, [r7, #6]
 800032c:	e004      	b.n	8000338 <DelayLcd+0x1a>
 800032e:	88fb      	ldrh	r3, [r7, #6]
 8000330:	b29b      	uxth	r3, r3
 8000332:	3301      	adds	r3, #1
 8000334:	b29b      	uxth	r3, r3
 8000336:	80fb      	strh	r3, [r7, #6]
 8000338:	88fb      	ldrh	r3, [r7, #6]
 800033a:	b29b      	uxth	r3, r3
 800033c:	f244 129f 	movw	r2, #16799	; 0x419f
 8000340:	4293      	cmp	r3, r2
 8000342:	d9f4      	bls.n	800032e <DelayLcd+0x10>
}
 8000344:	bf00      	nop
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <LcdInit>:

void LcdInit(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 7;    // all three ports A,B,C clocks are enabled
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <LcdInit+0x8c>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000358:	4a20      	ldr	r2, [pc, #128]	; (80003dc <LcdInit+0x8c>)
 800035a:	f043 0307 	orr.w	r3, r3, #7
 800035e:	6313      	str	r3, [r2, #48]	; 0x30

	SetOutput(PORT_RS,PIN_RS);
 8000360:	2100      	movs	r1, #0
 8000362:	481f      	ldr	r0, [pc, #124]	; (80003e0 <LcdInit+0x90>)
 8000364:	f7ff ff94 	bl	8000290 <SetOutput>
	SetOutput(PORT_EN,PIN_EN);
 8000368:	2101      	movs	r1, #1
 800036a:	481d      	ldr	r0, [pc, #116]	; (80003e0 <LcdInit+0x90>)
 800036c:	f7ff ff90 	bl	8000290 <SetOutput>

	SetOutput(PORT_D0,PIN_D0);
 8000370:	2104      	movs	r1, #4
 8000372:	481c      	ldr	r0, [pc, #112]	; (80003e4 <LcdInit+0x94>)
 8000374:	f7ff ff8c 	bl	8000290 <SetOutput>
	SetOutput(PORT_D1,PIN_D1);
 8000378:	2105      	movs	r1, #5
 800037a:	481a      	ldr	r0, [pc, #104]	; (80003e4 <LcdInit+0x94>)
 800037c:	f7ff ff88 	bl	8000290 <SetOutput>
	SetOutput(PORT_D2,PIN_D2);
 8000380:	2100      	movs	r1, #0
 8000382:	4819      	ldr	r0, [pc, #100]	; (80003e8 <LcdInit+0x98>)
 8000384:	f7ff ff84 	bl	8000290 <SetOutput>
	SetOutput(PORT_D3,PIN_D3);
 8000388:	2101      	movs	r1, #1
 800038a:	4817      	ldr	r0, [pc, #92]	; (80003e8 <LcdInit+0x98>)
 800038c:	f7ff ff80 	bl	8000290 <SetOutput>

	SetOutput(PORT_D4,PIN_D4);
 8000390:	210c      	movs	r1, #12
 8000392:	4815      	ldr	r0, [pc, #84]	; (80003e8 <LcdInit+0x98>)
 8000394:	f7ff ff7c 	bl	8000290 <SetOutput>
	SetOutput(PORT_D5,PIN_D5);
 8000398:	210d      	movs	r1, #13
 800039a:	4813      	ldr	r0, [pc, #76]	; (80003e8 <LcdInit+0x98>)
 800039c:	f7ff ff78 	bl	8000290 <SetOutput>
	SetOutput(PORT_D6,PIN_D6);
 80003a0:	210e      	movs	r1, #14
 80003a2:	4811      	ldr	r0, [pc, #68]	; (80003e8 <LcdInit+0x98>)
 80003a4:	f7ff ff74 	bl	8000290 <SetOutput>
	SetOutput(PORT_D7,PIN_D7);
 80003a8:	210f      	movs	r1, #15
 80003aa:	480f      	ldr	r0, [pc, #60]	; (80003e8 <LcdInit+0x98>)
 80003ac:	f7ff ff70 	bl	8000290 <SetOutput>


	LcdFxn(0,0x33);
 80003b0:	2133      	movs	r1, #51	; 0x33
 80003b2:	2000      	movs	r0, #0
 80003b4:	f000 f81a 	bl	80003ec <LcdFxn>
	LcdFxn(0,0x32);
 80003b8:	2132      	movs	r1, #50	; 0x32
 80003ba:	2000      	movs	r0, #0
 80003bc:	f000 f816 	bl	80003ec <LcdFxn>
	LcdFxn(0,0x28);
 80003c0:	2128      	movs	r1, #40	; 0x28
 80003c2:	2000      	movs	r0, #0
 80003c4:	f000 f812 	bl	80003ec <LcdFxn>
	LcdFxn(0,0x0c);
 80003c8:	210c      	movs	r1, #12
 80003ca:	2000      	movs	r0, #0
 80003cc:	f000 f80e 	bl	80003ec <LcdFxn>
	LcdFxn(0,0x01);
 80003d0:	2101      	movs	r1, #1
 80003d2:	2000      	movs	r0, #0
 80003d4:	f000 f80a 	bl	80003ec <LcdFxn>
}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40023800 	.word	0x40023800
 80003e0:	40020000 	.word	0x40020000
 80003e4:	40020800 	.word	0x40020800
 80003e8:	40020400 	.word	0x40020400

080003ec <LcdFxn>:

void LcdFxn(uint8_t cmd,uint8_t val)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	460a      	mov	r2, r1
 80003f6:	71fb      	strb	r3, [r7, #7]
 80003f8:	4613      	mov	r3, r2
 80003fa:	71bb      	strb	r3, [r7, #6]
//	GPIOD->ODR |= (val &0xf0) << 8;      //
//	GPIOD->ODR |= (val & 0x0c) >> 2;
//    GPIOC->ODR &= 0xffcf;
//    GPIOC->ODR |= (val & 0x03) << 4;

	if(val&(1<<7))
 80003fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000400:	2b00      	cmp	r3, #0
 8000402:	da04      	bge.n	800040e <LcdFxn+0x22>
	SetBit(PORT_D7,PIN_D7);
 8000404:	210f      	movs	r1, #15
 8000406:	486b      	ldr	r0, [pc, #428]	; (80005b4 <LcdFxn+0x1c8>)
 8000408:	f7ff ff62 	bl	80002d0 <SetBit>
 800040c:	e003      	b.n	8000416 <LcdFxn+0x2a>
	else
	ClrBit(PORT_D7,PIN_D7);
 800040e:	210f      	movs	r1, #15
 8000410:	4868      	ldr	r0, [pc, #416]	; (80005b4 <LcdFxn+0x1c8>)
 8000412:	f7ff ff70 	bl	80002f6 <ClrBit>

	if(val&(1<<6))
 8000416:	79bb      	ldrb	r3, [r7, #6]
 8000418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800041c:	2b00      	cmp	r3, #0
 800041e:	d004      	beq.n	800042a <LcdFxn+0x3e>
	SetBit(PORT_D6,PIN_D6);
 8000420:	210e      	movs	r1, #14
 8000422:	4864      	ldr	r0, [pc, #400]	; (80005b4 <LcdFxn+0x1c8>)
 8000424:	f7ff ff54 	bl	80002d0 <SetBit>
 8000428:	e003      	b.n	8000432 <LcdFxn+0x46>
	else
	ClrBit(PORT_D6,PIN_D6);
 800042a:	210e      	movs	r1, #14
 800042c:	4861      	ldr	r0, [pc, #388]	; (80005b4 <LcdFxn+0x1c8>)
 800042e:	f7ff ff62 	bl	80002f6 <ClrBit>

	if(val&(1<<5))
 8000432:	79bb      	ldrb	r3, [r7, #6]
 8000434:	f003 0320 	and.w	r3, r3, #32
 8000438:	2b00      	cmp	r3, #0
 800043a:	d004      	beq.n	8000446 <LcdFxn+0x5a>
	SetBit(PORT_D5,PIN_D5);
 800043c:	210d      	movs	r1, #13
 800043e:	485d      	ldr	r0, [pc, #372]	; (80005b4 <LcdFxn+0x1c8>)
 8000440:	f7ff ff46 	bl	80002d0 <SetBit>
 8000444:	e003      	b.n	800044e <LcdFxn+0x62>
	else
	ClrBit(PORT_D5,PIN_D5);
 8000446:	210d      	movs	r1, #13
 8000448:	485a      	ldr	r0, [pc, #360]	; (80005b4 <LcdFxn+0x1c8>)
 800044a:	f7ff ff54 	bl	80002f6 <ClrBit>

	if(val&(1<<4))
 800044e:	79bb      	ldrb	r3, [r7, #6]
 8000450:	f003 0310 	and.w	r3, r3, #16
 8000454:	2b00      	cmp	r3, #0
 8000456:	d004      	beq.n	8000462 <LcdFxn+0x76>
	SetBit(PORT_D4,PIN_D4);
 8000458:	210c      	movs	r1, #12
 800045a:	4856      	ldr	r0, [pc, #344]	; (80005b4 <LcdFxn+0x1c8>)
 800045c:	f7ff ff38 	bl	80002d0 <SetBit>
 8000460:	e003      	b.n	800046a <LcdFxn+0x7e>
	else
	ClrBit(PORT_D4,PIN_D4);
 8000462:	210c      	movs	r1, #12
 8000464:	4853      	ldr	r0, [pc, #332]	; (80005b4 <LcdFxn+0x1c8>)
 8000466:	f7ff ff46 	bl	80002f6 <ClrBit>

	if(val&(1<<3))
 800046a:	79bb      	ldrb	r3, [r7, #6]
 800046c:	f003 0308 	and.w	r3, r3, #8
 8000470:	2b00      	cmp	r3, #0
 8000472:	d004      	beq.n	800047e <LcdFxn+0x92>
	SetBit(PORT_D3,PIN_D3);
 8000474:	2101      	movs	r1, #1
 8000476:	484f      	ldr	r0, [pc, #316]	; (80005b4 <LcdFxn+0x1c8>)
 8000478:	f7ff ff2a 	bl	80002d0 <SetBit>
 800047c:	e003      	b.n	8000486 <LcdFxn+0x9a>
	else
	ClrBit(PORT_D3,PIN_D3);
 800047e:	2101      	movs	r1, #1
 8000480:	484c      	ldr	r0, [pc, #304]	; (80005b4 <LcdFxn+0x1c8>)
 8000482:	f7ff ff38 	bl	80002f6 <ClrBit>

	if(val&(1<<2))
 8000486:	79bb      	ldrb	r3, [r7, #6]
 8000488:	f003 0304 	and.w	r3, r3, #4
 800048c:	2b00      	cmp	r3, #0
 800048e:	d004      	beq.n	800049a <LcdFxn+0xae>
	SetBit(PORT_D2,PIN_D2);
 8000490:	2100      	movs	r1, #0
 8000492:	4848      	ldr	r0, [pc, #288]	; (80005b4 <LcdFxn+0x1c8>)
 8000494:	f7ff ff1c 	bl	80002d0 <SetBit>
 8000498:	e003      	b.n	80004a2 <LcdFxn+0xb6>
	else
	ClrBit(PORT_D2,PIN_D2);
 800049a:	2100      	movs	r1, #0
 800049c:	4845      	ldr	r0, [pc, #276]	; (80005b4 <LcdFxn+0x1c8>)
 800049e:	f7ff ff2a 	bl	80002f6 <ClrBit>

	if(val&(1<<1))
 80004a2:	79bb      	ldrb	r3, [r7, #6]
 80004a4:	f003 0302 	and.w	r3, r3, #2
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d004      	beq.n	80004b6 <LcdFxn+0xca>
	SetBit(PORT_D1,PIN_D1);
 80004ac:	2105      	movs	r1, #5
 80004ae:	4842      	ldr	r0, [pc, #264]	; (80005b8 <LcdFxn+0x1cc>)
 80004b0:	f7ff ff0e 	bl	80002d0 <SetBit>
 80004b4:	e003      	b.n	80004be <LcdFxn+0xd2>
	else
	ClrBit(PORT_D1,PIN_D1);
 80004b6:	2105      	movs	r1, #5
 80004b8:	483f      	ldr	r0, [pc, #252]	; (80005b8 <LcdFxn+0x1cc>)
 80004ba:	f7ff ff1c 	bl	80002f6 <ClrBit>

	if(val&(1<<0))
 80004be:	79bb      	ldrb	r3, [r7, #6]
 80004c0:	f003 0301 	and.w	r3, r3, #1
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d004      	beq.n	80004d2 <LcdFxn+0xe6>
	SetBit(PORT_D0,PIN_D0);
 80004c8:	2104      	movs	r1, #4
 80004ca:	483b      	ldr	r0, [pc, #236]	; (80005b8 <LcdFxn+0x1cc>)
 80004cc:	f7ff ff00 	bl	80002d0 <SetBit>
 80004d0:	e003      	b.n	80004da <LcdFxn+0xee>
	else
	ClrBit(PORT_D0,PIN_D0);
 80004d2:	2104      	movs	r1, #4
 80004d4:	4838      	ldr	r0, [pc, #224]	; (80005b8 <LcdFxn+0x1cc>)
 80004d6:	f7ff ff0e 	bl	80002f6 <ClrBit>

	if(cmd)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d004      	beq.n	80004ea <LcdFxn+0xfe>
	 SetBit(PORT_RS,PIN_RS);
 80004e0:	2100      	movs	r1, #0
 80004e2:	4836      	ldr	r0, [pc, #216]	; (80005bc <LcdFxn+0x1d0>)
 80004e4:	f7ff fef4 	bl	80002d0 <SetBit>
 80004e8:	e003      	b.n	80004f2 <LcdFxn+0x106>
	else
	 ClrBit(PORT_RS,PIN_RS);
 80004ea:	2100      	movs	r1, #0
 80004ec:	4833      	ldr	r0, [pc, #204]	; (80005bc <LcdFxn+0x1d0>)
 80004ee:	f7ff ff02 	bl	80002f6 <ClrBit>

	SetBit(PORT_EN,PIN_EN);
 80004f2:	2101      	movs	r1, #1
 80004f4:	4831      	ldr	r0, [pc, #196]	; (80005bc <LcdFxn+0x1d0>)
 80004f6:	f7ff feeb 	bl	80002d0 <SetBit>
	DelayLcd();
 80004fa:	f7ff ff10 	bl	800031e <DelayLcd>
	ClrBit(PORT_EN,PIN_EN);
 80004fe:	2101      	movs	r1, #1
 8000500:	482e      	ldr	r0, [pc, #184]	; (80005bc <LcdFxn+0x1d0>)
 8000502:	f7ff fef8 	bl	80002f6 <ClrBit>
	DelayLcd();
 8000506:	f7ff ff0a 	bl	800031e <DelayLcd>

	if(val&(1<<3))
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	f003 0308 	and.w	r3, r3, #8
 8000510:	2b00      	cmp	r3, #0
 8000512:	d004      	beq.n	800051e <LcdFxn+0x132>
	SetBit(PORT_D7,PIN_D7);
 8000514:	210f      	movs	r1, #15
 8000516:	4827      	ldr	r0, [pc, #156]	; (80005b4 <LcdFxn+0x1c8>)
 8000518:	f7ff feda 	bl	80002d0 <SetBit>
 800051c:	e003      	b.n	8000526 <LcdFxn+0x13a>
	else
	ClrBit(PORT_D7,PIN_D7);
 800051e:	210f      	movs	r1, #15
 8000520:	4824      	ldr	r0, [pc, #144]	; (80005b4 <LcdFxn+0x1c8>)
 8000522:	f7ff fee8 	bl	80002f6 <ClrBit>

	if(val&(1<<2))
 8000526:	79bb      	ldrb	r3, [r7, #6]
 8000528:	f003 0304 	and.w	r3, r3, #4
 800052c:	2b00      	cmp	r3, #0
 800052e:	d004      	beq.n	800053a <LcdFxn+0x14e>
	SetBit(PORT_D6,PIN_D6);
 8000530:	210e      	movs	r1, #14
 8000532:	4820      	ldr	r0, [pc, #128]	; (80005b4 <LcdFxn+0x1c8>)
 8000534:	f7ff fecc 	bl	80002d0 <SetBit>
 8000538:	e003      	b.n	8000542 <LcdFxn+0x156>
	else
	ClrBit(PORT_D6,PIN_D6);
 800053a:	210e      	movs	r1, #14
 800053c:	481d      	ldr	r0, [pc, #116]	; (80005b4 <LcdFxn+0x1c8>)
 800053e:	f7ff feda 	bl	80002f6 <ClrBit>

	if(val&(1<<1))
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	f003 0302 	and.w	r3, r3, #2
 8000548:	2b00      	cmp	r3, #0
 800054a:	d004      	beq.n	8000556 <LcdFxn+0x16a>
	SetBit(PORT_D5,PIN_D5);
 800054c:	210d      	movs	r1, #13
 800054e:	4819      	ldr	r0, [pc, #100]	; (80005b4 <LcdFxn+0x1c8>)
 8000550:	f7ff febe 	bl	80002d0 <SetBit>
 8000554:	e003      	b.n	800055e <LcdFxn+0x172>
	else
	ClrBit(PORT_D5,PIN_D5);
 8000556:	210d      	movs	r1, #13
 8000558:	4816      	ldr	r0, [pc, #88]	; (80005b4 <LcdFxn+0x1c8>)
 800055a:	f7ff fecc 	bl	80002f6 <ClrBit>

	if(val&(1<<0))
 800055e:	79bb      	ldrb	r3, [r7, #6]
 8000560:	f003 0301 	and.w	r3, r3, #1
 8000564:	2b00      	cmp	r3, #0
 8000566:	d004      	beq.n	8000572 <LcdFxn+0x186>
	SetBit(PORT_D4,PIN_D4);
 8000568:	210c      	movs	r1, #12
 800056a:	4812      	ldr	r0, [pc, #72]	; (80005b4 <LcdFxn+0x1c8>)
 800056c:	f7ff feb0 	bl	80002d0 <SetBit>
 8000570:	e003      	b.n	800057a <LcdFxn+0x18e>
	else
	ClrBit(PORT_D4,PIN_D4);
 8000572:	210c      	movs	r1, #12
 8000574:	480f      	ldr	r0, [pc, #60]	; (80005b4 <LcdFxn+0x1c8>)
 8000576:	f7ff febe 	bl	80002f6 <ClrBit>

	if(cmd)   SetBit(PORT_RS,PIN_RS);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d004      	beq.n	800058a <LcdFxn+0x19e>
 8000580:	2100      	movs	r1, #0
 8000582:	480e      	ldr	r0, [pc, #56]	; (80005bc <LcdFxn+0x1d0>)
 8000584:	f7ff fea4 	bl	80002d0 <SetBit>
 8000588:	e003      	b.n	8000592 <LcdFxn+0x1a6>
	else	  ClrBit(PORT_RS,PIN_RS);
 800058a:	2100      	movs	r1, #0
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <LcdFxn+0x1d0>)
 800058e:	f7ff feb2 	bl	80002f6 <ClrBit>

	SetBit(PORT_EN,PIN_EN);
 8000592:	2101      	movs	r1, #1
 8000594:	4809      	ldr	r0, [pc, #36]	; (80005bc <LcdFxn+0x1d0>)
 8000596:	f7ff fe9b 	bl	80002d0 <SetBit>
	DelayLcd();
 800059a:	f7ff fec0 	bl	800031e <DelayLcd>
	ClrBit(PORT_EN,PIN_EN);
 800059e:	2101      	movs	r1, #1
 80005a0:	4806      	ldr	r0, [pc, #24]	; (80005bc <LcdFxn+0x1d0>)
 80005a2:	f7ff fea8 	bl	80002f6 <ClrBit>
	DelayLcd();
 80005a6:	f7ff feba 	bl	800031e <DelayLcd>

}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40020400 	.word	0x40020400
 80005b8:	40020800 	.word	0x40020800
 80005bc:	40020000 	.word	0x40020000

080005c0 <lprint>:

void lprint(uint8_t add, char *str)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	71fb      	strb	r3, [r7, #7]
   uint8_t  i=0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
   LcdFxn(0,add);
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4619      	mov	r1, r3
 80005d4:	2000      	movs	r0, #0
 80005d6:	f7ff ff09 	bl	80003ec <LcdFxn>

   while(str[i]!=0)
 80005da:	e00d      	b.n	80005f8 <lprint+0x38>
   {
	   LcdFxn(1,str[i]);
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	683a      	ldr	r2, [r7, #0]
 80005e0:	4413      	add	r3, r2
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	2001      	movs	r0, #1
 80005e8:	f7ff ff00 	bl	80003ec <LcdFxn>
	   str++;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	603b      	str	r3, [r7, #0]
	   if(i>16)
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b10      	cmp	r3, #16
 80005f6:	d806      	bhi.n	8000606 <lprint+0x46>
   while(str[i]!=0)
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	683a      	ldr	r2, [r7, #0]
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1eb      	bne.n	80005dc <lprint+0x1c>
		   break;
   }
}
 8000604:	e000      	b.n	8000608 <lprint+0x48>
		   break;
 8000606:	bf00      	nop
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
  uint16_t count = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	82fb      	strh	r3, [r7, #22]
  char buf[20];
	LcdInit ();
 800061a:	f7ff fe99 	bl	8000350 <LcdInit>
	//lprint (0x80,"Hello");

	while (1)
	{
	  sprintf (buf,"Count -> %04d", count++);
 800061e:	8afb      	ldrh	r3, [r7, #22]
 8000620:	1c5a      	adds	r2, r3, #1
 8000622:	82fa      	strh	r2, [r7, #22]
 8000624:	461a      	mov	r2, r3
 8000626:	463b      	mov	r3, r7
 8000628:	4906      	ldr	r1, [pc, #24]	; (8000644 <main+0x34>)
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f8a8 	bl	8000780 <siprintf>
	  lprint (0x80,buf);
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	2080      	movs	r0, #128	; 0x80
 8000636:	f7ff ffc3 	bl	80005c0 <lprint>
	  gen_delay (10000);
 800063a:	f242 7010 	movw	r0, #10000	; 0x2710
 800063e:	f000 f803 	bl	8000648 <gen_delay>
	  sprintf (buf,"Count -> %04d", count++);
 8000642:	e7ec      	b.n	800061e <main+0xe>
 8000644:	08001070 	.word	0x08001070

08000648 <gen_delay>:
//
//	}
}

void gen_delay (int dly)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 while (dly) dly--;
 8000650:	e002      	b.n	8000658 <gen_delay+0x10>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	3b01      	subs	r3, #1
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1f9      	bne.n	8000652 <gen_delay+0xa>
}
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
	...

0800066c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000674:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <_sbrk+0x5c>)
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <_sbrk+0x60>)
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <_sbrk+0x64>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d102      	bne.n	800068e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <_sbrk+0x64>)
 800068a:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <_sbrk+0x68>)
 800068c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <_sbrk+0x64>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	429a      	cmp	r2, r3
 800069a:	d207      	bcs.n	80006ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800069c:	f000 f846 	bl	800072c <__errno>
 80006a0:	4603      	mov	r3, r0
 80006a2:	220c      	movs	r2, #12
 80006a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	e009      	b.n	80006c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <_sbrk+0x64>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006b2:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <_sbrk+0x64>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	4a05      	ldr	r2, [pc, #20]	; (80006d0 <_sbrk+0x64>)
 80006bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006be:	68fb      	ldr	r3, [r7, #12]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20020000 	.word	0x20020000
 80006cc:	00000400 	.word	0x00000400
 80006d0:	20000080 	.word	0x20000080
 80006d4:	20000098 	.word	0x20000098

080006d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e2:	490d      	ldr	r1, [pc, #52]	; (8000718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e4:	4a0d      	ldr	r2, [pc, #52]	; (800071c <LoopForever+0xe>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e8:	e002      	b.n	80006f0 <LoopCopyDataInit>

080006ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ee:	3304      	adds	r3, #4

080006f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f4:	d3f9      	bcc.n	80006ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f6:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f8:	4c0a      	ldr	r4, [pc, #40]	; (8000724 <LoopForever+0x16>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006fc:	e001      	b.n	8000702 <LoopFillZerobss>

080006fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000700:	3204      	adds	r2, #4

08000702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000704:	d3fb      	bcc.n	80006fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000706:	f000 f817 	bl	8000738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800070a:	f7ff ff81 	bl	8000610 <main>

0800070e <LoopForever>:

LoopForever:
  b LoopForever
 800070e:	e7fe      	b.n	800070e <LoopForever>
  ldr   r0, =_estack
 8000710:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000718:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800071c:	080010bc 	.word	0x080010bc
  ldr r2, =_sbss
 8000720:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000724:	20000094 	.word	0x20000094

08000728 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC_IRQHandler>
	...

0800072c <__errno>:
 800072c:	4b01      	ldr	r3, [pc, #4]	; (8000734 <__errno+0x8>)
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000000 	.word	0x20000000

08000738 <__libc_init_array>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	4d0d      	ldr	r5, [pc, #52]	; (8000770 <__libc_init_array+0x38>)
 800073c:	4c0d      	ldr	r4, [pc, #52]	; (8000774 <__libc_init_array+0x3c>)
 800073e:	1b64      	subs	r4, r4, r5
 8000740:	10a4      	asrs	r4, r4, #2
 8000742:	2600      	movs	r6, #0
 8000744:	42a6      	cmp	r6, r4
 8000746:	d109      	bne.n	800075c <__libc_init_array+0x24>
 8000748:	4d0b      	ldr	r5, [pc, #44]	; (8000778 <__libc_init_array+0x40>)
 800074a:	4c0c      	ldr	r4, [pc, #48]	; (800077c <__libc_init_array+0x44>)
 800074c:	f000 fc84 	bl	8001058 <_init>
 8000750:	1b64      	subs	r4, r4, r5
 8000752:	10a4      	asrs	r4, r4, #2
 8000754:	2600      	movs	r6, #0
 8000756:	42a6      	cmp	r6, r4
 8000758:	d105      	bne.n	8000766 <__libc_init_array+0x2e>
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000760:	4798      	blx	r3
 8000762:	3601      	adds	r6, #1
 8000764:	e7ee      	b.n	8000744 <__libc_init_array+0xc>
 8000766:	f855 3b04 	ldr.w	r3, [r5], #4
 800076a:	4798      	blx	r3
 800076c:	3601      	adds	r6, #1
 800076e:	e7f2      	b.n	8000756 <__libc_init_array+0x1e>
 8000770:	080010b4 	.word	0x080010b4
 8000774:	080010b4 	.word	0x080010b4
 8000778:	080010b4 	.word	0x080010b4
 800077c:	080010b8 	.word	0x080010b8

08000780 <siprintf>:
 8000780:	b40e      	push	{r1, r2, r3}
 8000782:	b500      	push	{lr}
 8000784:	b09c      	sub	sp, #112	; 0x70
 8000786:	ab1d      	add	r3, sp, #116	; 0x74
 8000788:	9002      	str	r0, [sp, #8]
 800078a:	9006      	str	r0, [sp, #24]
 800078c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <siprintf+0x38>)
 8000792:	9107      	str	r1, [sp, #28]
 8000794:	9104      	str	r1, [sp, #16]
 8000796:	4909      	ldr	r1, [pc, #36]	; (80007bc <siprintf+0x3c>)
 8000798:	f853 2b04 	ldr.w	r2, [r3], #4
 800079c:	9105      	str	r1, [sp, #20]
 800079e:	6800      	ldr	r0, [r0, #0]
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	a902      	add	r1, sp, #8
 80007a4:	f000 f868 	bl	8000878 <_svfiprintf_r>
 80007a8:	9b02      	ldr	r3, [sp, #8]
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
 80007ae:	b01c      	add	sp, #112	; 0x70
 80007b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80007b4:	b003      	add	sp, #12
 80007b6:	4770      	bx	lr
 80007b8:	20000000 	.word	0x20000000
 80007bc:	ffff0208 	.word	0xffff0208

080007c0 <__ssputs_r>:
 80007c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007c4:	688e      	ldr	r6, [r1, #8]
 80007c6:	429e      	cmp	r6, r3
 80007c8:	4682      	mov	sl, r0
 80007ca:	460c      	mov	r4, r1
 80007cc:	4690      	mov	r8, r2
 80007ce:	461f      	mov	r7, r3
 80007d0:	d838      	bhi.n	8000844 <__ssputs_r+0x84>
 80007d2:	898a      	ldrh	r2, [r1, #12]
 80007d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80007d8:	d032      	beq.n	8000840 <__ssputs_r+0x80>
 80007da:	6825      	ldr	r5, [r4, #0]
 80007dc:	6909      	ldr	r1, [r1, #16]
 80007de:	eba5 0901 	sub.w	r9, r5, r1
 80007e2:	6965      	ldr	r5, [r4, #20]
 80007e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80007e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80007ec:	3301      	adds	r3, #1
 80007ee:	444b      	add	r3, r9
 80007f0:	106d      	asrs	r5, r5, #1
 80007f2:	429d      	cmp	r5, r3
 80007f4:	bf38      	it	cc
 80007f6:	461d      	movcc	r5, r3
 80007f8:	0553      	lsls	r3, r2, #21
 80007fa:	d531      	bpl.n	8000860 <__ssputs_r+0xa0>
 80007fc:	4629      	mov	r1, r5
 80007fe:	f000 fb61 	bl	8000ec4 <_malloc_r>
 8000802:	4606      	mov	r6, r0
 8000804:	b950      	cbnz	r0, 800081c <__ssputs_r+0x5c>
 8000806:	230c      	movs	r3, #12
 8000808:	f8ca 3000 	str.w	r3, [sl]
 800080c:	89a3      	ldrh	r3, [r4, #12]
 800080e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000812:	81a3      	strh	r3, [r4, #12]
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800081c:	6921      	ldr	r1, [r4, #16]
 800081e:	464a      	mov	r2, r9
 8000820:	f000 fabe 	bl	8000da0 <memcpy>
 8000824:	89a3      	ldrh	r3, [r4, #12]
 8000826:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800082a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082e:	81a3      	strh	r3, [r4, #12]
 8000830:	6126      	str	r6, [r4, #16]
 8000832:	6165      	str	r5, [r4, #20]
 8000834:	444e      	add	r6, r9
 8000836:	eba5 0509 	sub.w	r5, r5, r9
 800083a:	6026      	str	r6, [r4, #0]
 800083c:	60a5      	str	r5, [r4, #8]
 800083e:	463e      	mov	r6, r7
 8000840:	42be      	cmp	r6, r7
 8000842:	d900      	bls.n	8000846 <__ssputs_r+0x86>
 8000844:	463e      	mov	r6, r7
 8000846:	6820      	ldr	r0, [r4, #0]
 8000848:	4632      	mov	r2, r6
 800084a:	4641      	mov	r1, r8
 800084c:	f000 fab6 	bl	8000dbc <memmove>
 8000850:	68a3      	ldr	r3, [r4, #8]
 8000852:	1b9b      	subs	r3, r3, r6
 8000854:	60a3      	str	r3, [r4, #8]
 8000856:	6823      	ldr	r3, [r4, #0]
 8000858:	4433      	add	r3, r6
 800085a:	6023      	str	r3, [r4, #0]
 800085c:	2000      	movs	r0, #0
 800085e:	e7db      	b.n	8000818 <__ssputs_r+0x58>
 8000860:	462a      	mov	r2, r5
 8000862:	f000 fba3 	bl	8000fac <_realloc_r>
 8000866:	4606      	mov	r6, r0
 8000868:	2800      	cmp	r0, #0
 800086a:	d1e1      	bne.n	8000830 <__ssputs_r+0x70>
 800086c:	6921      	ldr	r1, [r4, #16]
 800086e:	4650      	mov	r0, sl
 8000870:	f000 fabe 	bl	8000df0 <_free_r>
 8000874:	e7c7      	b.n	8000806 <__ssputs_r+0x46>
	...

08000878 <_svfiprintf_r>:
 8000878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800087c:	4698      	mov	r8, r3
 800087e:	898b      	ldrh	r3, [r1, #12]
 8000880:	061b      	lsls	r3, r3, #24
 8000882:	b09d      	sub	sp, #116	; 0x74
 8000884:	4607      	mov	r7, r0
 8000886:	460d      	mov	r5, r1
 8000888:	4614      	mov	r4, r2
 800088a:	d50e      	bpl.n	80008aa <_svfiprintf_r+0x32>
 800088c:	690b      	ldr	r3, [r1, #16]
 800088e:	b963      	cbnz	r3, 80008aa <_svfiprintf_r+0x32>
 8000890:	2140      	movs	r1, #64	; 0x40
 8000892:	f000 fb17 	bl	8000ec4 <_malloc_r>
 8000896:	6028      	str	r0, [r5, #0]
 8000898:	6128      	str	r0, [r5, #16]
 800089a:	b920      	cbnz	r0, 80008a6 <_svfiprintf_r+0x2e>
 800089c:	230c      	movs	r3, #12
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	e0d1      	b.n	8000a4a <_svfiprintf_r+0x1d2>
 80008a6:	2340      	movs	r3, #64	; 0x40
 80008a8:	616b      	str	r3, [r5, #20]
 80008aa:	2300      	movs	r3, #0
 80008ac:	9309      	str	r3, [sp, #36]	; 0x24
 80008ae:	2320      	movs	r3, #32
 80008b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80008b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80008b8:	2330      	movs	r3, #48	; 0x30
 80008ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000a64 <_svfiprintf_r+0x1ec>
 80008be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80008c2:	f04f 0901 	mov.w	r9, #1
 80008c6:	4623      	mov	r3, r4
 80008c8:	469a      	mov	sl, r3
 80008ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80008ce:	b10a      	cbz	r2, 80008d4 <_svfiprintf_r+0x5c>
 80008d0:	2a25      	cmp	r2, #37	; 0x25
 80008d2:	d1f9      	bne.n	80008c8 <_svfiprintf_r+0x50>
 80008d4:	ebba 0b04 	subs.w	fp, sl, r4
 80008d8:	d00b      	beq.n	80008f2 <_svfiprintf_r+0x7a>
 80008da:	465b      	mov	r3, fp
 80008dc:	4622      	mov	r2, r4
 80008de:	4629      	mov	r1, r5
 80008e0:	4638      	mov	r0, r7
 80008e2:	f7ff ff6d 	bl	80007c0 <__ssputs_r>
 80008e6:	3001      	adds	r0, #1
 80008e8:	f000 80aa 	beq.w	8000a40 <_svfiprintf_r+0x1c8>
 80008ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80008ee:	445a      	add	r2, fp
 80008f0:	9209      	str	r2, [sp, #36]	; 0x24
 80008f2:	f89a 3000 	ldrb.w	r3, [sl]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f000 80a2 	beq.w	8000a40 <_svfiprintf_r+0x1c8>
 80008fc:	2300      	movs	r3, #0
 80008fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000906:	f10a 0a01 	add.w	sl, sl, #1
 800090a:	9304      	str	r3, [sp, #16]
 800090c:	9307      	str	r3, [sp, #28]
 800090e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000912:	931a      	str	r3, [sp, #104]	; 0x68
 8000914:	4654      	mov	r4, sl
 8000916:	2205      	movs	r2, #5
 8000918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800091c:	4851      	ldr	r0, [pc, #324]	; (8000a64 <_svfiprintf_r+0x1ec>)
 800091e:	f7ff fc67 	bl	80001f0 <memchr>
 8000922:	9a04      	ldr	r2, [sp, #16]
 8000924:	b9d8      	cbnz	r0, 800095e <_svfiprintf_r+0xe6>
 8000926:	06d0      	lsls	r0, r2, #27
 8000928:	bf44      	itt	mi
 800092a:	2320      	movmi	r3, #32
 800092c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000930:	0711      	lsls	r1, r2, #28
 8000932:	bf44      	itt	mi
 8000934:	232b      	movmi	r3, #43	; 0x2b
 8000936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800093a:	f89a 3000 	ldrb.w	r3, [sl]
 800093e:	2b2a      	cmp	r3, #42	; 0x2a
 8000940:	d015      	beq.n	800096e <_svfiprintf_r+0xf6>
 8000942:	9a07      	ldr	r2, [sp, #28]
 8000944:	4654      	mov	r4, sl
 8000946:	2000      	movs	r0, #0
 8000948:	f04f 0c0a 	mov.w	ip, #10
 800094c:	4621      	mov	r1, r4
 800094e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000952:	3b30      	subs	r3, #48	; 0x30
 8000954:	2b09      	cmp	r3, #9
 8000956:	d94e      	bls.n	80009f6 <_svfiprintf_r+0x17e>
 8000958:	b1b0      	cbz	r0, 8000988 <_svfiprintf_r+0x110>
 800095a:	9207      	str	r2, [sp, #28]
 800095c:	e014      	b.n	8000988 <_svfiprintf_r+0x110>
 800095e:	eba0 0308 	sub.w	r3, r0, r8
 8000962:	fa09 f303 	lsl.w	r3, r9, r3
 8000966:	4313      	orrs	r3, r2
 8000968:	9304      	str	r3, [sp, #16]
 800096a:	46a2      	mov	sl, r4
 800096c:	e7d2      	b.n	8000914 <_svfiprintf_r+0x9c>
 800096e:	9b03      	ldr	r3, [sp, #12]
 8000970:	1d19      	adds	r1, r3, #4
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	9103      	str	r1, [sp, #12]
 8000976:	2b00      	cmp	r3, #0
 8000978:	bfbb      	ittet	lt
 800097a:	425b      	neglt	r3, r3
 800097c:	f042 0202 	orrlt.w	r2, r2, #2
 8000980:	9307      	strge	r3, [sp, #28]
 8000982:	9307      	strlt	r3, [sp, #28]
 8000984:	bfb8      	it	lt
 8000986:	9204      	strlt	r2, [sp, #16]
 8000988:	7823      	ldrb	r3, [r4, #0]
 800098a:	2b2e      	cmp	r3, #46	; 0x2e
 800098c:	d10c      	bne.n	80009a8 <_svfiprintf_r+0x130>
 800098e:	7863      	ldrb	r3, [r4, #1]
 8000990:	2b2a      	cmp	r3, #42	; 0x2a
 8000992:	d135      	bne.n	8000a00 <_svfiprintf_r+0x188>
 8000994:	9b03      	ldr	r3, [sp, #12]
 8000996:	1d1a      	adds	r2, r3, #4
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	9203      	str	r2, [sp, #12]
 800099c:	2b00      	cmp	r3, #0
 800099e:	bfb8      	it	lt
 80009a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80009a4:	3402      	adds	r4, #2
 80009a6:	9305      	str	r3, [sp, #20]
 80009a8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8000a68 <_svfiprintf_r+0x1f0>
 80009ac:	7821      	ldrb	r1, [r4, #0]
 80009ae:	2203      	movs	r2, #3
 80009b0:	4650      	mov	r0, sl
 80009b2:	f7ff fc1d 	bl	80001f0 <memchr>
 80009b6:	b140      	cbz	r0, 80009ca <_svfiprintf_r+0x152>
 80009b8:	2340      	movs	r3, #64	; 0x40
 80009ba:	eba0 000a 	sub.w	r0, r0, sl
 80009be:	fa03 f000 	lsl.w	r0, r3, r0
 80009c2:	9b04      	ldr	r3, [sp, #16]
 80009c4:	4303      	orrs	r3, r0
 80009c6:	3401      	adds	r4, #1
 80009c8:	9304      	str	r3, [sp, #16]
 80009ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009ce:	4827      	ldr	r0, [pc, #156]	; (8000a6c <_svfiprintf_r+0x1f4>)
 80009d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80009d4:	2206      	movs	r2, #6
 80009d6:	f7ff fc0b 	bl	80001f0 <memchr>
 80009da:	2800      	cmp	r0, #0
 80009dc:	d038      	beq.n	8000a50 <_svfiprintf_r+0x1d8>
 80009de:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <_svfiprintf_r+0x1f8>)
 80009e0:	bb1b      	cbnz	r3, 8000a2a <_svfiprintf_r+0x1b2>
 80009e2:	9b03      	ldr	r3, [sp, #12]
 80009e4:	3307      	adds	r3, #7
 80009e6:	f023 0307 	bic.w	r3, r3, #7
 80009ea:	3308      	adds	r3, #8
 80009ec:	9303      	str	r3, [sp, #12]
 80009ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80009f0:	4433      	add	r3, r6
 80009f2:	9309      	str	r3, [sp, #36]	; 0x24
 80009f4:	e767      	b.n	80008c6 <_svfiprintf_r+0x4e>
 80009f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80009fa:	460c      	mov	r4, r1
 80009fc:	2001      	movs	r0, #1
 80009fe:	e7a5      	b.n	800094c <_svfiprintf_r+0xd4>
 8000a00:	2300      	movs	r3, #0
 8000a02:	3401      	adds	r4, #1
 8000a04:	9305      	str	r3, [sp, #20]
 8000a06:	4619      	mov	r1, r3
 8000a08:	f04f 0c0a 	mov.w	ip, #10
 8000a0c:	4620      	mov	r0, r4
 8000a0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a12:	3a30      	subs	r2, #48	; 0x30
 8000a14:	2a09      	cmp	r2, #9
 8000a16:	d903      	bls.n	8000a20 <_svfiprintf_r+0x1a8>
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0c5      	beq.n	80009a8 <_svfiprintf_r+0x130>
 8000a1c:	9105      	str	r1, [sp, #20]
 8000a1e:	e7c3      	b.n	80009a8 <_svfiprintf_r+0x130>
 8000a20:	fb0c 2101 	mla	r1, ip, r1, r2
 8000a24:	4604      	mov	r4, r0
 8000a26:	2301      	movs	r3, #1
 8000a28:	e7f0      	b.n	8000a0c <_svfiprintf_r+0x194>
 8000a2a:	ab03      	add	r3, sp, #12
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	462a      	mov	r2, r5
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <_svfiprintf_r+0x1fc>)
 8000a32:	a904      	add	r1, sp, #16
 8000a34:	4638      	mov	r0, r7
 8000a36:	f3af 8000 	nop.w
 8000a3a:	1c42      	adds	r2, r0, #1
 8000a3c:	4606      	mov	r6, r0
 8000a3e:	d1d6      	bne.n	80009ee <_svfiprintf_r+0x176>
 8000a40:	89ab      	ldrh	r3, [r5, #12]
 8000a42:	065b      	lsls	r3, r3, #25
 8000a44:	f53f af2c 	bmi.w	80008a0 <_svfiprintf_r+0x28>
 8000a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000a4a:	b01d      	add	sp, #116	; 0x74
 8000a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a50:	ab03      	add	r3, sp, #12
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	462a      	mov	r2, r5
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <_svfiprintf_r+0x1fc>)
 8000a58:	a904      	add	r1, sp, #16
 8000a5a:	4638      	mov	r0, r7
 8000a5c:	f000 f87a 	bl	8000b54 <_printf_i>
 8000a60:	e7eb      	b.n	8000a3a <_svfiprintf_r+0x1c2>
 8000a62:	bf00      	nop
 8000a64:	0800107e 	.word	0x0800107e
 8000a68:	08001084 	.word	0x08001084
 8000a6c:	08001088 	.word	0x08001088
 8000a70:	00000000 	.word	0x00000000
 8000a74:	080007c1 	.word	0x080007c1

08000a78 <_printf_common>:
 8000a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a7c:	4616      	mov	r6, r2
 8000a7e:	4699      	mov	r9, r3
 8000a80:	688a      	ldr	r2, [r1, #8]
 8000a82:	690b      	ldr	r3, [r1, #16]
 8000a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	bfb8      	it	lt
 8000a8c:	4613      	movlt	r3, r2
 8000a8e:	6033      	str	r3, [r6, #0]
 8000a90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000a94:	4607      	mov	r7, r0
 8000a96:	460c      	mov	r4, r1
 8000a98:	b10a      	cbz	r2, 8000a9e <_printf_common+0x26>
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	6033      	str	r3, [r6, #0]
 8000a9e:	6823      	ldr	r3, [r4, #0]
 8000aa0:	0699      	lsls	r1, r3, #26
 8000aa2:	bf42      	ittt	mi
 8000aa4:	6833      	ldrmi	r3, [r6, #0]
 8000aa6:	3302      	addmi	r3, #2
 8000aa8:	6033      	strmi	r3, [r6, #0]
 8000aaa:	6825      	ldr	r5, [r4, #0]
 8000aac:	f015 0506 	ands.w	r5, r5, #6
 8000ab0:	d106      	bne.n	8000ac0 <_printf_common+0x48>
 8000ab2:	f104 0a19 	add.w	sl, r4, #25
 8000ab6:	68e3      	ldr	r3, [r4, #12]
 8000ab8:	6832      	ldr	r2, [r6, #0]
 8000aba:	1a9b      	subs	r3, r3, r2
 8000abc:	42ab      	cmp	r3, r5
 8000abe:	dc26      	bgt.n	8000b0e <_printf_common+0x96>
 8000ac0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000ac4:	1e13      	subs	r3, r2, #0
 8000ac6:	6822      	ldr	r2, [r4, #0]
 8000ac8:	bf18      	it	ne
 8000aca:	2301      	movne	r3, #1
 8000acc:	0692      	lsls	r2, r2, #26
 8000ace:	d42b      	bmi.n	8000b28 <_printf_common+0xb0>
 8000ad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ad4:	4649      	mov	r1, r9
 8000ad6:	4638      	mov	r0, r7
 8000ad8:	47c0      	blx	r8
 8000ada:	3001      	adds	r0, #1
 8000adc:	d01e      	beq.n	8000b1c <_printf_common+0xa4>
 8000ade:	6823      	ldr	r3, [r4, #0]
 8000ae0:	68e5      	ldr	r5, [r4, #12]
 8000ae2:	6832      	ldr	r2, [r6, #0]
 8000ae4:	f003 0306 	and.w	r3, r3, #6
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	bf08      	it	eq
 8000aec:	1aad      	subeq	r5, r5, r2
 8000aee:	68a3      	ldr	r3, [r4, #8]
 8000af0:	6922      	ldr	r2, [r4, #16]
 8000af2:	bf0c      	ite	eq
 8000af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000af8:	2500      	movne	r5, #0
 8000afa:	4293      	cmp	r3, r2
 8000afc:	bfc4      	itt	gt
 8000afe:	1a9b      	subgt	r3, r3, r2
 8000b00:	18ed      	addgt	r5, r5, r3
 8000b02:	2600      	movs	r6, #0
 8000b04:	341a      	adds	r4, #26
 8000b06:	42b5      	cmp	r5, r6
 8000b08:	d11a      	bne.n	8000b40 <_printf_common+0xc8>
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	e008      	b.n	8000b20 <_printf_common+0xa8>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	4652      	mov	r2, sl
 8000b12:	4649      	mov	r1, r9
 8000b14:	4638      	mov	r0, r7
 8000b16:	47c0      	blx	r8
 8000b18:	3001      	adds	r0, #1
 8000b1a:	d103      	bne.n	8000b24 <_printf_common+0xac>
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b24:	3501      	adds	r5, #1
 8000b26:	e7c6      	b.n	8000ab6 <_printf_common+0x3e>
 8000b28:	18e1      	adds	r1, r4, r3
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	2030      	movs	r0, #48	; 0x30
 8000b2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000b32:	4422      	add	r2, r4
 8000b34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000b38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	e7c7      	b.n	8000ad0 <_printf_common+0x58>
 8000b40:	2301      	movs	r3, #1
 8000b42:	4622      	mov	r2, r4
 8000b44:	4649      	mov	r1, r9
 8000b46:	4638      	mov	r0, r7
 8000b48:	47c0      	blx	r8
 8000b4a:	3001      	adds	r0, #1
 8000b4c:	d0e6      	beq.n	8000b1c <_printf_common+0xa4>
 8000b4e:	3601      	adds	r6, #1
 8000b50:	e7d9      	b.n	8000b06 <_printf_common+0x8e>
	...

08000b54 <_printf_i>:
 8000b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000b58:	7e0f      	ldrb	r7, [r1, #24]
 8000b5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000b5c:	2f78      	cmp	r7, #120	; 0x78
 8000b5e:	4691      	mov	r9, r2
 8000b60:	4680      	mov	r8, r0
 8000b62:	460c      	mov	r4, r1
 8000b64:	469a      	mov	sl, r3
 8000b66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000b6a:	d807      	bhi.n	8000b7c <_printf_i+0x28>
 8000b6c:	2f62      	cmp	r7, #98	; 0x62
 8000b6e:	d80a      	bhi.n	8000b86 <_printf_i+0x32>
 8000b70:	2f00      	cmp	r7, #0
 8000b72:	f000 80d8 	beq.w	8000d26 <_printf_i+0x1d2>
 8000b76:	2f58      	cmp	r7, #88	; 0x58
 8000b78:	f000 80a3 	beq.w	8000cc2 <_printf_i+0x16e>
 8000b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000b80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000b84:	e03a      	b.n	8000bfc <_printf_i+0xa8>
 8000b86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000b8a:	2b15      	cmp	r3, #21
 8000b8c:	d8f6      	bhi.n	8000b7c <_printf_i+0x28>
 8000b8e:	a101      	add	r1, pc, #4	; (adr r1, 8000b94 <_printf_i+0x40>)
 8000b90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000b94:	08000bed 	.word	0x08000bed
 8000b98:	08000c01 	.word	0x08000c01
 8000b9c:	08000b7d 	.word	0x08000b7d
 8000ba0:	08000b7d 	.word	0x08000b7d
 8000ba4:	08000b7d 	.word	0x08000b7d
 8000ba8:	08000b7d 	.word	0x08000b7d
 8000bac:	08000c01 	.word	0x08000c01
 8000bb0:	08000b7d 	.word	0x08000b7d
 8000bb4:	08000b7d 	.word	0x08000b7d
 8000bb8:	08000b7d 	.word	0x08000b7d
 8000bbc:	08000b7d 	.word	0x08000b7d
 8000bc0:	08000d0d 	.word	0x08000d0d
 8000bc4:	08000c31 	.word	0x08000c31
 8000bc8:	08000cef 	.word	0x08000cef
 8000bcc:	08000b7d 	.word	0x08000b7d
 8000bd0:	08000b7d 	.word	0x08000b7d
 8000bd4:	08000d2f 	.word	0x08000d2f
 8000bd8:	08000b7d 	.word	0x08000b7d
 8000bdc:	08000c31 	.word	0x08000c31
 8000be0:	08000b7d 	.word	0x08000b7d
 8000be4:	08000b7d 	.word	0x08000b7d
 8000be8:	08000cf7 	.word	0x08000cf7
 8000bec:	682b      	ldr	r3, [r5, #0]
 8000bee:	1d1a      	adds	r2, r3, #4
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	602a      	str	r2, [r5, #0]
 8000bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e0a3      	b.n	8000d48 <_printf_i+0x1f4>
 8000c00:	6820      	ldr	r0, [r4, #0]
 8000c02:	6829      	ldr	r1, [r5, #0]
 8000c04:	0606      	lsls	r6, r0, #24
 8000c06:	f101 0304 	add.w	r3, r1, #4
 8000c0a:	d50a      	bpl.n	8000c22 <_printf_i+0xce>
 8000c0c:	680e      	ldr	r6, [r1, #0]
 8000c0e:	602b      	str	r3, [r5, #0]
 8000c10:	2e00      	cmp	r6, #0
 8000c12:	da03      	bge.n	8000c1c <_printf_i+0xc8>
 8000c14:	232d      	movs	r3, #45	; 0x2d
 8000c16:	4276      	negs	r6, r6
 8000c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000c1c:	485e      	ldr	r0, [pc, #376]	; (8000d98 <_printf_i+0x244>)
 8000c1e:	230a      	movs	r3, #10
 8000c20:	e019      	b.n	8000c56 <_printf_i+0x102>
 8000c22:	680e      	ldr	r6, [r1, #0]
 8000c24:	602b      	str	r3, [r5, #0]
 8000c26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000c2a:	bf18      	it	ne
 8000c2c:	b236      	sxthne	r6, r6
 8000c2e:	e7ef      	b.n	8000c10 <_printf_i+0xbc>
 8000c30:	682b      	ldr	r3, [r5, #0]
 8000c32:	6820      	ldr	r0, [r4, #0]
 8000c34:	1d19      	adds	r1, r3, #4
 8000c36:	6029      	str	r1, [r5, #0]
 8000c38:	0601      	lsls	r1, r0, #24
 8000c3a:	d501      	bpl.n	8000c40 <_printf_i+0xec>
 8000c3c:	681e      	ldr	r6, [r3, #0]
 8000c3e:	e002      	b.n	8000c46 <_printf_i+0xf2>
 8000c40:	0646      	lsls	r6, r0, #25
 8000c42:	d5fb      	bpl.n	8000c3c <_printf_i+0xe8>
 8000c44:	881e      	ldrh	r6, [r3, #0]
 8000c46:	4854      	ldr	r0, [pc, #336]	; (8000d98 <_printf_i+0x244>)
 8000c48:	2f6f      	cmp	r7, #111	; 0x6f
 8000c4a:	bf0c      	ite	eq
 8000c4c:	2308      	moveq	r3, #8
 8000c4e:	230a      	movne	r3, #10
 8000c50:	2100      	movs	r1, #0
 8000c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000c56:	6865      	ldr	r5, [r4, #4]
 8000c58:	60a5      	str	r5, [r4, #8]
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	bfa2      	ittt	ge
 8000c5e:	6821      	ldrge	r1, [r4, #0]
 8000c60:	f021 0104 	bicge.w	r1, r1, #4
 8000c64:	6021      	strge	r1, [r4, #0]
 8000c66:	b90e      	cbnz	r6, 8000c6c <_printf_i+0x118>
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d04d      	beq.n	8000d08 <_printf_i+0x1b4>
 8000c6c:	4615      	mov	r5, r2
 8000c6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8000c72:	fb03 6711 	mls	r7, r3, r1, r6
 8000c76:	5dc7      	ldrb	r7, [r0, r7]
 8000c78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000c7c:	4637      	mov	r7, r6
 8000c7e:	42bb      	cmp	r3, r7
 8000c80:	460e      	mov	r6, r1
 8000c82:	d9f4      	bls.n	8000c6e <_printf_i+0x11a>
 8000c84:	2b08      	cmp	r3, #8
 8000c86:	d10b      	bne.n	8000ca0 <_printf_i+0x14c>
 8000c88:	6823      	ldr	r3, [r4, #0]
 8000c8a:	07de      	lsls	r6, r3, #31
 8000c8c:	d508      	bpl.n	8000ca0 <_printf_i+0x14c>
 8000c8e:	6923      	ldr	r3, [r4, #16]
 8000c90:	6861      	ldr	r1, [r4, #4]
 8000c92:	4299      	cmp	r1, r3
 8000c94:	bfde      	ittt	le
 8000c96:	2330      	movle	r3, #48	; 0x30
 8000c98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000c9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000ca0:	1b52      	subs	r2, r2, r5
 8000ca2:	6122      	str	r2, [r4, #16]
 8000ca4:	f8cd a000 	str.w	sl, [sp]
 8000ca8:	464b      	mov	r3, r9
 8000caa:	aa03      	add	r2, sp, #12
 8000cac:	4621      	mov	r1, r4
 8000cae:	4640      	mov	r0, r8
 8000cb0:	f7ff fee2 	bl	8000a78 <_printf_common>
 8000cb4:	3001      	adds	r0, #1
 8000cb6:	d14c      	bne.n	8000d52 <_printf_i+0x1fe>
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	b004      	add	sp, #16
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	4835      	ldr	r0, [pc, #212]	; (8000d98 <_printf_i+0x244>)
 8000cc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000cc8:	6829      	ldr	r1, [r5, #0]
 8000cca:	6823      	ldr	r3, [r4, #0]
 8000ccc:	f851 6b04 	ldr.w	r6, [r1], #4
 8000cd0:	6029      	str	r1, [r5, #0]
 8000cd2:	061d      	lsls	r5, r3, #24
 8000cd4:	d514      	bpl.n	8000d00 <_printf_i+0x1ac>
 8000cd6:	07df      	lsls	r7, r3, #31
 8000cd8:	bf44      	itt	mi
 8000cda:	f043 0320 	orrmi.w	r3, r3, #32
 8000cde:	6023      	strmi	r3, [r4, #0]
 8000ce0:	b91e      	cbnz	r6, 8000cea <_printf_i+0x196>
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	f023 0320 	bic.w	r3, r3, #32
 8000ce8:	6023      	str	r3, [r4, #0]
 8000cea:	2310      	movs	r3, #16
 8000cec:	e7b0      	b.n	8000c50 <_printf_i+0xfc>
 8000cee:	6823      	ldr	r3, [r4, #0]
 8000cf0:	f043 0320 	orr.w	r3, r3, #32
 8000cf4:	6023      	str	r3, [r4, #0]
 8000cf6:	2378      	movs	r3, #120	; 0x78
 8000cf8:	4828      	ldr	r0, [pc, #160]	; (8000d9c <_printf_i+0x248>)
 8000cfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000cfe:	e7e3      	b.n	8000cc8 <_printf_i+0x174>
 8000d00:	0659      	lsls	r1, r3, #25
 8000d02:	bf48      	it	mi
 8000d04:	b2b6      	uxthmi	r6, r6
 8000d06:	e7e6      	b.n	8000cd6 <_printf_i+0x182>
 8000d08:	4615      	mov	r5, r2
 8000d0a:	e7bb      	b.n	8000c84 <_printf_i+0x130>
 8000d0c:	682b      	ldr	r3, [r5, #0]
 8000d0e:	6826      	ldr	r6, [r4, #0]
 8000d10:	6961      	ldr	r1, [r4, #20]
 8000d12:	1d18      	adds	r0, r3, #4
 8000d14:	6028      	str	r0, [r5, #0]
 8000d16:	0635      	lsls	r5, r6, #24
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	d501      	bpl.n	8000d20 <_printf_i+0x1cc>
 8000d1c:	6019      	str	r1, [r3, #0]
 8000d1e:	e002      	b.n	8000d26 <_printf_i+0x1d2>
 8000d20:	0670      	lsls	r0, r6, #25
 8000d22:	d5fb      	bpl.n	8000d1c <_printf_i+0x1c8>
 8000d24:	8019      	strh	r1, [r3, #0]
 8000d26:	2300      	movs	r3, #0
 8000d28:	6123      	str	r3, [r4, #16]
 8000d2a:	4615      	mov	r5, r2
 8000d2c:	e7ba      	b.n	8000ca4 <_printf_i+0x150>
 8000d2e:	682b      	ldr	r3, [r5, #0]
 8000d30:	1d1a      	adds	r2, r3, #4
 8000d32:	602a      	str	r2, [r5, #0]
 8000d34:	681d      	ldr	r5, [r3, #0]
 8000d36:	6862      	ldr	r2, [r4, #4]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4628      	mov	r0, r5
 8000d3c:	f7ff fa58 	bl	80001f0 <memchr>
 8000d40:	b108      	cbz	r0, 8000d46 <_printf_i+0x1f2>
 8000d42:	1b40      	subs	r0, r0, r5
 8000d44:	6060      	str	r0, [r4, #4]
 8000d46:	6863      	ldr	r3, [r4, #4]
 8000d48:	6123      	str	r3, [r4, #16]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000d50:	e7a8      	b.n	8000ca4 <_printf_i+0x150>
 8000d52:	6923      	ldr	r3, [r4, #16]
 8000d54:	462a      	mov	r2, r5
 8000d56:	4649      	mov	r1, r9
 8000d58:	4640      	mov	r0, r8
 8000d5a:	47d0      	blx	sl
 8000d5c:	3001      	adds	r0, #1
 8000d5e:	d0ab      	beq.n	8000cb8 <_printf_i+0x164>
 8000d60:	6823      	ldr	r3, [r4, #0]
 8000d62:	079b      	lsls	r3, r3, #30
 8000d64:	d413      	bmi.n	8000d8e <_printf_i+0x23a>
 8000d66:	68e0      	ldr	r0, [r4, #12]
 8000d68:	9b03      	ldr	r3, [sp, #12]
 8000d6a:	4298      	cmp	r0, r3
 8000d6c:	bfb8      	it	lt
 8000d6e:	4618      	movlt	r0, r3
 8000d70:	e7a4      	b.n	8000cbc <_printf_i+0x168>
 8000d72:	2301      	movs	r3, #1
 8000d74:	4632      	mov	r2, r6
 8000d76:	4649      	mov	r1, r9
 8000d78:	4640      	mov	r0, r8
 8000d7a:	47d0      	blx	sl
 8000d7c:	3001      	adds	r0, #1
 8000d7e:	d09b      	beq.n	8000cb8 <_printf_i+0x164>
 8000d80:	3501      	adds	r5, #1
 8000d82:	68e3      	ldr	r3, [r4, #12]
 8000d84:	9903      	ldr	r1, [sp, #12]
 8000d86:	1a5b      	subs	r3, r3, r1
 8000d88:	42ab      	cmp	r3, r5
 8000d8a:	dcf2      	bgt.n	8000d72 <_printf_i+0x21e>
 8000d8c:	e7eb      	b.n	8000d66 <_printf_i+0x212>
 8000d8e:	2500      	movs	r5, #0
 8000d90:	f104 0619 	add.w	r6, r4, #25
 8000d94:	e7f5      	b.n	8000d82 <_printf_i+0x22e>
 8000d96:	bf00      	nop
 8000d98:	0800108f 	.word	0x0800108f
 8000d9c:	080010a0 	.word	0x080010a0

08000da0 <memcpy>:
 8000da0:	440a      	add	r2, r1
 8000da2:	4291      	cmp	r1, r2
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d100      	bne.n	8000dac <memcpy+0xc>
 8000daa:	4770      	bx	lr
 8000dac:	b510      	push	{r4, lr}
 8000dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000db2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000db6:	4291      	cmp	r1, r2
 8000db8:	d1f9      	bne.n	8000dae <memcpy+0xe>
 8000dba:	bd10      	pop	{r4, pc}

08000dbc <memmove>:
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	b510      	push	{r4, lr}
 8000dc0:	eb01 0402 	add.w	r4, r1, r2
 8000dc4:	d902      	bls.n	8000dcc <memmove+0x10>
 8000dc6:	4284      	cmp	r4, r0
 8000dc8:	4623      	mov	r3, r4
 8000dca:	d807      	bhi.n	8000ddc <memmove+0x20>
 8000dcc:	1e43      	subs	r3, r0, #1
 8000dce:	42a1      	cmp	r1, r4
 8000dd0:	d008      	beq.n	8000de4 <memmove+0x28>
 8000dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000dda:	e7f8      	b.n	8000dce <memmove+0x12>
 8000ddc:	4402      	add	r2, r0
 8000dde:	4601      	mov	r1, r0
 8000de0:	428a      	cmp	r2, r1
 8000de2:	d100      	bne.n	8000de6 <memmove+0x2a>
 8000de4:	bd10      	pop	{r4, pc}
 8000de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000dee:	e7f7      	b.n	8000de0 <memmove+0x24>

08000df0 <_free_r>:
 8000df0:	b538      	push	{r3, r4, r5, lr}
 8000df2:	4605      	mov	r5, r0
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d041      	beq.n	8000e7c <_free_r+0x8c>
 8000df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000dfc:	1f0c      	subs	r4, r1, #4
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bfb8      	it	lt
 8000e02:	18e4      	addlt	r4, r4, r3
 8000e04:	f000 f912 	bl	800102c <__malloc_lock>
 8000e08:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <_free_r+0x90>)
 8000e0a:	6813      	ldr	r3, [r2, #0]
 8000e0c:	b933      	cbnz	r3, 8000e1c <_free_r+0x2c>
 8000e0e:	6063      	str	r3, [r4, #4]
 8000e10:	6014      	str	r4, [r2, #0]
 8000e12:	4628      	mov	r0, r5
 8000e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e18:	f000 b90e 	b.w	8001038 <__malloc_unlock>
 8000e1c:	42a3      	cmp	r3, r4
 8000e1e:	d908      	bls.n	8000e32 <_free_r+0x42>
 8000e20:	6820      	ldr	r0, [r4, #0]
 8000e22:	1821      	adds	r1, r4, r0
 8000e24:	428b      	cmp	r3, r1
 8000e26:	bf01      	itttt	eq
 8000e28:	6819      	ldreq	r1, [r3, #0]
 8000e2a:	685b      	ldreq	r3, [r3, #4]
 8000e2c:	1809      	addeq	r1, r1, r0
 8000e2e:	6021      	streq	r1, [r4, #0]
 8000e30:	e7ed      	b.n	8000e0e <_free_r+0x1e>
 8000e32:	461a      	mov	r2, r3
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	b10b      	cbz	r3, 8000e3c <_free_r+0x4c>
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d9fa      	bls.n	8000e32 <_free_r+0x42>
 8000e3c:	6811      	ldr	r1, [r2, #0]
 8000e3e:	1850      	adds	r0, r2, r1
 8000e40:	42a0      	cmp	r0, r4
 8000e42:	d10b      	bne.n	8000e5c <_free_r+0x6c>
 8000e44:	6820      	ldr	r0, [r4, #0]
 8000e46:	4401      	add	r1, r0
 8000e48:	1850      	adds	r0, r2, r1
 8000e4a:	4283      	cmp	r3, r0
 8000e4c:	6011      	str	r1, [r2, #0]
 8000e4e:	d1e0      	bne.n	8000e12 <_free_r+0x22>
 8000e50:	6818      	ldr	r0, [r3, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	6053      	str	r3, [r2, #4]
 8000e56:	4401      	add	r1, r0
 8000e58:	6011      	str	r1, [r2, #0]
 8000e5a:	e7da      	b.n	8000e12 <_free_r+0x22>
 8000e5c:	d902      	bls.n	8000e64 <_free_r+0x74>
 8000e5e:	230c      	movs	r3, #12
 8000e60:	602b      	str	r3, [r5, #0]
 8000e62:	e7d6      	b.n	8000e12 <_free_r+0x22>
 8000e64:	6820      	ldr	r0, [r4, #0]
 8000e66:	1821      	adds	r1, r4, r0
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	bf04      	itt	eq
 8000e6c:	6819      	ldreq	r1, [r3, #0]
 8000e6e:	685b      	ldreq	r3, [r3, #4]
 8000e70:	6063      	str	r3, [r4, #4]
 8000e72:	bf04      	itt	eq
 8000e74:	1809      	addeq	r1, r1, r0
 8000e76:	6021      	streq	r1, [r4, #0]
 8000e78:	6054      	str	r4, [r2, #4]
 8000e7a:	e7ca      	b.n	8000e12 <_free_r+0x22>
 8000e7c:	bd38      	pop	{r3, r4, r5, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000084 	.word	0x20000084

08000e84 <sbrk_aligned>:
 8000e84:	b570      	push	{r4, r5, r6, lr}
 8000e86:	4e0e      	ldr	r6, [pc, #56]	; (8000ec0 <sbrk_aligned+0x3c>)
 8000e88:	460c      	mov	r4, r1
 8000e8a:	6831      	ldr	r1, [r6, #0]
 8000e8c:	4605      	mov	r5, r0
 8000e8e:	b911      	cbnz	r1, 8000e96 <sbrk_aligned+0x12>
 8000e90:	f000 f8bc 	bl	800100c <_sbrk_r>
 8000e94:	6030      	str	r0, [r6, #0]
 8000e96:	4621      	mov	r1, r4
 8000e98:	4628      	mov	r0, r5
 8000e9a:	f000 f8b7 	bl	800100c <_sbrk_r>
 8000e9e:	1c43      	adds	r3, r0, #1
 8000ea0:	d00a      	beq.n	8000eb8 <sbrk_aligned+0x34>
 8000ea2:	1cc4      	adds	r4, r0, #3
 8000ea4:	f024 0403 	bic.w	r4, r4, #3
 8000ea8:	42a0      	cmp	r0, r4
 8000eaa:	d007      	beq.n	8000ebc <sbrk_aligned+0x38>
 8000eac:	1a21      	subs	r1, r4, r0
 8000eae:	4628      	mov	r0, r5
 8000eb0:	f000 f8ac 	bl	800100c <_sbrk_r>
 8000eb4:	3001      	adds	r0, #1
 8000eb6:	d101      	bne.n	8000ebc <sbrk_aligned+0x38>
 8000eb8:	f04f 34ff 	mov.w	r4, #4294967295
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	bd70      	pop	{r4, r5, r6, pc}
 8000ec0:	20000088 	.word	0x20000088

08000ec4 <_malloc_r>:
 8000ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ec8:	1ccd      	adds	r5, r1, #3
 8000eca:	f025 0503 	bic.w	r5, r5, #3
 8000ece:	3508      	adds	r5, #8
 8000ed0:	2d0c      	cmp	r5, #12
 8000ed2:	bf38      	it	cc
 8000ed4:	250c      	movcc	r5, #12
 8000ed6:	2d00      	cmp	r5, #0
 8000ed8:	4607      	mov	r7, r0
 8000eda:	db01      	blt.n	8000ee0 <_malloc_r+0x1c>
 8000edc:	42a9      	cmp	r1, r5
 8000ede:	d905      	bls.n	8000eec <_malloc_r+0x28>
 8000ee0:	230c      	movs	r3, #12
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	2600      	movs	r6, #0
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000eec:	4e2e      	ldr	r6, [pc, #184]	; (8000fa8 <_malloc_r+0xe4>)
 8000eee:	f000 f89d 	bl	800102c <__malloc_lock>
 8000ef2:	6833      	ldr	r3, [r6, #0]
 8000ef4:	461c      	mov	r4, r3
 8000ef6:	bb34      	cbnz	r4, 8000f46 <_malloc_r+0x82>
 8000ef8:	4629      	mov	r1, r5
 8000efa:	4638      	mov	r0, r7
 8000efc:	f7ff ffc2 	bl	8000e84 <sbrk_aligned>
 8000f00:	1c43      	adds	r3, r0, #1
 8000f02:	4604      	mov	r4, r0
 8000f04:	d14d      	bne.n	8000fa2 <_malloc_r+0xde>
 8000f06:	6834      	ldr	r4, [r6, #0]
 8000f08:	4626      	mov	r6, r4
 8000f0a:	2e00      	cmp	r6, #0
 8000f0c:	d140      	bne.n	8000f90 <_malloc_r+0xcc>
 8000f0e:	6823      	ldr	r3, [r4, #0]
 8000f10:	4631      	mov	r1, r6
 8000f12:	4638      	mov	r0, r7
 8000f14:	eb04 0803 	add.w	r8, r4, r3
 8000f18:	f000 f878 	bl	800100c <_sbrk_r>
 8000f1c:	4580      	cmp	r8, r0
 8000f1e:	d13a      	bne.n	8000f96 <_malloc_r+0xd2>
 8000f20:	6821      	ldr	r1, [r4, #0]
 8000f22:	3503      	adds	r5, #3
 8000f24:	1a6d      	subs	r5, r5, r1
 8000f26:	f025 0503 	bic.w	r5, r5, #3
 8000f2a:	3508      	adds	r5, #8
 8000f2c:	2d0c      	cmp	r5, #12
 8000f2e:	bf38      	it	cc
 8000f30:	250c      	movcc	r5, #12
 8000f32:	4629      	mov	r1, r5
 8000f34:	4638      	mov	r0, r7
 8000f36:	f7ff ffa5 	bl	8000e84 <sbrk_aligned>
 8000f3a:	3001      	adds	r0, #1
 8000f3c:	d02b      	beq.n	8000f96 <_malloc_r+0xd2>
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	442b      	add	r3, r5
 8000f42:	6023      	str	r3, [r4, #0]
 8000f44:	e00e      	b.n	8000f64 <_malloc_r+0xa0>
 8000f46:	6822      	ldr	r2, [r4, #0]
 8000f48:	1b52      	subs	r2, r2, r5
 8000f4a:	d41e      	bmi.n	8000f8a <_malloc_r+0xc6>
 8000f4c:	2a0b      	cmp	r2, #11
 8000f4e:	d916      	bls.n	8000f7e <_malloc_r+0xba>
 8000f50:	1961      	adds	r1, r4, r5
 8000f52:	42a3      	cmp	r3, r4
 8000f54:	6025      	str	r5, [r4, #0]
 8000f56:	bf18      	it	ne
 8000f58:	6059      	strne	r1, [r3, #4]
 8000f5a:	6863      	ldr	r3, [r4, #4]
 8000f5c:	bf08      	it	eq
 8000f5e:	6031      	streq	r1, [r6, #0]
 8000f60:	5162      	str	r2, [r4, r5]
 8000f62:	604b      	str	r3, [r1, #4]
 8000f64:	4638      	mov	r0, r7
 8000f66:	f104 060b 	add.w	r6, r4, #11
 8000f6a:	f000 f865 	bl	8001038 <__malloc_unlock>
 8000f6e:	f026 0607 	bic.w	r6, r6, #7
 8000f72:	1d23      	adds	r3, r4, #4
 8000f74:	1af2      	subs	r2, r6, r3
 8000f76:	d0b6      	beq.n	8000ee6 <_malloc_r+0x22>
 8000f78:	1b9b      	subs	r3, r3, r6
 8000f7a:	50a3      	str	r3, [r4, r2]
 8000f7c:	e7b3      	b.n	8000ee6 <_malloc_r+0x22>
 8000f7e:	6862      	ldr	r2, [r4, #4]
 8000f80:	42a3      	cmp	r3, r4
 8000f82:	bf0c      	ite	eq
 8000f84:	6032      	streq	r2, [r6, #0]
 8000f86:	605a      	strne	r2, [r3, #4]
 8000f88:	e7ec      	b.n	8000f64 <_malloc_r+0xa0>
 8000f8a:	4623      	mov	r3, r4
 8000f8c:	6864      	ldr	r4, [r4, #4]
 8000f8e:	e7b2      	b.n	8000ef6 <_malloc_r+0x32>
 8000f90:	4634      	mov	r4, r6
 8000f92:	6876      	ldr	r6, [r6, #4]
 8000f94:	e7b9      	b.n	8000f0a <_malloc_r+0x46>
 8000f96:	230c      	movs	r3, #12
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	4638      	mov	r0, r7
 8000f9c:	f000 f84c 	bl	8001038 <__malloc_unlock>
 8000fa0:	e7a1      	b.n	8000ee6 <_malloc_r+0x22>
 8000fa2:	6025      	str	r5, [r4, #0]
 8000fa4:	e7de      	b.n	8000f64 <_malloc_r+0xa0>
 8000fa6:	bf00      	nop
 8000fa8:	20000084 	.word	0x20000084

08000fac <_realloc_r>:
 8000fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fb0:	4680      	mov	r8, r0
 8000fb2:	4614      	mov	r4, r2
 8000fb4:	460e      	mov	r6, r1
 8000fb6:	b921      	cbnz	r1, 8000fc2 <_realloc_r+0x16>
 8000fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	f7ff bf81 	b.w	8000ec4 <_malloc_r>
 8000fc2:	b92a      	cbnz	r2, 8000fd0 <_realloc_r+0x24>
 8000fc4:	f7ff ff14 	bl	8000df0 <_free_r>
 8000fc8:	4625      	mov	r5, r4
 8000fca:	4628      	mov	r0, r5
 8000fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fd0:	f000 f838 	bl	8001044 <_malloc_usable_size_r>
 8000fd4:	4284      	cmp	r4, r0
 8000fd6:	4607      	mov	r7, r0
 8000fd8:	d802      	bhi.n	8000fe0 <_realloc_r+0x34>
 8000fda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000fde:	d812      	bhi.n	8001006 <_realloc_r+0x5a>
 8000fe0:	4621      	mov	r1, r4
 8000fe2:	4640      	mov	r0, r8
 8000fe4:	f7ff ff6e 	bl	8000ec4 <_malloc_r>
 8000fe8:	4605      	mov	r5, r0
 8000fea:	2800      	cmp	r0, #0
 8000fec:	d0ed      	beq.n	8000fca <_realloc_r+0x1e>
 8000fee:	42bc      	cmp	r4, r7
 8000ff0:	4622      	mov	r2, r4
 8000ff2:	4631      	mov	r1, r6
 8000ff4:	bf28      	it	cs
 8000ff6:	463a      	movcs	r2, r7
 8000ff8:	f7ff fed2 	bl	8000da0 <memcpy>
 8000ffc:	4631      	mov	r1, r6
 8000ffe:	4640      	mov	r0, r8
 8001000:	f7ff fef6 	bl	8000df0 <_free_r>
 8001004:	e7e1      	b.n	8000fca <_realloc_r+0x1e>
 8001006:	4635      	mov	r5, r6
 8001008:	e7df      	b.n	8000fca <_realloc_r+0x1e>
	...

0800100c <_sbrk_r>:
 800100c:	b538      	push	{r3, r4, r5, lr}
 800100e:	4d06      	ldr	r5, [pc, #24]	; (8001028 <_sbrk_r+0x1c>)
 8001010:	2300      	movs	r3, #0
 8001012:	4604      	mov	r4, r0
 8001014:	4608      	mov	r0, r1
 8001016:	602b      	str	r3, [r5, #0]
 8001018:	f7ff fb28 	bl	800066c <_sbrk>
 800101c:	1c43      	adds	r3, r0, #1
 800101e:	d102      	bne.n	8001026 <_sbrk_r+0x1a>
 8001020:	682b      	ldr	r3, [r5, #0]
 8001022:	b103      	cbz	r3, 8001026 <_sbrk_r+0x1a>
 8001024:	6023      	str	r3, [r4, #0]
 8001026:	bd38      	pop	{r3, r4, r5, pc}
 8001028:	2000008c 	.word	0x2000008c

0800102c <__malloc_lock>:
 800102c:	4801      	ldr	r0, [pc, #4]	; (8001034 <__malloc_lock+0x8>)
 800102e:	f000 b811 	b.w	8001054 <__retarget_lock_acquire_recursive>
 8001032:	bf00      	nop
 8001034:	20000090 	.word	0x20000090

08001038 <__malloc_unlock>:
 8001038:	4801      	ldr	r0, [pc, #4]	; (8001040 <__malloc_unlock+0x8>)
 800103a:	f000 b80c 	b.w	8001056 <__retarget_lock_release_recursive>
 800103e:	bf00      	nop
 8001040:	20000090 	.word	0x20000090

08001044 <_malloc_usable_size_r>:
 8001044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001048:	1f18      	subs	r0, r3, #4
 800104a:	2b00      	cmp	r3, #0
 800104c:	bfbc      	itt	lt
 800104e:	580b      	ldrlt	r3, [r1, r0]
 8001050:	18c0      	addlt	r0, r0, r3
 8001052:	4770      	bx	lr

08001054 <__retarget_lock_acquire_recursive>:
 8001054:	4770      	bx	lr

08001056 <__retarget_lock_release_recursive>:
 8001056:	4770      	bx	lr

08001058 <_init>:
 8001058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105a:	bf00      	nop
 800105c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800105e:	bc08      	pop	{r3}
 8001060:	469e      	mov	lr, r3
 8001062:	4770      	bx	lr

08001064 <_fini>:
 8001064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001066:	bf00      	nop
 8001068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800106a:	bc08      	pop	{r3}
 800106c:	469e      	mov	lr, r3
 800106e:	4770      	bx	lr
