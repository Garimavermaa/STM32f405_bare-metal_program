
11.Timer_interrupt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000024c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f4  080003fc  000103fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f4  080003f4  000103fc  2**0
                  CONTENTS
  4 .ARM          00000000  080003f4  080003f4  000103fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f4  080003fc  000103fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f4  080003f4  000103f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f8  080003f8  000103f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103fc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000103fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000088b  00000000  00000000  00010426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000017f  00000000  00000000  00010cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00010e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  00010e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016352  00000000  00000000  00010ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000543  00000000  00000000  0002723a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c2a5  00000000  00000000  0002777d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000a3a22  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000e4  00000000  00000000  000a3a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080003dc 	.word	0x080003dc

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080003dc 	.word	0x080003dc

080001e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db0b      	blt.n	8000212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	f003 021f 	and.w	r2, r3, #31
 8000200:	4906      	ldr	r1, [pc, #24]	; (800021c <__NVIC_EnableIRQ+0x34>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	095b      	lsrs	r3, r3, #5
 8000208:	2001      	movs	r0, #1
 800020a:	fa00 f202 	lsl.w	r2, r0, r2
 800020e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	e000e100 	.word	0xe000e100

08000220 <led_initialise>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void led_initialise()
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
		RCC->AHB1ENR |= (1<<1);		//enable GPIOB clock
 8000224:	4b13      	ldr	r3, [pc, #76]	; (8000274 <led_initialise+0x54>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a12      	ldr	r2, [pc, #72]	; (8000274 <led_initialise+0x54>)
 800022a:	f043 0302 	orr.w	r3, r3, #2
 800022e:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOB->MODER &= ~((3<<30)|(3<<26));	//PB15 & PB13as output
 8000230:	4b11      	ldr	r3, [pc, #68]	; (8000278 <led_initialise+0x58>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a10      	ldr	r2, [pc, #64]	; (8000278 <led_initialise+0x58>)
 8000236:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 800023a:	6013      	str	r3, [r2, #0]
		GPIOB->MODER |= (1<<30)|(1<<26);
 800023c:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <led_initialise+0x58>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a0d      	ldr	r2, [pc, #52]	; (8000278 <led_initialise+0x58>)
 8000242:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8000246:	6013      	str	r3, [r2, #0]
		GPIOB->OTYPER &= ~((1<<15)|(1<<13));	// push pull
 8000248:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <led_initialise+0x58>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <led_initialise+0x58>)
 800024e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8000252:	6053      	str	r3, [r2, #4]
		GPIOB->OSPEEDR &= ~((3<<30)|(1<<26));	// low speed
 8000254:	4b08      	ldr	r3, [pc, #32]	; (8000278 <led_initialise+0x58>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	4a07      	ldr	r2, [pc, #28]	; (8000278 <led_initialise+0x58>)
 800025a:	f023 4344 	bic.w	r3, r3, #3288334336	; 0xc4000000
 800025e:	6093      	str	r3, [r2, #8]
		GPIOB->ODR |= (1<<15)|(1<<13);		//PB15 & PB13 LED OFF
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <led_initialise+0x58>)
 8000262:	695b      	ldr	r3, [r3, #20]
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <led_initialise+0x58>)
 8000266:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 800026a:	6153      	str	r3, [r2, #20]
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	40023800 	.word	0x40023800
 8000278:	40020400 	.word	0x40020400

0800027c <timer3_initialise>:
void timer3_initialise()
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
		RCC->APB1ENR |= (1<<1);		//TIM3 clock enable
 8000280:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <timer3_initialise+0x48>)
 8000282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000284:	4a0f      	ldr	r2, [pc, #60]	; (80002c4 <timer3_initialise+0x48>)
 8000286:	f043 0302 	orr.w	r3, r3, #2
 800028a:	6413      	str	r3, [r2, #64]	; 0x40
		TIM3->PSC = 16000-1;			//Loading prescaler for 1KHz output
 800028c:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <timer3_initialise+0x4c>)
 800028e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000292:	629a      	str	r2, [r3, #40]	; 0x28
		TIM3->ARR = 1000-1;				//load ARR to get 1Hz Output
 8000294:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <timer3_initialise+0x4c>)
 8000296:	f240 32e7 	movw	r2, #999	; 0x3e7
 800029a:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->CNT = 0;				// reset counter register
 800029c:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <timer3_initialise+0x4c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->DIER |= (1<<0);		// Enable update Interrupt 632
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <timer3_initialise+0x4c>)
 80002a4:	68db      	ldr	r3, [r3, #12]
 80002a6:	4a08      	ldr	r2, [pc, #32]	; (80002c8 <timer3_initialise+0x4c>)
 80002a8:	f043 0301 	orr.w	r3, r3, #1
 80002ac:	60d3      	str	r3, [r2, #12]
		TIM3->CR1 |= (1<<0);		// Start Timer 3
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <timer3_initialise+0x4c>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a05      	ldr	r2, [pc, #20]	; (80002c8 <timer3_initialise+0x4c>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6013      	str	r3, [r2, #0]
}
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40000400 	.word	0x40000400

080002cc <TIM3_IRQHandler>:

void TIM3_IRQHandler()
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
		if(TIM3->SR & (1<<0))		// Confirm update interrupt rm 633
 80002d0:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <TIM3_IRQHandler+0x30>)
 80002d2:	691b      	ldr	r3, [r3, #16]
 80002d4:	f003 0301 	and.w	r3, r3, #1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d00b      	beq.n	80002f4 <TIM3_IRQHandler+0x28>
		{
			GPIOB->ODR ^= (1<<15);	// Toggle LED PB15
 80002dc:	4b08      	ldr	r3, [pc, #32]	; (8000300 <TIM3_IRQHandler+0x34>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a07      	ldr	r2, [pc, #28]	; (8000300 <TIM3_IRQHandler+0x34>)
 80002e2:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 80002e6:	6153      	str	r3, [r2, #20]
			TIM3->SR &= ~(1<<0);	// clear flag
 80002e8:	4b04      	ldr	r3, [pc, #16]	; (80002fc <TIM3_IRQHandler+0x30>)
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	4a03      	ldr	r2, [pc, #12]	; (80002fc <TIM3_IRQHandler+0x30>)
 80002ee:	f023 0301 	bic.w	r3, r3, #1
 80002f2:	6113      	str	r3, [r2, #16]
		}
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	40000400 	.word	0x40000400
 8000300:	40020400 	.word	0x40020400

08000304 <main>:

int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
	led_initialise();
 800030a:	f7ff ff89 	bl	8000220 <led_initialise>
	timer3_initialise();
 800030e:	f7ff ffb5 	bl	800027c <timer3_initialise>
	NVIC_EnableIRQ(TIM3_IRQn);		// Enable Timer 3 Interrupt
 8000312:	201d      	movs	r0, #29
 8000314:	f7ff ff68 	bl	80001e8 <__NVIC_EnableIRQ>
	{
		/* Blinking LED 4 at PB13 randomly to show that
		 * for loop delay is not affecting timer delay
		 * when using interrupt
		 */
		GPIOB->ODR ^= (1<<13);
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <main+0x38>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a07      	ldr	r2, [pc, #28]	; (800033c <main+0x38>)
 800031e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000322:	6153      	str	r3, [r2, #20]
		for(uint16_t i =0; i<50000;i++);
 8000324:	2300      	movs	r3, #0
 8000326:	80fb      	strh	r3, [r7, #6]
 8000328:	e002      	b.n	8000330 <main+0x2c>
 800032a:	88fb      	ldrh	r3, [r7, #6]
 800032c:	3301      	adds	r3, #1
 800032e:	80fb      	strh	r3, [r7, #6]
 8000330:	88fb      	ldrh	r3, [r7, #6]
 8000332:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000336:	4293      	cmp	r3, r2
 8000338:	d9f7      	bls.n	800032a <main+0x26>
		GPIOB->ODR ^= (1<<13);
 800033a:	e7ed      	b.n	8000318 <main+0x14>
 800033c:	40020400 	.word	0x40020400

08000340 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000340:	480d      	ldr	r0, [pc, #52]	; (8000378 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000342:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000344:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000348:	480c      	ldr	r0, [pc, #48]	; (800037c <LoopForever+0x6>)
  ldr r1, =_edata
 800034a:	490d      	ldr	r1, [pc, #52]	; (8000380 <LoopForever+0xa>)
  ldr r2, =_sidata
 800034c:	4a0d      	ldr	r2, [pc, #52]	; (8000384 <LoopForever+0xe>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000350:	e002      	b.n	8000358 <LoopCopyDataInit>

08000352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000356:	3304      	adds	r3, #4

08000358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800035c:	d3f9      	bcc.n	8000352 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035e:	4a0a      	ldr	r2, [pc, #40]	; (8000388 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000360:	4c0a      	ldr	r4, [pc, #40]	; (800038c <LoopForever+0x16>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000364:	e001      	b.n	800036a <LoopFillZerobss>

08000366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000368:	3204      	adds	r2, #4

0800036a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800036c:	d3fb      	bcc.n	8000366 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036e:	f000 f811 	bl	8000394 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000372:	f7ff ffc7 	bl	8000304 <main>

08000376 <LoopForever>:

LoopForever:
    b LoopForever
 8000376:	e7fe      	b.n	8000376 <LoopForever>
  ldr   r0, =_estack
 8000378:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800037c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000380:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000384:	080003fc 	.word	0x080003fc
  ldr r2, =_sbss
 8000388:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800038c:	2000001c 	.word	0x2000001c

08000390 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000390:	e7fe      	b.n	8000390 <ADC_IRQHandler>
	...

08000394 <__libc_init_array>:
 8000394:	b570      	push	{r4, r5, r6, lr}
 8000396:	4d0d      	ldr	r5, [pc, #52]	; (80003cc <__libc_init_array+0x38>)
 8000398:	4c0d      	ldr	r4, [pc, #52]	; (80003d0 <__libc_init_array+0x3c>)
 800039a:	1b64      	subs	r4, r4, r5
 800039c:	10a4      	asrs	r4, r4, #2
 800039e:	2600      	movs	r6, #0
 80003a0:	42a6      	cmp	r6, r4
 80003a2:	d109      	bne.n	80003b8 <__libc_init_array+0x24>
 80003a4:	4d0b      	ldr	r5, [pc, #44]	; (80003d4 <__libc_init_array+0x40>)
 80003a6:	4c0c      	ldr	r4, [pc, #48]	; (80003d8 <__libc_init_array+0x44>)
 80003a8:	f000 f818 	bl	80003dc <_init>
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	10a4      	asrs	r4, r4, #2
 80003b0:	2600      	movs	r6, #0
 80003b2:	42a6      	cmp	r6, r4
 80003b4:	d105      	bne.n	80003c2 <__libc_init_array+0x2e>
 80003b6:	bd70      	pop	{r4, r5, r6, pc}
 80003b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003bc:	4798      	blx	r3
 80003be:	3601      	adds	r6, #1
 80003c0:	e7ee      	b.n	80003a0 <__libc_init_array+0xc>
 80003c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c6:	4798      	blx	r3
 80003c8:	3601      	adds	r6, #1
 80003ca:	e7f2      	b.n	80003b2 <__libc_init_array+0x1e>
 80003cc:	080003f4 	.word	0x080003f4
 80003d0:	080003f4 	.word	0x080003f4
 80003d4:	080003f4 	.word	0x080003f4
 80003d8:	080003f8 	.word	0x080003f8

080003dc <_init>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	bf00      	nop
 80003e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e2:	bc08      	pop	{r3}
 80003e4:	469e      	mov	lr, r3
 80003e6:	4770      	bx	lr

080003e8 <_fini>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	bf00      	nop
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr
