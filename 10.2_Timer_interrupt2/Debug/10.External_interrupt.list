
10.External_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000290  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000438  08000440  00010440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000438  08000438  00010440  2**0
                  CONTENTS
  4 .ARM          00000000  08000438  08000438  00010440  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000438  08000440  00010440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000438  08000438  00010438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800043c  0800043c  0001043c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010440  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010440  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009f1  00000000  00000000  0001046a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001b5  00000000  00000000  00010e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  00011010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000048  00000000  00000000  00011070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016352  00000000  00000000  000110b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000054a  00000000  00000000  0002740a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c2a6  00000000  00000000  00027954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000a3bfa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000d0  00000000  00000000  000a3c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000420 	.word	0x08000420

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000420 	.word	0x08000420

080001e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db0b      	blt.n	8000212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	f003 021f 	and.w	r2, r3, #31
 8000200:	4906      	ldr	r1, [pc, #24]	; (800021c <__NVIC_EnableIRQ+0x34>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	095b      	lsrs	r3, r3, #5
 8000208:	2001      	movs	r0, #1
 800020a:	fa00 f202 	lsl.w	r2, r0, r2
 800020e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <EXTI3_IRQHandler>:

uint32_t count=0;


void EXTI3_IRQHandler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0


    if (((EXTI->PR)>>3) & 1){
 800027a:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <EXTI3_IRQHandler+0x50>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	08db      	lsrs	r3, r3, #3
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d018      	beq.n	80002ba <EXTI3_IRQHandler+0x46>

    	count=count+1;
 8000288:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <EXTI3_IRQHandler+0x54>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	3301      	adds	r3, #1
 800028e:	4a0e      	ldr	r2, [pc, #56]	; (80002c8 <EXTI3_IRQHandler+0x54>)
 8000290:	6013      	str	r3, [r2, #0]
    	 GPIOB->ODR ^= (1 <<13);
 8000292:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <EXTI3_IRQHandler+0x58>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	4a0d      	ldr	r2, [pc, #52]	; (80002cc <EXTI3_IRQHandler+0x58>)
 8000298:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800029c:	6153      	str	r3, [r2, #20]
    	 for(int j=0; j<10000; j++);
 800029e:	2300      	movs	r3, #0
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	e002      	b.n	80002aa <EXTI3_IRQHandler+0x36>
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	3301      	adds	r3, #1
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80002b0:	4293      	cmp	r3, r2
 80002b2:	ddf7      	ble.n	80002a4 <EXTI3_IRQHandler+0x30>
        EXTI->PR = (1 << 3);
 80002b4:	4b03      	ldr	r3, [pc, #12]	; (80002c4 <EXTI3_IRQHandler+0x50>)
 80002b6:	2208      	movs	r2, #8
 80002b8:	615a      	str	r2, [r3, #20]
    }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	40013c00 	.word	0x40013c00
 80002c8:	2000001c 	.word	0x2000001c
 80002cc:	40020400 	.word	0x40020400

080002d0 <main>:


int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0

    RCC->AHB1ENR |= (1 << 1);
 80002d4:	4b27      	ldr	r3, [pc, #156]	; (8000374 <main+0xa4>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d8:	4a26      	ldr	r2, [pc, #152]	; (8000374 <main+0xa4>)
 80002da:	f043 0302 	orr.w	r3, r3, #2
 80002de:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOB->MODER &=~(3<<26);
 80002e0:	4b25      	ldr	r3, [pc, #148]	; (8000378 <main+0xa8>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a24      	ldr	r2, [pc, #144]	; (8000378 <main+0xa8>)
 80002e6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80002ea:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &=~(3<<28);
 80002ec:	4b22      	ldr	r3, [pc, #136]	; (8000378 <main+0xa8>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a21      	ldr	r2, [pc, #132]	; (8000378 <main+0xa8>)
 80002f2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80002f6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &=~(3<<30);
 80002f8:	4b1f      	ldr	r3, [pc, #124]	; (8000378 <main+0xa8>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a1e      	ldr	r2, [pc, #120]	; (8000378 <main+0xa8>)
 80002fe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000302:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=(1<<26);
 8000304:	4b1c      	ldr	r3, [pc, #112]	; (8000378 <main+0xa8>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a1b      	ldr	r2, [pc, #108]	; (8000378 <main+0xa8>)
 800030a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800030e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=(1<<28);
 8000310:	4b19      	ldr	r3, [pc, #100]	; (8000378 <main+0xa8>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a18      	ldr	r2, [pc, #96]	; (8000378 <main+0xa8>)
 8000316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800031a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=(1<<30);
 800031c:	4b16      	ldr	r3, [pc, #88]	; (8000378 <main+0xa8>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a15      	ldr	r2, [pc, #84]	; (8000378 <main+0xa8>)
 8000322:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000326:	6013      	str	r3, [r2, #0]

    GPIOB->MODER &= ~(3<<6);
 8000328:	4b13      	ldr	r3, [pc, #76]	; (8000378 <main+0xa8>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a12      	ldr	r2, [pc, #72]	; (8000378 <main+0xa8>)
 800032e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000332:	6013      	str	r3, [r2, #0]

    RCC->APB2ENR |= (1 << 14);
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <main+0xa4>)
 8000336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000338:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <main+0xa4>)
 800033a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800033e:	6453      	str	r3, [r2, #68]	; 0x44


    SYSCFG->EXTICR[0] |= (1<<12);
 8000340:	4b0e      	ldr	r3, [pc, #56]	; (800037c <main+0xac>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <main+0xac>)
 8000346:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800034a:	6093      	str	r3, [r2, #8]

    EXTI->RTSR |= (1<<3);
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <main+0xb0>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	4a0b      	ldr	r2, [pc, #44]	; (8000380 <main+0xb0>)
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	6093      	str	r3, [r2, #8]

    EXTI->IMR |= (1<<3);
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <main+0xb0>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a08      	ldr	r2, [pc, #32]	; (8000380 <main+0xb0>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	6013      	str	r3, [r2, #0]

    NVIC_SetPriority(EXTI3_IRQn, 1);
 8000364:	2101      	movs	r1, #1
 8000366:	2009      	movs	r0, #9
 8000368:	f7ff ff5a 	bl	8000220 <__NVIC_SetPriority>

    NVIC_EnableIRQ(EXTI3_IRQn);
 800036c:	2009      	movs	r0, #9
 800036e:	f7ff ff3b 	bl	80001e8 <__NVIC_EnableIRQ>

    while(1)
 8000372:	e7fe      	b.n	8000372 <main+0xa2>
 8000374:	40023800 	.word	0x40023800
 8000378:	40020400 	.word	0x40020400
 800037c:	40013800 	.word	0x40013800
 8000380:	40013c00 	.word	0x40013c00

08000384 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000386:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000388:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800038c:	480c      	ldr	r0, [pc, #48]	; (80003c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800038e:	490d      	ldr	r1, [pc, #52]	; (80003c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000390:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <LoopForever+0xe>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000394:	e002      	b.n	800039c <LoopCopyDataInit>

08000396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039a:	3304      	adds	r3, #4

0800039c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800039c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a0:	d3f9      	bcc.n	8000396 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a2:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a4:	4c0a      	ldr	r4, [pc, #40]	; (80003d0 <LoopForever+0x16>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a8:	e001      	b.n	80003ae <LoopFillZerobss>

080003aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ac:	3204      	adds	r2, #4

080003ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b0:	d3fb      	bcc.n	80003aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b2:	f000 f811 	bl	80003d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003b6:	f7ff ff8b 	bl	80002d0 <main>

080003ba <LoopForever>:

LoopForever:
    b LoopForever
 80003ba:	e7fe      	b.n	80003ba <LoopForever>
  ldr   r0, =_estack
 80003bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c8:	08000440 	.word	0x08000440
  ldr r2, =_sbss
 80003cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d0:	20000020 	.word	0x20000020

080003d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d4:	e7fe      	b.n	80003d4 <ADC_IRQHandler>
	...

080003d8 <__libc_init_array>:
 80003d8:	b570      	push	{r4, r5, r6, lr}
 80003da:	4d0d      	ldr	r5, [pc, #52]	; (8000410 <__libc_init_array+0x38>)
 80003dc:	4c0d      	ldr	r4, [pc, #52]	; (8000414 <__libc_init_array+0x3c>)
 80003de:	1b64      	subs	r4, r4, r5
 80003e0:	10a4      	asrs	r4, r4, #2
 80003e2:	2600      	movs	r6, #0
 80003e4:	42a6      	cmp	r6, r4
 80003e6:	d109      	bne.n	80003fc <__libc_init_array+0x24>
 80003e8:	4d0b      	ldr	r5, [pc, #44]	; (8000418 <__libc_init_array+0x40>)
 80003ea:	4c0c      	ldr	r4, [pc, #48]	; (800041c <__libc_init_array+0x44>)
 80003ec:	f000 f818 	bl	8000420 <_init>
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	10a4      	asrs	r4, r4, #2
 80003f4:	2600      	movs	r6, #0
 80003f6:	42a6      	cmp	r6, r4
 80003f8:	d105      	bne.n	8000406 <__libc_init_array+0x2e>
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
 80003fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000400:	4798      	blx	r3
 8000402:	3601      	adds	r6, #1
 8000404:	e7ee      	b.n	80003e4 <__libc_init_array+0xc>
 8000406:	f855 3b04 	ldr.w	r3, [r5], #4
 800040a:	4798      	blx	r3
 800040c:	3601      	adds	r6, #1
 800040e:	e7f2      	b.n	80003f6 <__libc_init_array+0x1e>
 8000410:	08000438 	.word	0x08000438
 8000414:	08000438 	.word	0x08000438
 8000418:	08000438 	.word	0x08000438
 800041c:	0800043c 	.word	0x0800043c

08000420 <_init>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr

0800042c <_fini>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr
