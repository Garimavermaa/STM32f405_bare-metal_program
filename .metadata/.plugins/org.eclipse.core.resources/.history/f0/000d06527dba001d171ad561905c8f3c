/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

/*
 * pin PB10---clk
 * pin PB11---SDA
 * */


#include <stdint.h>
#include "stm32f4xx.h"



void gpio_initialise()
{
		RCC->AHB1ENR |= (1<<1);		//enable GPIOC clock
		GPIOC->MODER &= ~(3<<20);	//clear PC6 mode bits
		GPIOC->MODER |= (2<<20);
		GPIOC->MODER &= ~(3<<22);	//clear PC6 mode bits
		GPIOC->MODER |= (2<<22);
		GPIOC->AFR[1] &= ~(0xFF<8);	//clear PC6 AFRL bits   (page number 62 datasheet  for register 285)
		GPIOC->AFR[1] |= (0x44<<8);	// PC6 alternate fn as TIM3 CH1
		GPIOC->OTYPER &= ~(1<<6);	// PC6 push pull
		GPIOC->OSPEEDR &= ~(33<<20);	// PC6 clear speed
		GPIOC->OSPEEDR |= (11<<20);	// PC6 medium speed
}

void timer3_initialize()
{
		RCC_APB1ENR |= (1<<1);		// enable TIM3 clock
		TIM3_PSC = 16000-1;			// prescaler output 1Khz  (page no 642 )
		TIM3_ARR = 1000-1;			// Timer Output 1Hz  (page no 642)
		TIM3_CNT=0;					// Reset Counter (page no 642)
		TIM3_CCMR1 &= ~(7<<4);		// Clear Output mode in TIM3 CH1  (ref page no 636 )
		TIM3_CCMR1 |= (3<<4);		// Set Toggle mode for TIM3 CH1 output
		TIM3_CCER |= (1<<0);		//	Send timer output to PC6 (640)
		TIM3_CR1 |= (1<<0);			// start timer3  (page no 627)
}

int main(void)
{
	gpio_initialise();
	timer3_initialize();
	/* Loop forever */

	for(;;)
	{
		TIM3_CCR1 = 400;			// laod CCR1 value for toggling at CNT=400 (643)
		while(!(TIM3_SR & (1<<1)));	// wait for CH1 flag CC1F to set (ref 676)
		TIM3_SR &= ~(1<<1);			// clear CH1 Flag CC1F
		TIM3_CCR1 = 600;			// laod CCR1 value for toggling at CNT=600
		while(!(TIM3_SR & (1<<1)));	// wait for CH1 flag CC1F to set
		TIM3_SR &= ~(1<<1);			// clear CH1 Flag CC1F
	}
}
