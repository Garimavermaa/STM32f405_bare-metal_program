
3.swith_without_debounce.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000390  08000398  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000390  08000390  00010398  2**0
                  CONTENTS
  4 .ARM          00000000  08000390  08000390  00010398  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000390  08000398  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000390  08000390  00010390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000394  08000394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010398  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010398  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000109  00000000  00000000  000103c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000a9  00000000  00000000  000104d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  00010580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000038  00000000  00000000  000105d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f77  00000000  00000000  00010608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000048e  00000000  00000000  0001157f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003c20  00000000  00000000  00011a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001562d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000007c  00000000  00000000  00015680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000378 	.word	0x08000378

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000378 	.word	0x08000378

080001e8 <gpio_initialise>:

#include <stdint.h>
#include "stm32.h"

void gpio_initialise()
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	RCC_AHB1ENR |= (1<<1);
 80001ec:	4b1a      	ldr	r3, [pc, #104]	; (8000258 <gpio_initialise+0x70>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a19      	ldr	r2, [pc, #100]	; (8000258 <gpio_initialise+0x70>)
 80001f2:	f043 0302 	orr.w	r3, r3, #2
 80001f6:	6013      	str	r3, [r2, #0]
	RCC_AHB1ENR |= (1<<2);
 80001f8:	4b17      	ldr	r3, [pc, #92]	; (8000258 <gpio_initialise+0x70>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a16      	ldr	r2, [pc, #88]	; (8000258 <gpio_initialise+0x70>)
 80001fe:	f043 0304 	orr.w	r3, r3, #4
 8000202:	6013      	str	r3, [r2, #0]
	//OUTPUT Configuration
	GPIOB_MODER &= ~(3<<26);
 8000204:	4b15      	ldr	r3, [pc, #84]	; (800025c <gpio_initialise+0x74>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a14      	ldr	r2, [pc, #80]	; (800025c <gpio_initialise+0x74>)
 800020a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800020e:	6013      	str	r3, [r2, #0]
	GPIOB_MODER |= (1<<26);	// Port B 13 as OUTPUT
 8000210:	4b12      	ldr	r3, [pc, #72]	; (800025c <gpio_initialise+0x74>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a11      	ldr	r2, [pc, #68]	; (800025c <gpio_initialise+0x74>)
 8000216:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800021a:	6013      	str	r3, [r2, #0]
	//INPUT Configuration
	GPIOB_MODER &= ~(3<<14);	//PORT B 7 as Input
 800021c:	4b0f      	ldr	r3, [pc, #60]	; (800025c <gpio_initialise+0x74>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a0e      	ldr	r2, [pc, #56]	; (800025c <gpio_initialise+0x74>)
 8000222:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000226:	6013      	str	r3, [r2, #0]
	//port c
	GPIOC_MODER &= ~(3<<18);
 8000228:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <gpio_initialise+0x78>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a0c      	ldr	r2, [pc, #48]	; (8000260 <gpio_initialise+0x78>)
 800022e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000232:	6013      	str	r3, [r2, #0]
	GPIOC_MODER |= (1<<18);
 8000234:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <gpio_initialise+0x78>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a09      	ldr	r2, [pc, #36]	; (8000260 <gpio_initialise+0x78>)
 800023a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800023e:	6013      	str	r3, [r2, #0]
	GPIOB_ODR &=~(1<<13);
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <gpio_initialise+0x7c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <gpio_initialise+0x7c>)
 8000246:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800024a:	6013      	str	r3, [r2, #0]
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	40023830 	.word	0x40023830
 800025c:	40020400 	.word	0x40020400
 8000260:	40020800 	.word	0x40020800
 8000264:	40020414 	.word	0x40020414

08000268 <main>:
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
	gpio_initialise();
 800026e:	f7ff ffbb 	bl	80001e8 <gpio_initialise>
    /* Loop forever */
	for(;;)
	{
		//Switch Interface without debounce
		if(!(GPIOB_IDR & (1<<7)))
 8000272:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <main+0x68>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800027a:	2b00      	cmp	r3, #0
 800027c:	d1f9      	bne.n	8000272 <main+0xa>
		{
			for(uint32_t i=0; i<500000;i++) {} // This is de-bounce delay. Should be between 10~20 mSecs
 800027e:	2300      	movs	r3, #0
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	e002      	b.n	800028a <main+0x22>
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	3301      	adds	r3, #1
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4a11      	ldr	r2, [pc, #68]	; (80002d4 <main+0x6c>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d9f8      	bls.n	8000284 <main+0x1c>
			if(!(GPIOB_IDR & (1<<7)))
 8000292:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <main+0x68>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800029a:	2b00      	cmp	r3, #0
 800029c:	d1e9      	bne.n	8000272 <main+0xa>
			{
			GPIOB_ODR ^=(1<<13);
 800029e:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <main+0x70>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <main+0x70>)
 80002a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80002a8:	6013      	str	r3, [r2, #0]
			for(uint32_t i=0; i<50000;i++);
 80002aa:	2300      	movs	r3, #0
 80002ac:	603b      	str	r3, [r7, #0]
 80002ae:	e002      	b.n	80002b6 <main+0x4e>
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	3301      	adds	r3, #1
 80002b4:	603b      	str	r3, [r7, #0]
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80002bc:	4293      	cmp	r3, r2
 80002be:	d9f7      	bls.n	80002b0 <main+0x48>
			while((GPIOB_IDR & (1<<7))){}
 80002c0:	bf00      	nop
 80002c2:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <main+0x68>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d1f9      	bne.n	80002c2 <main+0x5a>
		if(!(GPIOB_IDR & (1<<7)))
 80002ce:	e7d0      	b.n	8000272 <main+0xa>
 80002d0:	40020410 	.word	0x40020410
 80002d4:	0007a11f 	.word	0x0007a11f
 80002d8:	40020414 	.word	0x40020414

080002dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002dc:	480d      	ldr	r0, [pc, #52]	; (8000314 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e4:	480c      	ldr	r0, [pc, #48]	; (8000318 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e6:	490d      	ldr	r1, [pc, #52]	; (800031c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e8:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <LoopForever+0xe>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ec:	e002      	b.n	80002f4 <LoopCopyDataInit>

080002ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f2:	3304      	adds	r3, #4

080002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f8:	d3f9      	bcc.n	80002ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fa:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002fc:	4c0a      	ldr	r4, [pc, #40]	; (8000328 <LoopForever+0x16>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000300:	e001      	b.n	8000306 <LoopFillZerobss>

08000302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000304:	3204      	adds	r2, #4

08000306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000308:	d3fb      	bcc.n	8000302 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030a:	f000 f811 	bl	8000330 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030e:	f7ff ffab 	bl	8000268 <main>

08000312 <LoopForever>:

LoopForever:
  b LoopForever
 8000312:	e7fe      	b.n	8000312 <LoopForever>
  ldr   r0, =_estack
 8000314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800031c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000320:	08000398 	.word	0x08000398
  ldr r2, =_sbss
 8000324:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000328:	2000001c 	.word	0x2000001c

0800032c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC_IRQHandler>
	...

08000330 <__libc_init_array>:
 8000330:	b570      	push	{r4, r5, r6, lr}
 8000332:	4d0d      	ldr	r5, [pc, #52]	; (8000368 <__libc_init_array+0x38>)
 8000334:	4c0d      	ldr	r4, [pc, #52]	; (800036c <__libc_init_array+0x3c>)
 8000336:	1b64      	subs	r4, r4, r5
 8000338:	10a4      	asrs	r4, r4, #2
 800033a:	2600      	movs	r6, #0
 800033c:	42a6      	cmp	r6, r4
 800033e:	d109      	bne.n	8000354 <__libc_init_array+0x24>
 8000340:	4d0b      	ldr	r5, [pc, #44]	; (8000370 <__libc_init_array+0x40>)
 8000342:	4c0c      	ldr	r4, [pc, #48]	; (8000374 <__libc_init_array+0x44>)
 8000344:	f000 f818 	bl	8000378 <_init>
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	10a4      	asrs	r4, r4, #2
 800034c:	2600      	movs	r6, #0
 800034e:	42a6      	cmp	r6, r4
 8000350:	d105      	bne.n	800035e <__libc_init_array+0x2e>
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f855 3b04 	ldr.w	r3, [r5], #4
 8000358:	4798      	blx	r3
 800035a:	3601      	adds	r6, #1
 800035c:	e7ee      	b.n	800033c <__libc_init_array+0xc>
 800035e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000362:	4798      	blx	r3
 8000364:	3601      	adds	r6, #1
 8000366:	e7f2      	b.n	800034e <__libc_init_array+0x1e>
 8000368:	08000390 	.word	0x08000390
 800036c:	08000390 	.word	0x08000390
 8000370:	08000390 	.word	0x08000390
 8000374:	08000394 	.word	0x08000394

08000378 <_init>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr

08000384 <_fini>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr
