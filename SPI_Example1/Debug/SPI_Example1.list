
SPI_Example1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000520  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006c8  080006d0  000106d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006c8  080006c8  000106d0  2**0
                  CONTENTS
  4 .ARM          00000000  080006c8  080006c8  000106d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006c8  080006d0  000106d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006c8  080006c8  000106c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006cc  080006cc  000106cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000106d0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000106d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000008f1  00000000  00000000  000106fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000197  00000000  00000000  00010feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00011188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000070  00000000  00000000  00011210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016352  00000000  00000000  00011280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000063a  00000000  00000000  000275d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c2bc  00000000  00000000  00027c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000a3ec8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000160  00000000  00000000  000a3f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080006b0 	.word	0x080006b0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080006b0 	.word	0x080006b0

080001e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db0b      	blt.n	8000212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	f003 021f 	and.w	r2, r3, #31
 8000200:	4906      	ldr	r1, [pc, #24]	; (800021c <__NVIC_EnableIRQ+0x34>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	095b      	lsrs	r3, r3, #5
 8000208:	2001      	movs	r0, #1
 800020a:	fa00 f202 	lsl.w	r2, r0, r2
 800020e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	e000e100 	.word	0xe000e100

08000220 <spi_slaveconfig>:
#endif


/* It is recommended to enable slave before master starts sending clock*/
void spi_slaveconfig()
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<14); //SPI2 clock enable RM245
 8000224:	4b22      	ldr	r3, [pc, #136]	; (80002b0 <spi_slaveconfig+0x90>)
 8000226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000228:	4a21      	ldr	r2, [pc, #132]	; (80002b0 <spi_slaveconfig+0x90>)
 800022a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800022e:	6413      	str	r3, [r2, #64]	; 0x40
	SPI2->CR1 &=~(1<<11);	//8-bit data format RM 916
 8000230:	4b20      	ldr	r3, [pc, #128]	; (80002b4 <spi_slaveconfig+0x94>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a1f      	ldr	r2, [pc, #124]	; (80002b4 <spi_slaveconfig+0x94>)
 8000236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800023a:	6013      	str	r3, [r2, #0]
	SPI2->CR1	|= (1<<0)|(1<<1);	//CPHA=1, 	CPOL=1
 800023c:	4b1d      	ldr	r3, [pc, #116]	; (80002b4 <spi_slaveconfig+0x94>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a1c      	ldr	r2, [pc, #112]	; (80002b4 <spi_slaveconfig+0x94>)
 8000242:	f043 0303 	orr.w	r3, r3, #3
 8000246:	6013      	str	r3, [r2, #0]
	SPI2->CR1 &=~(1<<7);	//MSB bit first
 8000248:	4b1a      	ldr	r3, [pc, #104]	; (80002b4 <spi_slaveconfig+0x94>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a19      	ldr	r2, [pc, #100]	; (80002b4 <spi_slaveconfig+0x94>)
 800024e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000252:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= (1<<9); 	//Software slave enable
 8000254:	4b17      	ldr	r3, [pc, #92]	; (80002b4 <spi_slaveconfig+0x94>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a16      	ldr	r2, [pc, #88]	; (80002b4 <spi_slaveconfig+0x94>)
 800025a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800025e:	6013      	str	r3, [r2, #0]
	SPI2->CR1 &= ~(1<<8);	//clear Internal slave select
 8000260:	4b14      	ldr	r3, [pc, #80]	; (80002b4 <spi_slaveconfig+0x94>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a13      	ldr	r2, [pc, #76]	; (80002b4 <spi_slaveconfig+0x94>)
 8000266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800026a:	6013      	str	r3, [r2, #0]
	SPI2->CR1 &= ~(1<<2);	//Slave mode enable
 800026c:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <spi_slaveconfig+0x94>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a10      	ldr	r2, [pc, #64]	; (80002b4 <spi_slaveconfig+0x94>)
 8000272:	f023 0304 	bic.w	r3, r3, #4
 8000276:	6013      	str	r3, [r2, #0]
	SPI2->CR1 &=~(1<<10);	//Full duplex mode
 8000278:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <spi_slaveconfig+0x94>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a0d      	ldr	r2, [pc, #52]	; (80002b4 <spi_slaveconfig+0x94>)
 800027e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000282:	6013      	str	r3, [r2, #0]
	SPI2->CR1 &=~(3<<12);	// No CRC
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <spi_slaveconfig+0x94>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <spi_slaveconfig+0x94>)
 800028a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800028e:	6013      	str	r3, [r2, #0]
	SPI2->CR1 &=~(1<<15);	// unidirectional mode
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <spi_slaveconfig+0x94>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a07      	ldr	r2, [pc, #28]	; (80002b4 <spi_slaveconfig+0x94>)
 8000296:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800029a:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= (1<<6);	// SPI Enable
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <spi_slaveconfig+0x94>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a04      	ldr	r2, [pc, #16]	; (80002b4 <spi_slaveconfig+0x94>)
 80002a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a6:	6013      	str	r3, [r2, #0]
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr
 80002b0:	40023800 	.word	0x40023800
 80002b4:	40003800 	.word	0x40003800

080002b8 <spi_masterconfig>:
void spi_masterconfig()
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1<<12);	// Enable SPI1 clock
 80002bc:	4b28      	ldr	r3, [pc, #160]	; (8000360 <spi_masterconfig+0xa8>)
 80002be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002c0:	4a27      	ldr	r2, [pc, #156]	; (8000360 <spi_masterconfig+0xa8>)
 80002c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002c6:	6453      	str	r3, [r2, #68]	; 0x44
	SPI1->CR1 &= ~(7<<3);	//clear baudrate
 80002c8:	4b26      	ldr	r3, [pc, #152]	; (8000364 <spi_masterconfig+0xac>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a25      	ldr	r2, [pc, #148]	; (8000364 <spi_masterconfig+0xac>)
 80002ce:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80002d2:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (3<<3); 	//set baudrate by fclk/16
 80002d4:	4b23      	ldr	r3, [pc, #140]	; (8000364 <spi_masterconfig+0xac>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a22      	ldr	r2, [pc, #136]	; (8000364 <spi_masterconfig+0xac>)
 80002da:	f043 0318 	orr.w	r3, r3, #24
 80002de:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1<<0)|(1<<1);	//CPHA=1, 	CPOL=1
 80002e0:	4b20      	ldr	r3, [pc, #128]	; (8000364 <spi_masterconfig+0xac>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a1f      	ldr	r2, [pc, #124]	; (8000364 <spi_masterconfig+0xac>)
 80002e6:	f043 0303 	orr.w	r3, r3, #3
 80002ea:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &=~(1<<11);	//8-bit data format
 80002ec:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <spi_masterconfig+0xac>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a1c      	ldr	r2, [pc, #112]	; (8000364 <spi_masterconfig+0xac>)
 80002f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002f6:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &=~(1<<7);	//MSB bit first
 80002f8:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <spi_masterconfig+0xac>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a19      	ldr	r2, [pc, #100]	; (8000364 <spi_masterconfig+0xac>)
 80002fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000302:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1<<9); 	//Software slave enable
 8000304:	4b17      	ldr	r3, [pc, #92]	; (8000364 <spi_masterconfig+0xac>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a16      	ldr	r2, [pc, #88]	; (8000364 <spi_masterconfig+0xac>)
 800030a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800030e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1<<8);	//Internal slave select
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <spi_masterconfig+0xac>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a13      	ldr	r2, [pc, #76]	; (8000364 <spi_masterconfig+0xac>)
 8000316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800031a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &=~(1<<10);	//Full duplex mode
 800031c:	4b11      	ldr	r3, [pc, #68]	; (8000364 <spi_masterconfig+0xac>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a10      	ldr	r2, [pc, #64]	; (8000364 <spi_masterconfig+0xac>)
 8000322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000326:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1<<2);		//Master Enable
 8000328:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <spi_masterconfig+0xac>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <spi_masterconfig+0xac>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &=~(3<<12);	// No CRC
 8000334:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <spi_masterconfig+0xac>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a0a      	ldr	r2, [pc, #40]	; (8000364 <spi_masterconfig+0xac>)
 800033a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800033e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &=~(1<<15);	// unidirectional mode
 8000340:	4b08      	ldr	r3, [pc, #32]	; (8000364 <spi_masterconfig+0xac>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a07      	ldr	r2, [pc, #28]	; (8000364 <spi_masterconfig+0xac>)
 8000346:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800034a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1<<6);	// SPI Enable
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <spi_masterconfig+0xac>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a04      	ldr	r2, [pc, #16]	; (8000364 <spi_masterconfig+0xac>)
 8000352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000356:	6013      	str	r3, [r2, #0]
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40023800 	.word	0x40023800
 8000364:	40013000 	.word	0x40013000

08000368 <spi_gpioconfig>:
void spi_gpioconfig()
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	/*SPI 1 GPIO pins*/
	/* PA5(21)--> SCK  */
	/* PA6(22)--> MISO  */
	/* PA7(23) --> MOSI  */
	RCC->AHB1ENR |= (1<<0);	//PortA Clock Enable
 800036c:	4b33      	ldr	r3, [pc, #204]	; (800043c <spi_gpioconfig+0xd4>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000370:	4a32      	ldr	r2, [pc, #200]	; (800043c <spi_gpioconfig+0xd4>)
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &= ~((3<<10)|(3<<12)|(3<<14));	//clear PA5-PA6 RM 62
 8000378:	4b31      	ldr	r3, [pc, #196]	; (8000440 <spi_gpioconfig+0xd8>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a30      	ldr	r2, [pc, #192]	; (8000440 <spi_gpioconfig+0xd8>)
 800037e:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8000382:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2<<10)|(2<<12)|(2<<14);	//Alternate mode
 8000384:	4b2e      	ldr	r3, [pc, #184]	; (8000440 <spi_gpioconfig+0xd8>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a2d      	ldr	r2, [pc, #180]	; (8000440 <spi_gpioconfig+0xd8>)
 800038a:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 800038e:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(7<<5); 	//push-pull for PA5-PA7;
 8000390:	4b2b      	ldr	r3, [pc, #172]	; (8000440 <spi_gpioconfig+0xd8>)
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	4a2a      	ldr	r2, [pc, #168]	; (8000440 <spi_gpioconfig+0xd8>)
 8000396:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800039a:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR &= ~((3<<10)|(3<<12)|(3<<14));	//clear speed select
 800039c:	4b28      	ldr	r3, [pc, #160]	; (8000440 <spi_gpioconfig+0xd8>)
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	4a27      	ldr	r2, [pc, #156]	; (8000440 <spi_gpioconfig+0xd8>)
 80003a2:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 80003a6:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (2<<10)|(2<<12)|(2<<14);	//High speed PA5-PA7
 80003a8:	4b25      	ldr	r3, [pc, #148]	; (8000440 <spi_gpioconfig+0xd8>)
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	4a24      	ldr	r2, [pc, #144]	; (8000440 <spi_gpioconfig+0xd8>)
 80003ae:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 80003b2:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[0] &= ~(0xFFF<<20);
 80003b4:	4b22      	ldr	r3, [pc, #136]	; (8000440 <spi_gpioconfig+0xd8>)
 80003b6:	6a1b      	ldr	r3, [r3, #32]
 80003b8:	4a21      	ldr	r2, [pc, #132]	; (8000440 <spi_gpioconfig+0xd8>)
 80003ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80003be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x555<<20);	//SPI alternate function PA5-PA7
 80003c0:	4b1f      	ldr	r3, [pc, #124]	; (8000440 <spi_gpioconfig+0xd8>)
 80003c2:	6a1b      	ldr	r3, [r3, #32]
 80003c4:	4a1e      	ldr	r2, [pc, #120]	; (8000440 <spi_gpioconfig+0xd8>)
 80003c6:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80003ca:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80003ce:	6213      	str	r3, [r2, #32]
	/*SPI 2 GPIO pins*/
	/* PB13 (34)--> SCK  */
	/* PB14 (35)--> MISO  */
	/* PB15 (36)--> MOSI  */
	RCC->AHB1ENR |= (1<<1);	//PortB Clock Enable
 80003d0:	4b1a      	ldr	r3, [pc, #104]	; (800043c <spi_gpioconfig+0xd4>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a19      	ldr	r2, [pc, #100]	; (800043c <spi_gpioconfig+0xd4>)
 80003d6:	f043 0302 	orr.w	r3, r3, #2
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB->MODER &= ~((3<<26)|(3<<28)|(3<<30));	//clear PB13-PB15
 80003dc:	4b19      	ldr	r3, [pc, #100]	; (8000444 <spi_gpioconfig+0xdc>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a18      	ldr	r2, [pc, #96]	; (8000444 <spi_gpioconfig+0xdc>)
 80003e2:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80003e6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (2<<26)|(2<<28)|(2<<30);	//Alternate mode
 80003e8:	4b16      	ldr	r3, [pc, #88]	; (8000444 <spi_gpioconfig+0xdc>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a15      	ldr	r2, [pc, #84]	; (8000444 <spi_gpioconfig+0xdc>)
 80003ee:	f043 4328 	orr.w	r3, r3, #2818572288	; 0xa8000000
 80003f2:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(7<<13); 	//push-pull for PB13-PB15;
 80003f4:	4b13      	ldr	r3, [pc, #76]	; (8000444 <spi_gpioconfig+0xdc>)
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	4a12      	ldr	r2, [pc, #72]	; (8000444 <spi_gpioconfig+0xdc>)
 80003fa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80003fe:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &= ~((3<<26)|(3<<28)|(3<<30));	//clear speed select
 8000400:	4b10      	ldr	r3, [pc, #64]	; (8000444 <spi_gpioconfig+0xdc>)
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	4a0f      	ldr	r2, [pc, #60]	; (8000444 <spi_gpioconfig+0xdc>)
 8000406:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800040a:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (2<<26)|(2<<28)|(2<<30);	//High speed PB13-PB15
 800040c:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <spi_gpioconfig+0xdc>)
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	4a0c      	ldr	r2, [pc, #48]	; (8000444 <spi_gpioconfig+0xdc>)
 8000412:	f043 4328 	orr.w	r3, r3, #2818572288	; 0xa8000000
 8000416:	6093      	str	r3, [r2, #8]
	GPIOB->AFR[1] &= ~(0xFFF<<20);
 8000418:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <spi_gpioconfig+0xdc>)
 800041a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800041c:	4a09      	ldr	r2, [pc, #36]	; (8000444 <spi_gpioconfig+0xdc>)
 800041e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000422:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (0x555<<20);	//SPI alternate function PB13-PB15
 8000424:	4b07      	ldr	r3, [pc, #28]	; (8000444 <spi_gpioconfig+0xdc>)
 8000426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000428:	4a06      	ldr	r2, [pc, #24]	; (8000444 <spi_gpioconfig+0xdc>)
 800042a:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800042e:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000432:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40023800 	.word	0x40023800
 8000440:	40020000 	.word	0x40020000
 8000444:	40020400 	.word	0x40020400

08000448 <led_config>:
void led_config()
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=(1<<2);	//Enable PORT C clock
 800044c:	4b13      	ldr	r3, [pc, #76]	; (800049c <led_config+0x54>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000450:	4a12      	ldr	r2, [pc, #72]	; (800049c <led_config+0x54>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &= ~(1<<12);
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <led_config+0x58>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a10      	ldr	r2, [pc, #64]	; (80004a0 <led_config+0x58>)
 800045e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000462:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1<<12);	//PC6 as output
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <led_config+0x58>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a0d      	ldr	r2, [pc, #52]	; (80004a0 <led_config+0x58>)
 800046a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800046e:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(1<<6);	//push pull at PC6
 8000470:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <led_config+0x58>)
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	4a0a      	ldr	r2, [pc, #40]	; (80004a0 <led_config+0x58>)
 8000476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800047a:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~(3<<12);	//low speed
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <led_config+0x58>)
 800047e:	689b      	ldr	r3, [r3, #8]
 8000480:	4a07      	ldr	r2, [pc, #28]	; (80004a0 <led_config+0x58>)
 8000482:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000486:	6093      	str	r3, [r2, #8]
	GPIOC->ODR |= (1<<6);		// LED OFF
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <led_config+0x58>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <led_config+0x58>)
 800048e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000492:	6153      	str	r3, [r2, #20]
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	40023800 	.word	0x40023800
 80004a0:	40020800 	.word	0x40020800

080004a4 <switch_config>:

void switch_config()
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<1);		//enable GPIOB clock
 80004a8:	4b1b      	ldr	r3, [pc, #108]	; (8000518 <switch_config+0x74>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ac:	4a1a      	ldr	r2, [pc, #104]	; (8000518 <switch_config+0x74>)
 80004ae:	f043 0302 	orr.w	r3, r3, #2
 80004b2:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB->MODER &= ~(3<<14);	// Input mode PB7
 80004b4:	4b19      	ldr	r3, [pc, #100]	; (800051c <switch_config+0x78>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a18      	ldr	r2, [pc, #96]	; (800051c <switch_config+0x78>)
 80004ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004be:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(3<<6);	// Input mOde PB3
 80004c0:	4b16      	ldr	r3, [pc, #88]	; (800051c <switch_config+0x78>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a15      	ldr	r2, [pc, #84]	; (800051c <switch_config+0x78>)
 80004c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80004ca:	6013      	str	r3, [r2, #0]
	RCC->APB2ENR |= (1<<14);	//SYSCFG enable
 80004cc:	4b12      	ldr	r3, [pc, #72]	; (8000518 <switch_config+0x74>)
 80004ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004d0:	4a11      	ldr	r2, [pc, #68]	; (8000518 <switch_config+0x74>)
 80004d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d6:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG->EXTICR[1] |= (1<<12);		// Enable External interrupt in PB7 297
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <switch_config+0x7c>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	4a10      	ldr	r2, [pc, #64]	; (8000520 <switch_config+0x7c>)
 80004de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004e2:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[0] |= (1<<12);		// Enable external interrupt in PB3
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <switch_config+0x7c>)
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <switch_config+0x7c>)
 80004ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004ee:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= (1<<7)|(1<<3);		// Line 7 & 3 of External Interrupt not masked
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <switch_config+0x80>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <switch_config+0x80>)
 80004f6:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 80004fa:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= (1<<7)|(1<<3);		// Falling edge Interrupt enable for PB7, PB3
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <switch_config+0x80>)
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	4a08      	ldr	r2, [pc, #32]	; (8000524 <switch_config+0x80>)
 8000502:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8000506:	60d3      	str	r3, [r2, #12]
//	NVIC_SetPriority(EXTI9_5_IRQn,1);	// Set priority to External Interrupt
//	NVIC_SetPriority(EXTI3_IRQn,1);	// Set priority to External Interrupt PB3
	NVIC_EnableIRQ(EXTI9_5_IRQn); // Enable External Interrupt for pin 5-9
 8000508:	2017      	movs	r0, #23
 800050a:	f7ff fe6d 	bl	80001e8 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI3_IRQn); // Enable External Interrupt for pin PB3
 800050e:	2009      	movs	r0, #9
 8000510:	f7ff fe6a 	bl	80001e8 <__NVIC_EnableIRQ>
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40023800 	.word	0x40023800
 800051c:	40020400 	.word	0x40020400
 8000520:	40013800 	.word	0x40013800
 8000524:	40013c00 	.word	0x40013c00

08000528 <EXTI9_5_IRQHandler>:
/*Since we using PB7- 7th GPIO pin we need to use this IRQn*/
void EXTI9_5_IRQHandler()
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<7))		// check for Interrupt trigger occurs
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <EXTI9_5_IRQHandler+0x38>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000534:	2b00      	cmp	r3, #0
 8000536:	d00f      	beq.n	8000558 <EXTI9_5_IRQHandler+0x30>
	{
		SPI1->DR = 1;/* send data from SPI-1 */
 8000538:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <EXTI9_5_IRQHandler+0x3c>)
 800053a:	2201      	movs	r2, #1
 800053c:	60da      	str	r2, [r3, #12]
		    			/* wait unit data is transmitted */
		while (!(SPI1->SR & (1<<1))); // 919
 800053e:	bf00      	nop
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <EXTI9_5_IRQHandler+0x3c>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	f003 0302 	and.w	r3, r3, #2
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0f9      	beq.n	8000540 <EXTI9_5_IRQHandler+0x18>
		     			/*Data transmitted*/
		EXTI->PR |= (1<<7);		// Set to clear the flag
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <EXTI9_5_IRQHandler+0x38>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	4a03      	ldr	r2, [pc, #12]	; (8000560 <EXTI9_5_IRQHandler+0x38>)
 8000552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000556:	6153      	str	r3, [r2, #20]
	}
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	40013c00 	.word	0x40013c00
 8000564:	40013000 	.word	0x40013000

08000568 <EXTI3_IRQHandler>:

/*PB3 is used for External interrupt so need to use EXTI3_IRQn*/
void EXTI3_IRQHandler()
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<3))		// check for Interrupt trigger occurs
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <EXTI3_IRQHandler+0x38>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	f003 0308 	and.w	r3, r3, #8
 8000574:	2b00      	cmp	r3, #0
 8000576:	d00f      	beq.n	8000598 <EXTI3_IRQHandler+0x30>
	{
		SPI1->DR = 0;/* send data from SPI-1 */
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <EXTI3_IRQHandler+0x3c>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
		    			/* wait unit data is transmitted */
		while (!(SPI1->SR & (1<<1)));
 800057e:	bf00      	nop
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <EXTI3_IRQHandler+0x3c>)
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	f003 0302 	and.w	r3, r3, #2
 8000588:	2b00      	cmp	r3, #0
 800058a:	d0f9      	beq.n	8000580 <EXTI3_IRQHandler+0x18>
		     			/*Data transmitted*/
		EXTI->PR |= (1<<3);		// Set to clear the flag
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <EXTI3_IRQHandler+0x38>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <EXTI3_IRQHandler+0x38>)
 8000592:	f043 0308 	orr.w	r3, r3, #8
 8000596:	6153      	str	r3, [r2, #20]
	}
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	40013c00 	.word	0x40013c00
 80005a4:	40013000 	.word	0x40013000

080005a8 <main>:

int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
    led_config();
 80005ae:	f7ff ff4b 	bl	8000448 <led_config>
    switch_config();
 80005b2:	f7ff ff77 	bl	80004a4 <switch_config>
    spi_gpioconfig();
 80005b6:	f7ff fed7 	bl	8000368 <spi_gpioconfig>
    spi_slaveconfig();
 80005ba:	f7ff fe31 	bl	8000220 <spi_slaveconfig>
    spi_masterconfig();
 80005be:	f7ff fe7b 	bl	80002b8 <spi_masterconfig>
    for (uint32_t i=0; i<1000; i++);
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	e002      	b.n	80005ce <main+0x26>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3301      	adds	r3, #1
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005d4:	d3f8      	bcc.n	80005c8 <main+0x20>
    while (1)
    {
  	     if (SPI2->SR & (1<<0))
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <main+0x64>)
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0f9      	beq.n	80005d6 <main+0x2e>
  	     {
  	    	 /*if data received in SPI)*/
  	    	 if (SPI2->DR == 0)
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <main+0x64>)
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d105      	bne.n	80005f6 <main+0x4e>
  	    	 {
  	    		 GPIOC->ODR |= (1 << 6);
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <main+0x68>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a08      	ldr	r2, [pc, #32]	; (8000610 <main+0x68>)
 80005f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005f4:	6153      	str	r3, [r2, #20]
   	         }
  	    	 if (SPI2->DR == 1)
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <main+0x64>)
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d1eb      	bne.n	80005d6 <main+0x2e>
  	    	 {
  	    	  	 GPIOC->ODR &= ~(1 << 6);
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <main+0x68>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a03      	ldr	r2, [pc, #12]	; (8000610 <main+0x68>)
 8000604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000608:	6153      	str	r3, [r2, #20]
  	     if (SPI2->SR & (1<<0))
 800060a:	e7e4      	b.n	80005d6 <main+0x2e>
 800060c:	40003800 	.word	0x40003800
 8000610:	40020800 	.word	0x40020800

08000614 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000616:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000618:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <LoopForever+0x6>)
  ldr r1, =_edata
 800061e:	490d      	ldr	r1, [pc, #52]	; (8000654 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000620:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <LoopForever+0xe>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a0a      	ldr	r2, [pc, #40]	; (800065c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000634:	4c0a      	ldr	r4, [pc, #40]	; (8000660 <LoopForever+0x16>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000642:	f000 f811 	bl	8000668 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000646:	f7ff ffaf 	bl	80005a8 <main>

0800064a <LoopForever>:

LoopForever:
    b LoopForever
 800064a:	e7fe      	b.n	800064a <LoopForever>
  ldr   r0, =_estack
 800064c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000658:	080006d0 	.word	0x080006d0
  ldr r2, =_sbss
 800065c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000660:	2000001c 	.word	0x2000001c

08000664 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC_IRQHandler>
	...

08000668 <__libc_init_array>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	4d0d      	ldr	r5, [pc, #52]	; (80006a0 <__libc_init_array+0x38>)
 800066c:	4c0d      	ldr	r4, [pc, #52]	; (80006a4 <__libc_init_array+0x3c>)
 800066e:	1b64      	subs	r4, r4, r5
 8000670:	10a4      	asrs	r4, r4, #2
 8000672:	2600      	movs	r6, #0
 8000674:	42a6      	cmp	r6, r4
 8000676:	d109      	bne.n	800068c <__libc_init_array+0x24>
 8000678:	4d0b      	ldr	r5, [pc, #44]	; (80006a8 <__libc_init_array+0x40>)
 800067a:	4c0c      	ldr	r4, [pc, #48]	; (80006ac <__libc_init_array+0x44>)
 800067c:	f000 f818 	bl	80006b0 <_init>
 8000680:	1b64      	subs	r4, r4, r5
 8000682:	10a4      	asrs	r4, r4, #2
 8000684:	2600      	movs	r6, #0
 8000686:	42a6      	cmp	r6, r4
 8000688:	d105      	bne.n	8000696 <__libc_init_array+0x2e>
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000690:	4798      	blx	r3
 8000692:	3601      	adds	r6, #1
 8000694:	e7ee      	b.n	8000674 <__libc_init_array+0xc>
 8000696:	f855 3b04 	ldr.w	r3, [r5], #4
 800069a:	4798      	blx	r3
 800069c:	3601      	adds	r6, #1
 800069e:	e7f2      	b.n	8000686 <__libc_init_array+0x1e>
 80006a0:	080006c8 	.word	0x080006c8
 80006a4:	080006c8 	.word	0x080006c8
 80006a8:	080006c8 	.word	0x080006c8
 80006ac:	080006cc 	.word	0x080006cc

080006b0 <_init>:
 80006b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b2:	bf00      	nop
 80006b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006b6:	bc08      	pop	{r3}
 80006b8:	469e      	mov	lr, r3
 80006ba:	4770      	bx	lr

080006bc <_fini>:
 80006bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006be:	bf00      	nop
 80006c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006c2:	bc08      	pop	{r3}
 80006c4:	469e      	mov	lr, r3
 80006c6:	4770      	bx	lr
