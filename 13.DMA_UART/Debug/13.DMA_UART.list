
13.DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080004a0  080004a0  000104a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004b0  080004b0  000104b8  2**0
                  CONTENTS
  4 .ARM          00000000  080004b0  080004b0  000104b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004b0  080004b8  000104b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b0  080004b0  000104b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004b4  080004b4  000104b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000104b8  2**0
                  CONTENTS
 10 .bss          00000030  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000104b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000551  00000000  00000000  000104e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000180  00000000  00000000  00010a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00010bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  00010c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001635e  00000000  00000000  00010c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000568  00000000  00000000  00026fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007bdb5  00000000  00000000  0002753e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000a32f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000e8  00000000  00000000  000a3344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000488 	.word	0x08000488

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000488 	.word	0x08000488

080001e8 <UART4_config>:

char rx_data[20];
uint8_t ind=0;
//uint32_t source_add,dest_add;
void UART4_config()
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	/*UART port pin config*/
	RCC->AHB1ENR |= (1<<0);			// enable GPIOA clock
 80001ec:	4b25      	ldr	r3, [pc, #148]	; (8000284 <UART4_config+0x9c>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a24      	ldr	r2, [pc, #144]	; (8000284 <UART4_config+0x9c>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &= ~(0xF<<0);		// enable alternate fn in PA0 & 1
 80001f8:	4b23      	ldr	r3, [pc, #140]	; (8000288 <UART4_config+0xa0>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a22      	ldr	r2, [pc, #136]	; (8000288 <UART4_config+0xa0>)
 80001fe:	f023 030f 	bic.w	r3, r3, #15
 8000202:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(0xA<<0);
 8000204:	4b20      	ldr	r3, [pc, #128]	; (8000288 <UART4_config+0xa0>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a1f      	ldr	r2, [pc, #124]	; (8000288 <UART4_config+0xa0>)
 800020a:	f043 030a 	orr.w	r3, r3, #10
 800020e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~(0xFF<<0);	// enable UART4 TX & RX function for PA0 & PA1
 8000210:	4b1d      	ldr	r3, [pc, #116]	; (8000288 <UART4_config+0xa0>)
 8000212:	6a1b      	ldr	r3, [r3, #32]
 8000214:	4a1c      	ldr	r2, [pc, #112]	; (8000288 <UART4_config+0xa0>)
 8000216:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800021a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x88<<0);
 800021c:	4b1a      	ldr	r3, [pc, #104]	; (8000288 <UART4_config+0xa0>)
 800021e:	6a1b      	ldr	r3, [r3, #32]
 8000220:	4a19      	ldr	r2, [pc, #100]	; (8000288 <UART4_config+0xa0>)
 8000222:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8000226:	6213      	str	r3, [r2, #32]
	GPIOA->OSPEEDR |= (0xF<<0);		// set output speed as high speed
 8000228:	4b17      	ldr	r3, [pc, #92]	; (8000288 <UART4_config+0xa0>)
 800022a:	689b      	ldr	r3, [r3, #8]
 800022c:	4a16      	ldr	r2, [pc, #88]	; (8000288 <UART4_config+0xa0>)
 800022e:	f043 030f 	orr.w	r3, r3, #15
 8000232:	6093      	str	r3, [r2, #8]
	/*UART4 config */
	RCC->APB1ENR |= (1<<19); 		// enable UART4 clock
 8000234:	4b13      	ldr	r3, [pc, #76]	; (8000284 <UART4_config+0x9c>)
 8000236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000238:	4a12      	ldr	r2, [pc, #72]	; (8000284 <UART4_config+0x9c>)
 800023a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800023e:	6413      	str	r3, [r2, #64]	; 0x40
	UART4->CR1 |= (1<<13); 			//Uart4 is enabled
 8000240:	4b12      	ldr	r3, [pc, #72]	; (800028c <UART4_config+0xa4>)
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	4a11      	ldr	r2, [pc, #68]	; (800028c <UART4_config+0xa4>)
 8000246:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800024a:	60d3      	str	r3, [r2, #12]
	UART4->CR1 &= ~(1<<12); 		//set 8bit data mode
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <UART4_config+0xa4>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	4a0e      	ldr	r2, [pc, #56]	; (800028c <UART4_config+0xa4>)
 8000252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000256:	60d3      	str	r3, [r2, #12]
 	UART4->BRR = 0x683;				// baudrate for 9600
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <UART4_config+0xa4>)
 800025a:	f240 6283 	movw	r2, #1667	; 0x683
 800025e:	609a      	str	r2, [r3, #8]
// 	UART4->CR1 |= (1<<5); 			//Uart4 Rx interrupt enable
 	UART4->CR3 |= (1<<6);
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <UART4_config+0xa4>)
 8000262:	695b      	ldr	r3, [r3, #20]
 8000264:	4a09      	ldr	r2, [pc, #36]	; (800028c <UART4_config+0xa4>)
 8000266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800026a:	6153      	str	r3, [r2, #20]
 	UART4->CR1 |= (3<<2); 			// TE & RE enable
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <UART4_config+0xa4>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	4a06      	ldr	r2, [pc, #24]	; (800028c <UART4_config+0xa4>)
 8000272:	f043 030c 	orr.w	r3, r3, #12
 8000276:	60d3      	str	r3, [r2, #12]
// 	NVIC_EnableIRQ(UART4_IRQn);		// UART4 Rx interrupt enable in NVIC
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40023800 	.word	0x40023800
 8000288:	40020000 	.word	0x40020000
 800028c:	40004c00 	.word	0x40004c00

08000290 <DMA1_config>:

void DMA1_config()
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<21);	//DMA1 clock enable RM 180
 8000294:	4b26      	ldr	r3, [pc, #152]	; (8000330 <DMA1_config+0xa0>)
 8000296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000298:	4a25      	ldr	r2, [pc, #148]	; (8000330 <DMA1_config+0xa0>)
 800029a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800029e:	6313      	str	r3, [r2, #48]	; 0x30
	/*TX confiq*/
	DMA1_Stream2->CR = 0x00000000;	// disable stream2 rm328 (rm 307)
 80002a0:	4b24      	ldr	r3, [pc, #144]	; (8000334 <DMA1_config+0xa4>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
	DMA1_Stream2->PAR = (uint32_t)&UART4->DR;	//set peri addres as uart (RM 332)
 80002a6:	4b23      	ldr	r3, [pc, #140]	; (8000334 <DMA1_config+0xa4>)
 80002a8:	4a23      	ldr	r2, [pc, #140]	; (8000338 <DMA1_config+0xa8>)
 80002aa:	609a      	str	r2, [r3, #8]
	DMA1_Stream2->M0AR = (uint32_t)&rx_data;	//memory add as RX data rm 332
 80002ac:	4b21      	ldr	r3, [pc, #132]	; (8000334 <DMA1_config+0xa4>)
 80002ae:	4a23      	ldr	r2, [pc, #140]	; (800033c <DMA1_config+0xac>)
 80002b0:	60da      	str	r2, [r3, #12]
	DMA1_Stream2->NDTR = 20;	//Number of data reg needed RM 331
 80002b2:	4b20      	ldr	r3, [pc, #128]	; (8000334 <DMA1_config+0xa4>)
 80002b4:	2214      	movs	r2, #20
 80002b6:	605a      	str	r2, [r3, #4]
	DMA1_Stream2->CR |= (4<<25);	//channel 4 selection RM 328
 80002b8:	4b1e      	ldr	r3, [pc, #120]	; (8000334 <DMA1_config+0xa4>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a1d      	ldr	r2, [pc, #116]	; (8000334 <DMA1_config+0xa4>)
 80002be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80002c2:	6013      	str	r3, [r2, #0]
	DMA1_Stream2->CR &= ~(3<<6); 	//direction - peripheral to memory
 80002c4:	4b1b      	ldr	r3, [pc, #108]	; (8000334 <DMA1_config+0xa4>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a1a      	ldr	r2, [pc, #104]	; (8000334 <DMA1_config+0xa4>)
 80002ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80002ce:	6013      	str	r3, [r2, #0]
	DMA1_Stream2->CR &= ~(3<<11);	// data size as 8bit
 80002d0:	4b18      	ldr	r3, [pc, #96]	; (8000334 <DMA1_config+0xa4>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a17      	ldr	r2, [pc, #92]	; (8000334 <DMA1_config+0xa4>)
 80002d6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80002da:	6013      	str	r3, [r2, #0]
	DMA1_Stream2->CR &= ~(3<<13);	// memory data size as 8bit
 80002dc:	4b15      	ldr	r3, [pc, #84]	; (8000334 <DMA1_config+0xa4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a14      	ldr	r2, [pc, #80]	; (8000334 <DMA1_config+0xa4>)
 80002e2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80002e6:	6013      	str	r3, [r2, #0]
	DMA1_Stream2->CR |= (1<<8);		// circular mode
 80002e8:	4b12      	ldr	r3, [pc, #72]	; (8000334 <DMA1_config+0xa4>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a11      	ldr	r2, [pc, #68]	; (8000334 <DMA1_config+0xa4>)
 80002ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f2:	6013      	str	r3, [r2, #0]
	DMA1_Stream2->CR &= ~(1<<9);	// disable peri increment
 80002f4:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <DMA1_config+0xa4>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a0e      	ldr	r2, [pc, #56]	; (8000334 <DMA1_config+0xa4>)
 80002fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80002fe:	6013      	str	r3, [r2, #0]
	DMA1_Stream2->CR |= (1<<10);	// enable memory increment
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <DMA1_config+0xa4>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <DMA1_config+0xa4>)
 8000306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800030a:	6013      	str	r3, [r2, #0]
	DMA1_Stream2->CR &= ~(3<<16);	// set low priority
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <DMA1_config+0xa4>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a08      	ldr	r2, [pc, #32]	; (8000334 <DMA1_config+0xa4>)
 8000312:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000316:	6013      	str	r3, [r2, #0]
	DMA1_Stream2->CR |= (1<<0);		// enable DMA
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <DMA1_config+0xa4>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a05      	ldr	r2, [pc, #20]	; (8000334 <DMA1_config+0xa4>)
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	6013      	str	r3, [r2, #0]

}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	40026040 	.word	0x40026040
 8000338:	40004c04 	.word	0x40004c04
 800033c:	2000001c 	.word	0x2000001c

08000340 <UART4_sendchar>:
void UART4_sendchar(uint8_t x)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	71fb      	strb	r3, [r7, #7]
	UART4->DR = x;						/*Please the data in DR register for transmitting*/
 800034a:	4a08      	ldr	r2, [pc, #32]	; (800036c <UART4_sendchar+0x2c>)
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	6053      	str	r3, [r2, #4]
	while(!(UART4->SR & (1<<6)));		/*Wait until TC (Transmission complete) is 1*/
 8000350:	bf00      	nop
 8000352:	4b06      	ldr	r3, [pc, #24]	; (800036c <UART4_sendchar+0x2c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0f9      	beq.n	8000352 <UART4_sendchar+0x12>
}
 800035e:	bf00      	nop
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	40004c00 	.word	0x40004c00

08000370 <UART4_sendstring>:

void UART4_sendstring(char *string)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	while(*string)
 8000378:	e006      	b.n	8000388 <UART4_sendstring+0x18>
	{
		UART4_sendchar(*string++);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	1c5a      	adds	r2, r3, #1
 800037e:	607a      	str	r2, [r7, #4]
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff ffdc 	bl	8000340 <UART4_sendchar>
	while(*string)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d1f4      	bne.n	800037a <UART4_sendstring+0xa>
	}
}
 8000390:	bf00      	nop
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <main>:

int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
	UART4_config();
 80003a2:	f7ff ff21 	bl	80001e8 <UART4_config>
	DMA1_config();
 80003a6:	f7ff ff73 	bl	8000290 <DMA1_config>

		while(1)
		{
			UART4_sendstring(" WELCOME ALL");
 80003aa:	480d      	ldr	r0, [pc, #52]	; (80003e0 <main+0x44>)
 80003ac:	f7ff ffe0 	bl	8000370 <UART4_sendstring>
			if(DMA1->LISR & (1<<5))				/* check for buffer overflow RM 325*/
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <main+0x48>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 0320 	and.w	r3, r3, #32
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d005      	beq.n	80003c8 <main+0x2c>
			{
				DMA1->LIFCR |= (1<<5);			/* clear buffer RM 327 */
 80003bc:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <main+0x48>)
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	4a08      	ldr	r2, [pc, #32]	; (80003e4 <main+0x48>)
 80003c2:	f043 0320 	orr.w	r3, r3, #32
 80003c6:	6093      	str	r3, [r2, #8]
			}
			for(uint32_t x=0;x<200000;x++);
 80003c8:	2300      	movs	r3, #0
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	e002      	b.n	80003d4 <main+0x38>
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3301      	adds	r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a04      	ldr	r2, [pc, #16]	; (80003e8 <main+0x4c>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d9f8      	bls.n	80003ce <main+0x32>
			UART4_sendstring(" WELCOME ALL");
 80003dc:	e7e5      	b.n	80003aa <main+0xe>
 80003de:	bf00      	nop
 80003e0:	080004a0 	.word	0x080004a0
 80003e4:	40026000 	.word	0x40026000
 80003e8:	00030d3f 	.word	0x00030d3f

080003ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003ec:	480d      	ldr	r0, [pc, #52]	; (8000424 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f4:	480c      	ldr	r0, [pc, #48]	; (8000428 <LoopForever+0x6>)
  ldr r1, =_edata
 80003f6:	490d      	ldr	r1, [pc, #52]	; (800042c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003f8:	4a0d      	ldr	r2, [pc, #52]	; (8000430 <LoopForever+0xe>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003fc:	e002      	b.n	8000404 <LoopCopyDataInit>

080003fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000402:	3304      	adds	r3, #4

08000404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000408:	d3f9      	bcc.n	80003fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040a:	4a0a      	ldr	r2, [pc, #40]	; (8000434 <LoopForever+0x12>)
  ldr r4, =_ebss
 800040c:	4c0a      	ldr	r4, [pc, #40]	; (8000438 <LoopForever+0x16>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000410:	e001      	b.n	8000416 <LoopFillZerobss>

08000412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000414:	3204      	adds	r2, #4

08000416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000418:	d3fb      	bcc.n	8000412 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800041a:	f000 f811 	bl	8000440 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800041e:	f7ff ffbd 	bl	800039c <main>

08000422 <LoopForever>:

LoopForever:
  b LoopForever
 8000422:	e7fe      	b.n	8000422 <LoopForever>
  ldr   r0, =_estack
 8000424:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800042c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000430:	080004b8 	.word	0x080004b8
  ldr r2, =_sbss
 8000434:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000438:	20000030 	.word	0x20000030

0800043c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800043c:	e7fe      	b.n	800043c <ADC_IRQHandler>
	...

08000440 <__libc_init_array>:
 8000440:	b570      	push	{r4, r5, r6, lr}
 8000442:	4d0d      	ldr	r5, [pc, #52]	; (8000478 <__libc_init_array+0x38>)
 8000444:	4c0d      	ldr	r4, [pc, #52]	; (800047c <__libc_init_array+0x3c>)
 8000446:	1b64      	subs	r4, r4, r5
 8000448:	10a4      	asrs	r4, r4, #2
 800044a:	2600      	movs	r6, #0
 800044c:	42a6      	cmp	r6, r4
 800044e:	d109      	bne.n	8000464 <__libc_init_array+0x24>
 8000450:	4d0b      	ldr	r5, [pc, #44]	; (8000480 <__libc_init_array+0x40>)
 8000452:	4c0c      	ldr	r4, [pc, #48]	; (8000484 <__libc_init_array+0x44>)
 8000454:	f000 f818 	bl	8000488 <_init>
 8000458:	1b64      	subs	r4, r4, r5
 800045a:	10a4      	asrs	r4, r4, #2
 800045c:	2600      	movs	r6, #0
 800045e:	42a6      	cmp	r6, r4
 8000460:	d105      	bne.n	800046e <__libc_init_array+0x2e>
 8000462:	bd70      	pop	{r4, r5, r6, pc}
 8000464:	f855 3b04 	ldr.w	r3, [r5], #4
 8000468:	4798      	blx	r3
 800046a:	3601      	adds	r6, #1
 800046c:	e7ee      	b.n	800044c <__libc_init_array+0xc>
 800046e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000472:	4798      	blx	r3
 8000474:	3601      	adds	r6, #1
 8000476:	e7f2      	b.n	800045e <__libc_init_array+0x1e>
 8000478:	080004b0 	.word	0x080004b0
 800047c:	080004b0 	.word	0x080004b0
 8000480:	080004b0 	.word	0x080004b0
 8000484:	080004b4 	.word	0x080004b4

08000488 <_init>:
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048a:	bf00      	nop
 800048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048e:	bc08      	pop	{r3}
 8000490:	469e      	mov	lr, r3
 8000492:	4770      	bx	lr

08000494 <_fini>:
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000496:	bf00      	nop
 8000498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049a:	bc08      	pop	{r3}
 800049c:	469e      	mov	lr, r3
 800049e:	4770      	bx	lr
