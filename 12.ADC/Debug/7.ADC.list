
7.ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e70  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001020  08001020  00011020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001060  08001060  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001060  08001060  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001060  08001060  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001060  08001060  00011060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001064  08001064  00011064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000034  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000098  20000098  00020064  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b3b  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000037d  00000000  00000000  00020bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00020f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000088  00000000  00000000  00021008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b8be  00000000  00000000  00021090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000010d3  00000000  00000000  0004c94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc5e5  00000000  00000000  0004da21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010a006  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005d4  00000000  00000000  0010a058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001008 	.word	0x08001008

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08001008 	.word	0x08001008

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:

#include <stdio.h>
#include <stdlib.h>
int  result;

int main (void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b08e      	sub	sp, #56	; 0x38
 8000294:	af00      	add	r7, sp, #0

//PC2 ANALOG POT1
//PC1 ANALOG POT2
    /* set up pin PC6 for LED */
    char buf[50];
    LcdInit ();
 8000296:	f000 f953 	bl	8000540 <LcdInit>

    RCC->AHB1ENR |=  (1<<2);	            /* enable GPIOC clock */
 800029a:	4b41      	ldr	r3, [pc, #260]	; (80003a0 <main+0x110>)
 800029c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029e:	4a40      	ldr	r2, [pc, #256]	; (80003a0 <main+0x110>)
 80002a0:	f043 0304 	orr.w	r3, r3, #4
 80002a4:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOC->MODER &= ~(3<<12);    /* clear pin mode for PC6 LED*/
 80002a6:	4b3f      	ldr	r3, [pc, #252]	; (80003a4 <main+0x114>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a3e      	ldr	r2, [pc, #248]	; (80003a4 <main+0x114>)
 80002ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80002b0:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (1<<12);    /* set pin to output mode -01 set bit 12 */
 80002b2:	4b3c      	ldr	r3, [pc, #240]	; (80003a4 <main+0x114>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a3b      	ldr	r2, [pc, #236]	; (80003a4 <main+0x114>)
 80002b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002bc:	6013      	str	r3, [r2, #0]


    // set up pin PC1 for analog input
    //RCC->AHB1ENR |=  (1<<2);
    GPIOC->MODER &= ~(3<<2);    // clear pin mode PC1 -bit 3 and 2
 80002be:	4b39      	ldr	r3, [pc, #228]	; (80003a4 <main+0x114>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a38      	ldr	r2, [pc, #224]	; (80003a4 <main+0x114>)
 80002c4:	f023 030c 	bic.w	r3, r3, #12
 80002c8:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (3<<2);    //set pin to ANALOG mode -11,setting bit 2 and 3
 80002ca:	4b36      	ldr	r3, [pc, #216]	; (80003a4 <main+0x114>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a35      	ldr	r2, [pc, #212]	; (80003a4 <main+0x114>)
 80002d0:	f043 030c 	orr.w	r3, r3, #12
 80002d4:	6013      	str	r3, [r2, #0]

    /* setup ADC1 */
    RCC->APB2ENR |= (1<<8);     //Enable ADC1 clock -ADC1 is connected to APB2 Bus(84Mhz)
 80002d6:	4b32      	ldr	r3, [pc, #200]	; (80003a0 <main+0x110>)
 80002d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002da:	4a31      	ldr	r2, [pc, #196]	; (80003a0 <main+0x110>)
 80002dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e0:	6453      	str	r3, [r2, #68]	; 0x44
    ADC1->CR2 = 0;              //0: Disable ADC conversion and go to power down mode
 80002e2:	4b31      	ldr	r3, [pc, #196]	; (80003a8 <main+0x118>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
    //The total number of conversions in the regular group must be written in the L[3:0] bits in the
   // ADC_SQR1 register 418
    //ADC regular sequence register 3
    ADC1->SQR1 &=~(0xF<<20); //Clearing bits 20-23, conversion sequence length is 1
 80002e8:	4b2f      	ldr	r3, [pc, #188]	; (80003a8 <main+0x118>)
 80002ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002ec:	4a2e      	ldr	r2, [pc, #184]	; (80003a8 <main+0x118>)
 80002ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80002f2:	62d3      	str	r3, [r2, #44]	; 0x2c
    //SQR3 -its 4:0 SQ1[4:0]: 1st conversion in regular sequence RM 422
    ADC1->SQR3 |=(0xB<<0); //11   - conversion sequence and channel selection,Channel is 11 ADC1_CH11 for PC1
 80002f4:	4b2c      	ldr	r3, [pc, #176]	; (80003a8 <main+0x118>)
 80002f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002f8:	4a2b      	ldr	r2, [pc, #172]	; (80003a8 <main+0x118>)
 80002fa:	f043 030b 	orr.w	r3, r3, #11
 80002fe:	6353      	str	r3, [r2, #52]	; 0x34
    //SQR1 is 0000: 1 conversion RM 423
    ADC1->CR1|=(1<<8);//Scan mode enable 416
 8000300:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <main+0x118>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	4a28      	ldr	r2, [pc, #160]	; (80003a8 <main+0x118>)
 8000306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800030a:	6053      	str	r3, [r2, #4]
    ADC1->CR1 |=0xB;   //01100  -Channel 11
 800030c:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <main+0x118>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	4a25      	ldr	r2, [pc, #148]	; (80003a8 <main+0x118>)
 8000312:	f043 030b 	orr.w	r3, r3, #11
 8000316:	6053      	str	r3, [r2, #4]
    ADC1->CR2 |= (1<<0);                 // Enable ADC2 148
 8000318:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <main+0x118>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a22      	ldr	r2, [pc, #136]	; (80003a8 <main+0x118>)
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	6093      	str	r3, [r2, #8]

    while (1) {
        ADC1->CR2 |= (1<<30);        /* start a conversion at regular channel RM 415*/
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <main+0x118>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	4a1f      	ldr	r2, [pc, #124]	; (80003a8 <main+0x118>)
 800032a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800032e:	6093      	str	r3, [r2, #8]
        while(!(ADC1->SR & 2)) {}       // wait for conv complete -monitor bit 1
 8000330:	bf00      	nop
 8000332:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <main+0x118>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0302 	and.w	r3, r3, #2
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0f9      	beq.n	8000332 <main+0xa2>
        result = ADC1->DR;              /* read conversion result 418*/
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <main+0x118>)
 8000340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000342:	461a      	mov	r2, r3
 8000344:	4b19      	ldr	r3, [pc, #100]	; (80003ac <main+0x11c>)
 8000346:	601a      	str	r2, [r3, #0]

//        sprintf (buf,"                ");  // clear LCD
//        lprint(0x80, buf);
        clear_LCD ();
 8000348:	f000 f8f1 	bl	800052e <clear_LCD>
        sprintf (buf,"ADC -> %d",result);
 800034c:	4b17      	ldr	r3, [pc, #92]	; (80003ac <main+0x11c>)
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	463b      	mov	r3, r7
 8000352:	4917      	ldr	r1, [pc, #92]	; (80003b0 <main+0x120>)
 8000354:	4618      	mov	r0, r3
 8000356:	f000 f9eb 	bl	8000730 <siprintf>
        lprint(0x80, buf);
 800035a:	463b      	mov	r3, r7
 800035c:	4619      	mov	r1, r3
 800035e:	2080      	movs	r0, #128	; 0x80
 8000360:	f000 f994 	bl	800068c <lprint>

        if (result >100)
 8000364:	4b11      	ldr	r3, [pc, #68]	; (80003ac <main+0x11c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b64      	cmp	r3, #100	; 0x64
 800036a:	dd06      	ble.n	800037a <main+0xea>

        	GPIOC->ODR &= ~( 1 << 6);//PC6 LED ON
 800036c:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <main+0x114>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4a0c      	ldr	r2, [pc, #48]	; (80003a4 <main+0x114>)
 8000372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000376:	6153      	str	r3, [r2, #20]
 8000378:	e005      	b.n	8000386 <main+0xf6>

        else

        GPIOC->ODR|= ( 1 << 6); //PC6 =1 // TURN OFF LED
 800037a:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <main+0x114>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a09      	ldr	r2, [pc, #36]	; (80003a4 <main+0x114>)
 8000380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000384:	6153      	str	r3, [r2, #20]

        for (int i=0; i<50000; i++);   // delay so LCD count can be stable
 8000386:	2300      	movs	r3, #0
 8000388:	637b      	str	r3, [r7, #52]	; 0x34
 800038a:	e002      	b.n	8000392 <main+0x102>
 800038c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800038e:	3301      	adds	r3, #1
 8000390:	637b      	str	r3, [r7, #52]	; 0x34
 8000392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000394:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000398:	4293      	cmp	r3, r2
 800039a:	ddf7      	ble.n	800038c <main+0xfc>
        ADC1->CR2 |= (1<<30);        /* start a conversion at regular channel RM 415*/
 800039c:	e7c2      	b.n	8000324 <main+0x94>
 800039e:	bf00      	nop
 80003a0:	40023800 	.word	0x40023800
 80003a4:	40020800 	.word	0x40020800
 80003a8:	40012000 	.word	0x40012000
 80003ac:	20000080 	.word	0x20000080
 80003b0:	08001020 	.word	0x08001020

080003b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003bc:	4a14      	ldr	r2, [pc, #80]	; (8000410 <_sbrk+0x5c>)
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <_sbrk+0x60>)
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003c8:	4b13      	ldr	r3, [pc, #76]	; (8000418 <_sbrk+0x64>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d102      	bne.n	80003d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003d0:	4b11      	ldr	r3, [pc, #68]	; (8000418 <_sbrk+0x64>)
 80003d2:	4a12      	ldr	r2, [pc, #72]	; (800041c <_sbrk+0x68>)
 80003d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003d6:	4b10      	ldr	r3, [pc, #64]	; (8000418 <_sbrk+0x64>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4413      	add	r3, r2
 80003de:	693a      	ldr	r2, [r7, #16]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	d207      	bcs.n	80003f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003e4:	f000 f97a 	bl	80006dc <__errno>
 80003e8:	4603      	mov	r3, r0
 80003ea:	220c      	movs	r2, #12
 80003ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003ee:	f04f 33ff 	mov.w	r3, #4294967295
 80003f2:	e009      	b.n	8000408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <_sbrk+0x64>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003fa:	4b07      	ldr	r3, [pc, #28]	; (8000418 <_sbrk+0x64>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4413      	add	r3, r2
 8000402:	4a05      	ldr	r2, [pc, #20]	; (8000418 <_sbrk+0x64>)
 8000404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000406:	68fb      	ldr	r3, [r7, #12]
}
 8000408:	4618      	mov	r0, r3
 800040a:	3718      	adds	r7, #24
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20020000 	.word	0x20020000
 8000414:	00000400 	.word	0x00000400
 8000418:	20000084 	.word	0x20000084
 800041c:	20000098 	.word	0x20000098

08000420 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000420:	480d      	ldr	r0, [pc, #52]	; (8000458 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000422:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000424:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000428:	480c      	ldr	r0, [pc, #48]	; (800045c <LoopForever+0x6>)
  ldr r1, =_edata
 800042a:	490d      	ldr	r1, [pc, #52]	; (8000460 <LoopForever+0xa>)
  ldr r2, =_sidata
 800042c:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <LoopForever+0xe>)
  movs r3, #0
 800042e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000430:	e002      	b.n	8000438 <LoopCopyDataInit>

08000432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000436:	3304      	adds	r3, #4

08000438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800043c:	d3f9      	bcc.n	8000432 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043e:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000440:	4c0a      	ldr	r4, [pc, #40]	; (800046c <LoopForever+0x16>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000444:	e001      	b.n	800044a <LoopFillZerobss>

08000446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000448:	3204      	adds	r2, #4

0800044a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800044c:	d3fb      	bcc.n	8000446 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800044e:	f000 f94b 	bl	80006e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000452:	f7ff ff1d 	bl	8000290 <main>

08000456 <LoopForever>:

LoopForever:
  b LoopForever
 8000456:	e7fe      	b.n	8000456 <LoopForever>
  ldr   r0, =_estack
 8000458:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800045c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000460:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000464:	08001068 	.word	0x08001068
  ldr r2, =_sbss
 8000468:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800046c:	20000098 	.word	0x20000098

08000470 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000470:	e7fe      	b.n	8000470 <ADC_IRQHandler>

08000472 <SetOutput>:
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
 800047a:	6039      	str	r1, [r7, #0]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	683a      	ldr	r2, [r7, #0]
 8000482:	0052      	lsls	r2, r2, #1
 8000484:	2103      	movs	r1, #3
 8000486:	fa01 f202 	lsl.w	r2, r1, r2
 800048a:	43d2      	mvns	r2, r2
 800048c:	401a      	ands	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	683a      	ldr	r2, [r7, #0]
 8000498:	0052      	lsls	r2, r2, #1
 800049a:	2101      	movs	r1, #1
 800049c:	fa01 f202 	lsl.w	r2, r1, r2
 80004a0:	431a      	orrs	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <SetBit>:
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	2101      	movs	r1, #1
 80004c0:	683a      	ldr	r2, [r7, #0]
 80004c2:	fa01 f202 	lsl.w	r2, r1, r2
 80004c6:	431a      	orrs	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	615a      	str	r2, [r3, #20]
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr

080004d6 <ClrBit>:
 80004d6:	b480      	push	{r7}
 80004d8:	b083      	sub	sp, #12
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
 80004de:	6039      	str	r1, [r7, #0]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	2101      	movs	r1, #1
 80004e6:	683a      	ldr	r2, [r7, #0]
 80004e8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ec:	43d2      	mvns	r2, r2
 80004ee:	401a      	ands	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	615a      	str	r2, [r3, #20]
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr

080004fe <DelayLcd>:
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	2300      	movs	r3, #0
 8000506:	80fb      	strh	r3, [r7, #6]
 8000508:	2300      	movs	r3, #0
 800050a:	80fb      	strh	r3, [r7, #6]
 800050c:	e004      	b.n	8000518 <DelayLcd+0x1a>
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	b29b      	uxth	r3, r3
 8000512:	3301      	adds	r3, #1
 8000514:	b29b      	uxth	r3, r3
 8000516:	80fb      	strh	r3, [r7, #6]
 8000518:	88fb      	ldrh	r3, [r7, #6]
 800051a:	b29b      	uxth	r3, r3
 800051c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000520:	d3f5      	bcc.n	800050e <DelayLcd+0x10>
 8000522:	bf00      	nop
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr

0800052e <clear_LCD>:
 800052e:	b580      	push	{r7, lr}
 8000530:	af00      	add	r7, sp, #0
 8000532:	2101      	movs	r1, #1
 8000534:	2000      	movs	r0, #0
 8000536:	f000 f84f 	bl	80005d8 <LcdFxn>
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <LcdInit>:
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
 8000544:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <LcdInit+0x84>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000548:	4a1e      	ldr	r2, [pc, #120]	; (80005c4 <LcdInit+0x84>)
 800054a:	f043 0307 	orr.w	r3, r3, #7
 800054e:	6313      	str	r3, [r2, #48]	; 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	481d      	ldr	r0, [pc, #116]	; (80005c8 <LcdInit+0x88>)
 8000554:	f7ff ff8d 	bl	8000472 <SetOutput>
 8000558:	2101      	movs	r1, #1
 800055a:	481b      	ldr	r0, [pc, #108]	; (80005c8 <LcdInit+0x88>)
 800055c:	f7ff ff89 	bl	8000472 <SetOutput>
 8000560:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <LcdInit+0x8c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a19      	ldr	r2, [pc, #100]	; (80005cc <LcdInit+0x8c>)
 8000566:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800056a:	f023 030f 	bic.w	r3, r3, #15
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b16      	ldr	r3, [pc, #88]	; (80005cc <LcdInit+0x8c>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4915      	ldr	r1, [pc, #84]	; (80005cc <LcdInit+0x8c>)
 8000576:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <LcdInit+0x90>)
 8000578:	4313      	orrs	r3, r2
 800057a:	600b      	str	r3, [r1, #0]
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <LcdInit+0x94>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <LcdInit+0x94>)
 8000582:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <LcdInit+0x94>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <LcdInit+0x94>)
 800058e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <LcdInit+0x8c>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <LcdInit+0x8c>)
 800059a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800059e:	6153      	str	r3, [r2, #20]
 80005a0:	2138      	movs	r1, #56	; 0x38
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 f818 	bl	80005d8 <LcdFxn>
 80005a8:	2106      	movs	r1, #6
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 f814 	bl	80005d8 <LcdFxn>
 80005b0:	210c      	movs	r1, #12
 80005b2:	2000      	movs	r0, #0
 80005b4:	f000 f810 	bl	80005d8 <LcdFxn>
 80005b8:	2101      	movs	r1, #1
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 f80c 	bl	80005d8 <LcdFxn>
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40020000 	.word	0x40020000
 80005cc:	40020400 	.word	0x40020400
 80005d0:	55550005 	.word	0x55550005
 80005d4:	40020800 	.word	0x40020800

080005d8 <LcdFxn>:
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	460a      	mov	r2, r1
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	4613      	mov	r3, r2
 80005e6:	71bb      	strb	r3, [r7, #6]
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <LcdFxn+0xa8>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	81fb      	strh	r3, [r7, #14]
 80005ee:	4b24      	ldr	r3, [pc, #144]	; (8000680 <LcdFxn+0xa8>)
 80005f0:	695a      	ldr	r2, [r3, #20]
 80005f2:	4923      	ldr	r1, [pc, #140]	; (8000680 <LcdFxn+0xa8>)
 80005f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80005f8:	4013      	ands	r3, r2
 80005fa:	614b      	str	r3, [r1, #20]
 80005fc:	4b20      	ldr	r3, [pc, #128]	; (8000680 <LcdFxn+0xa8>)
 80005fe:	695a      	ldr	r2, [r3, #20]
 8000600:	79bb      	ldrb	r3, [r7, #6]
 8000602:	021b      	lsls	r3, r3, #8
 8000604:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000608:	491d      	ldr	r1, [pc, #116]	; (8000680 <LcdFxn+0xa8>)
 800060a:	4313      	orrs	r3, r2
 800060c:	614b      	str	r3, [r1, #20]
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <LcdFxn+0xa8>)
 8000610:	695a      	ldr	r2, [r3, #20]
 8000612:	79bb      	ldrb	r3, [r7, #6]
 8000614:	109b      	asrs	r3, r3, #2
 8000616:	f003 0303 	and.w	r3, r3, #3
 800061a:	4919      	ldr	r1, [pc, #100]	; (8000680 <LcdFxn+0xa8>)
 800061c:	4313      	orrs	r3, r2
 800061e:	614b      	str	r3, [r1, #20]
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <LcdFxn+0xac>)
 8000622:	695a      	ldr	r2, [r3, #20]
 8000624:	4917      	ldr	r1, [pc, #92]	; (8000684 <LcdFxn+0xac>)
 8000626:	f64f 73cf 	movw	r3, #65487	; 0xffcf
 800062a:	4013      	ands	r3, r2
 800062c:	614b      	str	r3, [r1, #20]
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <LcdFxn+0xac>)
 8000630:	695a      	ldr	r2, [r3, #20]
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	011b      	lsls	r3, r3, #4
 8000636:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800063a:	4912      	ldr	r1, [pc, #72]	; (8000684 <LcdFxn+0xac>)
 800063c:	4313      	orrs	r3, r2
 800063e:	614b      	str	r3, [r1, #20]
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d004      	beq.n	8000650 <LcdFxn+0x78>
 8000646:	2100      	movs	r1, #0
 8000648:	480f      	ldr	r0, [pc, #60]	; (8000688 <LcdFxn+0xb0>)
 800064a:	f7ff ff31 	bl	80004b0 <SetBit>
 800064e:	e003      	b.n	8000658 <LcdFxn+0x80>
 8000650:	2100      	movs	r1, #0
 8000652:	480d      	ldr	r0, [pc, #52]	; (8000688 <LcdFxn+0xb0>)
 8000654:	f7ff ff3f 	bl	80004d6 <ClrBit>
 8000658:	2101      	movs	r1, #1
 800065a:	480b      	ldr	r0, [pc, #44]	; (8000688 <LcdFxn+0xb0>)
 800065c:	f7ff ff28 	bl	80004b0 <SetBit>
 8000660:	f7ff ff4d 	bl	80004fe <DelayLcd>
 8000664:	2101      	movs	r1, #1
 8000666:	4808      	ldr	r0, [pc, #32]	; (8000688 <LcdFxn+0xb0>)
 8000668:	f7ff ff35 	bl	80004d6 <ClrBit>
 800066c:	f7ff ff47 	bl	80004fe <DelayLcd>
 8000670:	4a03      	ldr	r2, [pc, #12]	; (8000680 <LcdFxn+0xa8>)
 8000672:	89fb      	ldrh	r3, [r7, #14]
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40020400 	.word	0x40020400
 8000684:	40020800 	.word	0x40020800
 8000688:	40020000 	.word	0x40020000

0800068c <lprint>:
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	4619      	mov	r1, r3
 80006a0:	2000      	movs	r0, #0
 80006a2:	f7ff ff99 	bl	80005d8 <LcdFxn>
 80006a6:	e00d      	b.n	80006c4 <lprint+0x38>
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	683a      	ldr	r2, [r7, #0]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4619      	mov	r1, r3
 80006b2:	2001      	movs	r0, #1
 80006b4:	f7ff ff90 	bl	80005d8 <LcdFxn>
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	2b10      	cmp	r3, #16
 80006c2:	d806      	bhi.n	80006d2 <lprint+0x46>
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	683a      	ldr	r2, [r7, #0]
 80006c8:	4413      	add	r3, r2
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1eb      	bne.n	80006a8 <lprint+0x1c>
 80006d0:	e000      	b.n	80006d4 <lprint+0x48>
 80006d2:	bf00      	nop
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <__errno>:
 80006dc:	4b01      	ldr	r3, [pc, #4]	; (80006e4 <__errno+0x8>)
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000000 	.word	0x20000000

080006e8 <__libc_init_array>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	4d0d      	ldr	r5, [pc, #52]	; (8000720 <__libc_init_array+0x38>)
 80006ec:	4c0d      	ldr	r4, [pc, #52]	; (8000724 <__libc_init_array+0x3c>)
 80006ee:	1b64      	subs	r4, r4, r5
 80006f0:	10a4      	asrs	r4, r4, #2
 80006f2:	2600      	movs	r6, #0
 80006f4:	42a6      	cmp	r6, r4
 80006f6:	d109      	bne.n	800070c <__libc_init_array+0x24>
 80006f8:	4d0b      	ldr	r5, [pc, #44]	; (8000728 <__libc_init_array+0x40>)
 80006fa:	4c0c      	ldr	r4, [pc, #48]	; (800072c <__libc_init_array+0x44>)
 80006fc:	f000 fc84 	bl	8001008 <_init>
 8000700:	1b64      	subs	r4, r4, r5
 8000702:	10a4      	asrs	r4, r4, #2
 8000704:	2600      	movs	r6, #0
 8000706:	42a6      	cmp	r6, r4
 8000708:	d105      	bne.n	8000716 <__libc_init_array+0x2e>
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000710:	4798      	blx	r3
 8000712:	3601      	adds	r6, #1
 8000714:	e7ee      	b.n	80006f4 <__libc_init_array+0xc>
 8000716:	f855 3b04 	ldr.w	r3, [r5], #4
 800071a:	4798      	blx	r3
 800071c:	3601      	adds	r6, #1
 800071e:	e7f2      	b.n	8000706 <__libc_init_array+0x1e>
 8000720:	08001060 	.word	0x08001060
 8000724:	08001060 	.word	0x08001060
 8000728:	08001060 	.word	0x08001060
 800072c:	08001064 	.word	0x08001064

08000730 <siprintf>:
 8000730:	b40e      	push	{r1, r2, r3}
 8000732:	b500      	push	{lr}
 8000734:	b09c      	sub	sp, #112	; 0x70
 8000736:	ab1d      	add	r3, sp, #116	; 0x74
 8000738:	9002      	str	r0, [sp, #8]
 800073a:	9006      	str	r0, [sp, #24]
 800073c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <siprintf+0x38>)
 8000742:	9107      	str	r1, [sp, #28]
 8000744:	9104      	str	r1, [sp, #16]
 8000746:	4909      	ldr	r1, [pc, #36]	; (800076c <siprintf+0x3c>)
 8000748:	f853 2b04 	ldr.w	r2, [r3], #4
 800074c:	9105      	str	r1, [sp, #20]
 800074e:	6800      	ldr	r0, [r0, #0]
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	a902      	add	r1, sp, #8
 8000754:	f000 f868 	bl	8000828 <_svfiprintf_r>
 8000758:	9b02      	ldr	r3, [sp, #8]
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	b01c      	add	sp, #112	; 0x70
 8000760:	f85d eb04 	ldr.w	lr, [sp], #4
 8000764:	b003      	add	sp, #12
 8000766:	4770      	bx	lr
 8000768:	20000000 	.word	0x20000000
 800076c:	ffff0208 	.word	0xffff0208

08000770 <__ssputs_r>:
 8000770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000774:	688e      	ldr	r6, [r1, #8]
 8000776:	429e      	cmp	r6, r3
 8000778:	4682      	mov	sl, r0
 800077a:	460c      	mov	r4, r1
 800077c:	4690      	mov	r8, r2
 800077e:	461f      	mov	r7, r3
 8000780:	d838      	bhi.n	80007f4 <__ssputs_r+0x84>
 8000782:	898a      	ldrh	r2, [r1, #12]
 8000784:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000788:	d032      	beq.n	80007f0 <__ssputs_r+0x80>
 800078a:	6825      	ldr	r5, [r4, #0]
 800078c:	6909      	ldr	r1, [r1, #16]
 800078e:	eba5 0901 	sub.w	r9, r5, r1
 8000792:	6965      	ldr	r5, [r4, #20]
 8000794:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000798:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800079c:	3301      	adds	r3, #1
 800079e:	444b      	add	r3, r9
 80007a0:	106d      	asrs	r5, r5, #1
 80007a2:	429d      	cmp	r5, r3
 80007a4:	bf38      	it	cc
 80007a6:	461d      	movcc	r5, r3
 80007a8:	0553      	lsls	r3, r2, #21
 80007aa:	d531      	bpl.n	8000810 <__ssputs_r+0xa0>
 80007ac:	4629      	mov	r1, r5
 80007ae:	f000 fb61 	bl	8000e74 <_malloc_r>
 80007b2:	4606      	mov	r6, r0
 80007b4:	b950      	cbnz	r0, 80007cc <__ssputs_r+0x5c>
 80007b6:	230c      	movs	r3, #12
 80007b8:	f8ca 3000 	str.w	r3, [sl]
 80007bc:	89a3      	ldrh	r3, [r4, #12]
 80007be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c2:	81a3      	strh	r3, [r4, #12]
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295
 80007c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007cc:	6921      	ldr	r1, [r4, #16]
 80007ce:	464a      	mov	r2, r9
 80007d0:	f000 fabe 	bl	8000d50 <memcpy>
 80007d4:	89a3      	ldrh	r3, [r4, #12]
 80007d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80007da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007de:	81a3      	strh	r3, [r4, #12]
 80007e0:	6126      	str	r6, [r4, #16]
 80007e2:	6165      	str	r5, [r4, #20]
 80007e4:	444e      	add	r6, r9
 80007e6:	eba5 0509 	sub.w	r5, r5, r9
 80007ea:	6026      	str	r6, [r4, #0]
 80007ec:	60a5      	str	r5, [r4, #8]
 80007ee:	463e      	mov	r6, r7
 80007f0:	42be      	cmp	r6, r7
 80007f2:	d900      	bls.n	80007f6 <__ssputs_r+0x86>
 80007f4:	463e      	mov	r6, r7
 80007f6:	6820      	ldr	r0, [r4, #0]
 80007f8:	4632      	mov	r2, r6
 80007fa:	4641      	mov	r1, r8
 80007fc:	f000 fab6 	bl	8000d6c <memmove>
 8000800:	68a3      	ldr	r3, [r4, #8]
 8000802:	1b9b      	subs	r3, r3, r6
 8000804:	60a3      	str	r3, [r4, #8]
 8000806:	6823      	ldr	r3, [r4, #0]
 8000808:	4433      	add	r3, r6
 800080a:	6023      	str	r3, [r4, #0]
 800080c:	2000      	movs	r0, #0
 800080e:	e7db      	b.n	80007c8 <__ssputs_r+0x58>
 8000810:	462a      	mov	r2, r5
 8000812:	f000 fba3 	bl	8000f5c <_realloc_r>
 8000816:	4606      	mov	r6, r0
 8000818:	2800      	cmp	r0, #0
 800081a:	d1e1      	bne.n	80007e0 <__ssputs_r+0x70>
 800081c:	6921      	ldr	r1, [r4, #16]
 800081e:	4650      	mov	r0, sl
 8000820:	f000 fabe 	bl	8000da0 <_free_r>
 8000824:	e7c7      	b.n	80007b6 <__ssputs_r+0x46>
	...

08000828 <_svfiprintf_r>:
 8000828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800082c:	4698      	mov	r8, r3
 800082e:	898b      	ldrh	r3, [r1, #12]
 8000830:	061b      	lsls	r3, r3, #24
 8000832:	b09d      	sub	sp, #116	; 0x74
 8000834:	4607      	mov	r7, r0
 8000836:	460d      	mov	r5, r1
 8000838:	4614      	mov	r4, r2
 800083a:	d50e      	bpl.n	800085a <_svfiprintf_r+0x32>
 800083c:	690b      	ldr	r3, [r1, #16]
 800083e:	b963      	cbnz	r3, 800085a <_svfiprintf_r+0x32>
 8000840:	2140      	movs	r1, #64	; 0x40
 8000842:	f000 fb17 	bl	8000e74 <_malloc_r>
 8000846:	6028      	str	r0, [r5, #0]
 8000848:	6128      	str	r0, [r5, #16]
 800084a:	b920      	cbnz	r0, 8000856 <_svfiprintf_r+0x2e>
 800084c:	230c      	movs	r3, #12
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	e0d1      	b.n	80009fa <_svfiprintf_r+0x1d2>
 8000856:	2340      	movs	r3, #64	; 0x40
 8000858:	616b      	str	r3, [r5, #20]
 800085a:	2300      	movs	r3, #0
 800085c:	9309      	str	r3, [sp, #36]	; 0x24
 800085e:	2320      	movs	r3, #32
 8000860:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000864:	f8cd 800c 	str.w	r8, [sp, #12]
 8000868:	2330      	movs	r3, #48	; 0x30
 800086a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000a14 <_svfiprintf_r+0x1ec>
 800086e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000872:	f04f 0901 	mov.w	r9, #1
 8000876:	4623      	mov	r3, r4
 8000878:	469a      	mov	sl, r3
 800087a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800087e:	b10a      	cbz	r2, 8000884 <_svfiprintf_r+0x5c>
 8000880:	2a25      	cmp	r2, #37	; 0x25
 8000882:	d1f9      	bne.n	8000878 <_svfiprintf_r+0x50>
 8000884:	ebba 0b04 	subs.w	fp, sl, r4
 8000888:	d00b      	beq.n	80008a2 <_svfiprintf_r+0x7a>
 800088a:	465b      	mov	r3, fp
 800088c:	4622      	mov	r2, r4
 800088e:	4629      	mov	r1, r5
 8000890:	4638      	mov	r0, r7
 8000892:	f7ff ff6d 	bl	8000770 <__ssputs_r>
 8000896:	3001      	adds	r0, #1
 8000898:	f000 80aa 	beq.w	80009f0 <_svfiprintf_r+0x1c8>
 800089c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800089e:	445a      	add	r2, fp
 80008a0:	9209      	str	r2, [sp, #36]	; 0x24
 80008a2:	f89a 3000 	ldrb.w	r3, [sl]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	f000 80a2 	beq.w	80009f0 <_svfiprintf_r+0x1c8>
 80008ac:	2300      	movs	r3, #0
 80008ae:	f04f 32ff 	mov.w	r2, #4294967295
 80008b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80008b6:	f10a 0a01 	add.w	sl, sl, #1
 80008ba:	9304      	str	r3, [sp, #16]
 80008bc:	9307      	str	r3, [sp, #28]
 80008be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80008c2:	931a      	str	r3, [sp, #104]	; 0x68
 80008c4:	4654      	mov	r4, sl
 80008c6:	2205      	movs	r2, #5
 80008c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80008cc:	4851      	ldr	r0, [pc, #324]	; (8000a14 <_svfiprintf_r+0x1ec>)
 80008ce:	f7ff fc8f 	bl	80001f0 <memchr>
 80008d2:	9a04      	ldr	r2, [sp, #16]
 80008d4:	b9d8      	cbnz	r0, 800090e <_svfiprintf_r+0xe6>
 80008d6:	06d0      	lsls	r0, r2, #27
 80008d8:	bf44      	itt	mi
 80008da:	2320      	movmi	r3, #32
 80008dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80008e0:	0711      	lsls	r1, r2, #28
 80008e2:	bf44      	itt	mi
 80008e4:	232b      	movmi	r3, #43	; 0x2b
 80008e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80008ea:	f89a 3000 	ldrb.w	r3, [sl]
 80008ee:	2b2a      	cmp	r3, #42	; 0x2a
 80008f0:	d015      	beq.n	800091e <_svfiprintf_r+0xf6>
 80008f2:	9a07      	ldr	r2, [sp, #28]
 80008f4:	4654      	mov	r4, sl
 80008f6:	2000      	movs	r0, #0
 80008f8:	f04f 0c0a 	mov.w	ip, #10
 80008fc:	4621      	mov	r1, r4
 80008fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000902:	3b30      	subs	r3, #48	; 0x30
 8000904:	2b09      	cmp	r3, #9
 8000906:	d94e      	bls.n	80009a6 <_svfiprintf_r+0x17e>
 8000908:	b1b0      	cbz	r0, 8000938 <_svfiprintf_r+0x110>
 800090a:	9207      	str	r2, [sp, #28]
 800090c:	e014      	b.n	8000938 <_svfiprintf_r+0x110>
 800090e:	eba0 0308 	sub.w	r3, r0, r8
 8000912:	fa09 f303 	lsl.w	r3, r9, r3
 8000916:	4313      	orrs	r3, r2
 8000918:	9304      	str	r3, [sp, #16]
 800091a:	46a2      	mov	sl, r4
 800091c:	e7d2      	b.n	80008c4 <_svfiprintf_r+0x9c>
 800091e:	9b03      	ldr	r3, [sp, #12]
 8000920:	1d19      	adds	r1, r3, #4
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	9103      	str	r1, [sp, #12]
 8000926:	2b00      	cmp	r3, #0
 8000928:	bfbb      	ittet	lt
 800092a:	425b      	neglt	r3, r3
 800092c:	f042 0202 	orrlt.w	r2, r2, #2
 8000930:	9307      	strge	r3, [sp, #28]
 8000932:	9307      	strlt	r3, [sp, #28]
 8000934:	bfb8      	it	lt
 8000936:	9204      	strlt	r2, [sp, #16]
 8000938:	7823      	ldrb	r3, [r4, #0]
 800093a:	2b2e      	cmp	r3, #46	; 0x2e
 800093c:	d10c      	bne.n	8000958 <_svfiprintf_r+0x130>
 800093e:	7863      	ldrb	r3, [r4, #1]
 8000940:	2b2a      	cmp	r3, #42	; 0x2a
 8000942:	d135      	bne.n	80009b0 <_svfiprintf_r+0x188>
 8000944:	9b03      	ldr	r3, [sp, #12]
 8000946:	1d1a      	adds	r2, r3, #4
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	9203      	str	r2, [sp, #12]
 800094c:	2b00      	cmp	r3, #0
 800094e:	bfb8      	it	lt
 8000950:	f04f 33ff 	movlt.w	r3, #4294967295
 8000954:	3402      	adds	r4, #2
 8000956:	9305      	str	r3, [sp, #20]
 8000958:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8000a18 <_svfiprintf_r+0x1f0>
 800095c:	7821      	ldrb	r1, [r4, #0]
 800095e:	2203      	movs	r2, #3
 8000960:	4650      	mov	r0, sl
 8000962:	f7ff fc45 	bl	80001f0 <memchr>
 8000966:	b140      	cbz	r0, 800097a <_svfiprintf_r+0x152>
 8000968:	2340      	movs	r3, #64	; 0x40
 800096a:	eba0 000a 	sub.w	r0, r0, sl
 800096e:	fa03 f000 	lsl.w	r0, r3, r0
 8000972:	9b04      	ldr	r3, [sp, #16]
 8000974:	4303      	orrs	r3, r0
 8000976:	3401      	adds	r4, #1
 8000978:	9304      	str	r3, [sp, #16]
 800097a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800097e:	4827      	ldr	r0, [pc, #156]	; (8000a1c <_svfiprintf_r+0x1f4>)
 8000980:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000984:	2206      	movs	r2, #6
 8000986:	f7ff fc33 	bl	80001f0 <memchr>
 800098a:	2800      	cmp	r0, #0
 800098c:	d038      	beq.n	8000a00 <_svfiprintf_r+0x1d8>
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <_svfiprintf_r+0x1f8>)
 8000990:	bb1b      	cbnz	r3, 80009da <_svfiprintf_r+0x1b2>
 8000992:	9b03      	ldr	r3, [sp, #12]
 8000994:	3307      	adds	r3, #7
 8000996:	f023 0307 	bic.w	r3, r3, #7
 800099a:	3308      	adds	r3, #8
 800099c:	9303      	str	r3, [sp, #12]
 800099e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80009a0:	4433      	add	r3, r6
 80009a2:	9309      	str	r3, [sp, #36]	; 0x24
 80009a4:	e767      	b.n	8000876 <_svfiprintf_r+0x4e>
 80009a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80009aa:	460c      	mov	r4, r1
 80009ac:	2001      	movs	r0, #1
 80009ae:	e7a5      	b.n	80008fc <_svfiprintf_r+0xd4>
 80009b0:	2300      	movs	r3, #0
 80009b2:	3401      	adds	r4, #1
 80009b4:	9305      	str	r3, [sp, #20]
 80009b6:	4619      	mov	r1, r3
 80009b8:	f04f 0c0a 	mov.w	ip, #10
 80009bc:	4620      	mov	r0, r4
 80009be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80009c2:	3a30      	subs	r2, #48	; 0x30
 80009c4:	2a09      	cmp	r2, #9
 80009c6:	d903      	bls.n	80009d0 <_svfiprintf_r+0x1a8>
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d0c5      	beq.n	8000958 <_svfiprintf_r+0x130>
 80009cc:	9105      	str	r1, [sp, #20]
 80009ce:	e7c3      	b.n	8000958 <_svfiprintf_r+0x130>
 80009d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80009d4:	4604      	mov	r4, r0
 80009d6:	2301      	movs	r3, #1
 80009d8:	e7f0      	b.n	80009bc <_svfiprintf_r+0x194>
 80009da:	ab03      	add	r3, sp, #12
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	462a      	mov	r2, r5
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <_svfiprintf_r+0x1fc>)
 80009e2:	a904      	add	r1, sp, #16
 80009e4:	4638      	mov	r0, r7
 80009e6:	f3af 8000 	nop.w
 80009ea:	1c42      	adds	r2, r0, #1
 80009ec:	4606      	mov	r6, r0
 80009ee:	d1d6      	bne.n	800099e <_svfiprintf_r+0x176>
 80009f0:	89ab      	ldrh	r3, [r5, #12]
 80009f2:	065b      	lsls	r3, r3, #25
 80009f4:	f53f af2c 	bmi.w	8000850 <_svfiprintf_r+0x28>
 80009f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80009fa:	b01d      	add	sp, #116	; 0x74
 80009fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a00:	ab03      	add	r3, sp, #12
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	462a      	mov	r2, r5
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <_svfiprintf_r+0x1fc>)
 8000a08:	a904      	add	r1, sp, #16
 8000a0a:	4638      	mov	r0, r7
 8000a0c:	f000 f87a 	bl	8000b04 <_printf_i>
 8000a10:	e7eb      	b.n	80009ea <_svfiprintf_r+0x1c2>
 8000a12:	bf00      	nop
 8000a14:	0800102a 	.word	0x0800102a
 8000a18:	08001030 	.word	0x08001030
 8000a1c:	08001034 	.word	0x08001034
 8000a20:	00000000 	.word	0x00000000
 8000a24:	08000771 	.word	0x08000771

08000a28 <_printf_common>:
 8000a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a2c:	4616      	mov	r6, r2
 8000a2e:	4699      	mov	r9, r3
 8000a30:	688a      	ldr	r2, [r1, #8]
 8000a32:	690b      	ldr	r3, [r1, #16]
 8000a34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	bfb8      	it	lt
 8000a3c:	4613      	movlt	r3, r2
 8000a3e:	6033      	str	r3, [r6, #0]
 8000a40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000a44:	4607      	mov	r7, r0
 8000a46:	460c      	mov	r4, r1
 8000a48:	b10a      	cbz	r2, 8000a4e <_printf_common+0x26>
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	6033      	str	r3, [r6, #0]
 8000a4e:	6823      	ldr	r3, [r4, #0]
 8000a50:	0699      	lsls	r1, r3, #26
 8000a52:	bf42      	ittt	mi
 8000a54:	6833      	ldrmi	r3, [r6, #0]
 8000a56:	3302      	addmi	r3, #2
 8000a58:	6033      	strmi	r3, [r6, #0]
 8000a5a:	6825      	ldr	r5, [r4, #0]
 8000a5c:	f015 0506 	ands.w	r5, r5, #6
 8000a60:	d106      	bne.n	8000a70 <_printf_common+0x48>
 8000a62:	f104 0a19 	add.w	sl, r4, #25
 8000a66:	68e3      	ldr	r3, [r4, #12]
 8000a68:	6832      	ldr	r2, [r6, #0]
 8000a6a:	1a9b      	subs	r3, r3, r2
 8000a6c:	42ab      	cmp	r3, r5
 8000a6e:	dc26      	bgt.n	8000abe <_printf_common+0x96>
 8000a70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000a74:	1e13      	subs	r3, r2, #0
 8000a76:	6822      	ldr	r2, [r4, #0]
 8000a78:	bf18      	it	ne
 8000a7a:	2301      	movne	r3, #1
 8000a7c:	0692      	lsls	r2, r2, #26
 8000a7e:	d42b      	bmi.n	8000ad8 <_printf_common+0xb0>
 8000a80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000a84:	4649      	mov	r1, r9
 8000a86:	4638      	mov	r0, r7
 8000a88:	47c0      	blx	r8
 8000a8a:	3001      	adds	r0, #1
 8000a8c:	d01e      	beq.n	8000acc <_printf_common+0xa4>
 8000a8e:	6823      	ldr	r3, [r4, #0]
 8000a90:	68e5      	ldr	r5, [r4, #12]
 8000a92:	6832      	ldr	r2, [r6, #0]
 8000a94:	f003 0306 	and.w	r3, r3, #6
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	bf08      	it	eq
 8000a9c:	1aad      	subeq	r5, r5, r2
 8000a9e:	68a3      	ldr	r3, [r4, #8]
 8000aa0:	6922      	ldr	r2, [r4, #16]
 8000aa2:	bf0c      	ite	eq
 8000aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000aa8:	2500      	movne	r5, #0
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	bfc4      	itt	gt
 8000aae:	1a9b      	subgt	r3, r3, r2
 8000ab0:	18ed      	addgt	r5, r5, r3
 8000ab2:	2600      	movs	r6, #0
 8000ab4:	341a      	adds	r4, #26
 8000ab6:	42b5      	cmp	r5, r6
 8000ab8:	d11a      	bne.n	8000af0 <_printf_common+0xc8>
 8000aba:	2000      	movs	r0, #0
 8000abc:	e008      	b.n	8000ad0 <_printf_common+0xa8>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	4652      	mov	r2, sl
 8000ac2:	4649      	mov	r1, r9
 8000ac4:	4638      	mov	r0, r7
 8000ac6:	47c0      	blx	r8
 8000ac8:	3001      	adds	r0, #1
 8000aca:	d103      	bne.n	8000ad4 <_printf_common+0xac>
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad4:	3501      	adds	r5, #1
 8000ad6:	e7c6      	b.n	8000a66 <_printf_common+0x3e>
 8000ad8:	18e1      	adds	r1, r4, r3
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	2030      	movs	r0, #48	; 0x30
 8000ade:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000ae2:	4422      	add	r2, r4
 8000ae4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000ae8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000aec:	3302      	adds	r3, #2
 8000aee:	e7c7      	b.n	8000a80 <_printf_common+0x58>
 8000af0:	2301      	movs	r3, #1
 8000af2:	4622      	mov	r2, r4
 8000af4:	4649      	mov	r1, r9
 8000af6:	4638      	mov	r0, r7
 8000af8:	47c0      	blx	r8
 8000afa:	3001      	adds	r0, #1
 8000afc:	d0e6      	beq.n	8000acc <_printf_common+0xa4>
 8000afe:	3601      	adds	r6, #1
 8000b00:	e7d9      	b.n	8000ab6 <_printf_common+0x8e>
	...

08000b04 <_printf_i>:
 8000b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	7e0f      	ldrb	r7, [r1, #24]
 8000b0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000b0c:	2f78      	cmp	r7, #120	; 0x78
 8000b0e:	4691      	mov	r9, r2
 8000b10:	4680      	mov	r8, r0
 8000b12:	460c      	mov	r4, r1
 8000b14:	469a      	mov	sl, r3
 8000b16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000b1a:	d807      	bhi.n	8000b2c <_printf_i+0x28>
 8000b1c:	2f62      	cmp	r7, #98	; 0x62
 8000b1e:	d80a      	bhi.n	8000b36 <_printf_i+0x32>
 8000b20:	2f00      	cmp	r7, #0
 8000b22:	f000 80d8 	beq.w	8000cd6 <_printf_i+0x1d2>
 8000b26:	2f58      	cmp	r7, #88	; 0x58
 8000b28:	f000 80a3 	beq.w	8000c72 <_printf_i+0x16e>
 8000b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000b30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000b34:	e03a      	b.n	8000bac <_printf_i+0xa8>
 8000b36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000b3a:	2b15      	cmp	r3, #21
 8000b3c:	d8f6      	bhi.n	8000b2c <_printf_i+0x28>
 8000b3e:	a101      	add	r1, pc, #4	; (adr r1, 8000b44 <_printf_i+0x40>)
 8000b40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000b44:	08000b9d 	.word	0x08000b9d
 8000b48:	08000bb1 	.word	0x08000bb1
 8000b4c:	08000b2d 	.word	0x08000b2d
 8000b50:	08000b2d 	.word	0x08000b2d
 8000b54:	08000b2d 	.word	0x08000b2d
 8000b58:	08000b2d 	.word	0x08000b2d
 8000b5c:	08000bb1 	.word	0x08000bb1
 8000b60:	08000b2d 	.word	0x08000b2d
 8000b64:	08000b2d 	.word	0x08000b2d
 8000b68:	08000b2d 	.word	0x08000b2d
 8000b6c:	08000b2d 	.word	0x08000b2d
 8000b70:	08000cbd 	.word	0x08000cbd
 8000b74:	08000be1 	.word	0x08000be1
 8000b78:	08000c9f 	.word	0x08000c9f
 8000b7c:	08000b2d 	.word	0x08000b2d
 8000b80:	08000b2d 	.word	0x08000b2d
 8000b84:	08000cdf 	.word	0x08000cdf
 8000b88:	08000b2d 	.word	0x08000b2d
 8000b8c:	08000be1 	.word	0x08000be1
 8000b90:	08000b2d 	.word	0x08000b2d
 8000b94:	08000b2d 	.word	0x08000b2d
 8000b98:	08000ca7 	.word	0x08000ca7
 8000b9c:	682b      	ldr	r3, [r5, #0]
 8000b9e:	1d1a      	adds	r2, r3, #4
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	602a      	str	r2, [r5, #0]
 8000ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000bac:	2301      	movs	r3, #1
 8000bae:	e0a3      	b.n	8000cf8 <_printf_i+0x1f4>
 8000bb0:	6820      	ldr	r0, [r4, #0]
 8000bb2:	6829      	ldr	r1, [r5, #0]
 8000bb4:	0606      	lsls	r6, r0, #24
 8000bb6:	f101 0304 	add.w	r3, r1, #4
 8000bba:	d50a      	bpl.n	8000bd2 <_printf_i+0xce>
 8000bbc:	680e      	ldr	r6, [r1, #0]
 8000bbe:	602b      	str	r3, [r5, #0]
 8000bc0:	2e00      	cmp	r6, #0
 8000bc2:	da03      	bge.n	8000bcc <_printf_i+0xc8>
 8000bc4:	232d      	movs	r3, #45	; 0x2d
 8000bc6:	4276      	negs	r6, r6
 8000bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000bcc:	485e      	ldr	r0, [pc, #376]	; (8000d48 <_printf_i+0x244>)
 8000bce:	230a      	movs	r3, #10
 8000bd0:	e019      	b.n	8000c06 <_printf_i+0x102>
 8000bd2:	680e      	ldr	r6, [r1, #0]
 8000bd4:	602b      	str	r3, [r5, #0]
 8000bd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000bda:	bf18      	it	ne
 8000bdc:	b236      	sxthne	r6, r6
 8000bde:	e7ef      	b.n	8000bc0 <_printf_i+0xbc>
 8000be0:	682b      	ldr	r3, [r5, #0]
 8000be2:	6820      	ldr	r0, [r4, #0]
 8000be4:	1d19      	adds	r1, r3, #4
 8000be6:	6029      	str	r1, [r5, #0]
 8000be8:	0601      	lsls	r1, r0, #24
 8000bea:	d501      	bpl.n	8000bf0 <_printf_i+0xec>
 8000bec:	681e      	ldr	r6, [r3, #0]
 8000bee:	e002      	b.n	8000bf6 <_printf_i+0xf2>
 8000bf0:	0646      	lsls	r6, r0, #25
 8000bf2:	d5fb      	bpl.n	8000bec <_printf_i+0xe8>
 8000bf4:	881e      	ldrh	r6, [r3, #0]
 8000bf6:	4854      	ldr	r0, [pc, #336]	; (8000d48 <_printf_i+0x244>)
 8000bf8:	2f6f      	cmp	r7, #111	; 0x6f
 8000bfa:	bf0c      	ite	eq
 8000bfc:	2308      	moveq	r3, #8
 8000bfe:	230a      	movne	r3, #10
 8000c00:	2100      	movs	r1, #0
 8000c02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000c06:	6865      	ldr	r5, [r4, #4]
 8000c08:	60a5      	str	r5, [r4, #8]
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	bfa2      	ittt	ge
 8000c0e:	6821      	ldrge	r1, [r4, #0]
 8000c10:	f021 0104 	bicge.w	r1, r1, #4
 8000c14:	6021      	strge	r1, [r4, #0]
 8000c16:	b90e      	cbnz	r6, 8000c1c <_printf_i+0x118>
 8000c18:	2d00      	cmp	r5, #0
 8000c1a:	d04d      	beq.n	8000cb8 <_printf_i+0x1b4>
 8000c1c:	4615      	mov	r5, r2
 8000c1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8000c22:	fb03 6711 	mls	r7, r3, r1, r6
 8000c26:	5dc7      	ldrb	r7, [r0, r7]
 8000c28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000c2c:	4637      	mov	r7, r6
 8000c2e:	42bb      	cmp	r3, r7
 8000c30:	460e      	mov	r6, r1
 8000c32:	d9f4      	bls.n	8000c1e <_printf_i+0x11a>
 8000c34:	2b08      	cmp	r3, #8
 8000c36:	d10b      	bne.n	8000c50 <_printf_i+0x14c>
 8000c38:	6823      	ldr	r3, [r4, #0]
 8000c3a:	07de      	lsls	r6, r3, #31
 8000c3c:	d508      	bpl.n	8000c50 <_printf_i+0x14c>
 8000c3e:	6923      	ldr	r3, [r4, #16]
 8000c40:	6861      	ldr	r1, [r4, #4]
 8000c42:	4299      	cmp	r1, r3
 8000c44:	bfde      	ittt	le
 8000c46:	2330      	movle	r3, #48	; 0x30
 8000c48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000c4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000c50:	1b52      	subs	r2, r2, r5
 8000c52:	6122      	str	r2, [r4, #16]
 8000c54:	f8cd a000 	str.w	sl, [sp]
 8000c58:	464b      	mov	r3, r9
 8000c5a:	aa03      	add	r2, sp, #12
 8000c5c:	4621      	mov	r1, r4
 8000c5e:	4640      	mov	r0, r8
 8000c60:	f7ff fee2 	bl	8000a28 <_printf_common>
 8000c64:	3001      	adds	r0, #1
 8000c66:	d14c      	bne.n	8000d02 <_printf_i+0x1fe>
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	b004      	add	sp, #16
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	4835      	ldr	r0, [pc, #212]	; (8000d48 <_printf_i+0x244>)
 8000c74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000c78:	6829      	ldr	r1, [r5, #0]
 8000c7a:	6823      	ldr	r3, [r4, #0]
 8000c7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8000c80:	6029      	str	r1, [r5, #0]
 8000c82:	061d      	lsls	r5, r3, #24
 8000c84:	d514      	bpl.n	8000cb0 <_printf_i+0x1ac>
 8000c86:	07df      	lsls	r7, r3, #31
 8000c88:	bf44      	itt	mi
 8000c8a:	f043 0320 	orrmi.w	r3, r3, #32
 8000c8e:	6023      	strmi	r3, [r4, #0]
 8000c90:	b91e      	cbnz	r6, 8000c9a <_printf_i+0x196>
 8000c92:	6823      	ldr	r3, [r4, #0]
 8000c94:	f023 0320 	bic.w	r3, r3, #32
 8000c98:	6023      	str	r3, [r4, #0]
 8000c9a:	2310      	movs	r3, #16
 8000c9c:	e7b0      	b.n	8000c00 <_printf_i+0xfc>
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	f043 0320 	orr.w	r3, r3, #32
 8000ca4:	6023      	str	r3, [r4, #0]
 8000ca6:	2378      	movs	r3, #120	; 0x78
 8000ca8:	4828      	ldr	r0, [pc, #160]	; (8000d4c <_printf_i+0x248>)
 8000caa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000cae:	e7e3      	b.n	8000c78 <_printf_i+0x174>
 8000cb0:	0659      	lsls	r1, r3, #25
 8000cb2:	bf48      	it	mi
 8000cb4:	b2b6      	uxthmi	r6, r6
 8000cb6:	e7e6      	b.n	8000c86 <_printf_i+0x182>
 8000cb8:	4615      	mov	r5, r2
 8000cba:	e7bb      	b.n	8000c34 <_printf_i+0x130>
 8000cbc:	682b      	ldr	r3, [r5, #0]
 8000cbe:	6826      	ldr	r6, [r4, #0]
 8000cc0:	6961      	ldr	r1, [r4, #20]
 8000cc2:	1d18      	adds	r0, r3, #4
 8000cc4:	6028      	str	r0, [r5, #0]
 8000cc6:	0635      	lsls	r5, r6, #24
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	d501      	bpl.n	8000cd0 <_printf_i+0x1cc>
 8000ccc:	6019      	str	r1, [r3, #0]
 8000cce:	e002      	b.n	8000cd6 <_printf_i+0x1d2>
 8000cd0:	0670      	lsls	r0, r6, #25
 8000cd2:	d5fb      	bpl.n	8000ccc <_printf_i+0x1c8>
 8000cd4:	8019      	strh	r1, [r3, #0]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	6123      	str	r3, [r4, #16]
 8000cda:	4615      	mov	r5, r2
 8000cdc:	e7ba      	b.n	8000c54 <_printf_i+0x150>
 8000cde:	682b      	ldr	r3, [r5, #0]
 8000ce0:	1d1a      	adds	r2, r3, #4
 8000ce2:	602a      	str	r2, [r5, #0]
 8000ce4:	681d      	ldr	r5, [r3, #0]
 8000ce6:	6862      	ldr	r2, [r4, #4]
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4628      	mov	r0, r5
 8000cec:	f7ff fa80 	bl	80001f0 <memchr>
 8000cf0:	b108      	cbz	r0, 8000cf6 <_printf_i+0x1f2>
 8000cf2:	1b40      	subs	r0, r0, r5
 8000cf4:	6060      	str	r0, [r4, #4]
 8000cf6:	6863      	ldr	r3, [r4, #4]
 8000cf8:	6123      	str	r3, [r4, #16]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000d00:	e7a8      	b.n	8000c54 <_printf_i+0x150>
 8000d02:	6923      	ldr	r3, [r4, #16]
 8000d04:	462a      	mov	r2, r5
 8000d06:	4649      	mov	r1, r9
 8000d08:	4640      	mov	r0, r8
 8000d0a:	47d0      	blx	sl
 8000d0c:	3001      	adds	r0, #1
 8000d0e:	d0ab      	beq.n	8000c68 <_printf_i+0x164>
 8000d10:	6823      	ldr	r3, [r4, #0]
 8000d12:	079b      	lsls	r3, r3, #30
 8000d14:	d413      	bmi.n	8000d3e <_printf_i+0x23a>
 8000d16:	68e0      	ldr	r0, [r4, #12]
 8000d18:	9b03      	ldr	r3, [sp, #12]
 8000d1a:	4298      	cmp	r0, r3
 8000d1c:	bfb8      	it	lt
 8000d1e:	4618      	movlt	r0, r3
 8000d20:	e7a4      	b.n	8000c6c <_printf_i+0x168>
 8000d22:	2301      	movs	r3, #1
 8000d24:	4632      	mov	r2, r6
 8000d26:	4649      	mov	r1, r9
 8000d28:	4640      	mov	r0, r8
 8000d2a:	47d0      	blx	sl
 8000d2c:	3001      	adds	r0, #1
 8000d2e:	d09b      	beq.n	8000c68 <_printf_i+0x164>
 8000d30:	3501      	adds	r5, #1
 8000d32:	68e3      	ldr	r3, [r4, #12]
 8000d34:	9903      	ldr	r1, [sp, #12]
 8000d36:	1a5b      	subs	r3, r3, r1
 8000d38:	42ab      	cmp	r3, r5
 8000d3a:	dcf2      	bgt.n	8000d22 <_printf_i+0x21e>
 8000d3c:	e7eb      	b.n	8000d16 <_printf_i+0x212>
 8000d3e:	2500      	movs	r5, #0
 8000d40:	f104 0619 	add.w	r6, r4, #25
 8000d44:	e7f5      	b.n	8000d32 <_printf_i+0x22e>
 8000d46:	bf00      	nop
 8000d48:	0800103b 	.word	0x0800103b
 8000d4c:	0800104c 	.word	0x0800104c

08000d50 <memcpy>:
 8000d50:	440a      	add	r2, r1
 8000d52:	4291      	cmp	r1, r2
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	d100      	bne.n	8000d5c <memcpy+0xc>
 8000d5a:	4770      	bx	lr
 8000d5c:	b510      	push	{r4, lr}
 8000d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000d62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000d66:	4291      	cmp	r1, r2
 8000d68:	d1f9      	bne.n	8000d5e <memcpy+0xe>
 8000d6a:	bd10      	pop	{r4, pc}

08000d6c <memmove>:
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	b510      	push	{r4, lr}
 8000d70:	eb01 0402 	add.w	r4, r1, r2
 8000d74:	d902      	bls.n	8000d7c <memmove+0x10>
 8000d76:	4284      	cmp	r4, r0
 8000d78:	4623      	mov	r3, r4
 8000d7a:	d807      	bhi.n	8000d8c <memmove+0x20>
 8000d7c:	1e43      	subs	r3, r0, #1
 8000d7e:	42a1      	cmp	r1, r4
 8000d80:	d008      	beq.n	8000d94 <memmove+0x28>
 8000d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000d86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000d8a:	e7f8      	b.n	8000d7e <memmove+0x12>
 8000d8c:	4402      	add	r2, r0
 8000d8e:	4601      	mov	r1, r0
 8000d90:	428a      	cmp	r2, r1
 8000d92:	d100      	bne.n	8000d96 <memmove+0x2a>
 8000d94:	bd10      	pop	{r4, pc}
 8000d96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000d9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000d9e:	e7f7      	b.n	8000d90 <memmove+0x24>

08000da0 <_free_r>:
 8000da0:	b538      	push	{r3, r4, r5, lr}
 8000da2:	4605      	mov	r5, r0
 8000da4:	2900      	cmp	r1, #0
 8000da6:	d041      	beq.n	8000e2c <_free_r+0x8c>
 8000da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000dac:	1f0c      	subs	r4, r1, #4
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	bfb8      	it	lt
 8000db2:	18e4      	addlt	r4, r4, r3
 8000db4:	f000 f912 	bl	8000fdc <__malloc_lock>
 8000db8:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <_free_r+0x90>)
 8000dba:	6813      	ldr	r3, [r2, #0]
 8000dbc:	b933      	cbnz	r3, 8000dcc <_free_r+0x2c>
 8000dbe:	6063      	str	r3, [r4, #4]
 8000dc0:	6014      	str	r4, [r2, #0]
 8000dc2:	4628      	mov	r0, r5
 8000dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc8:	f000 b90e 	b.w	8000fe8 <__malloc_unlock>
 8000dcc:	42a3      	cmp	r3, r4
 8000dce:	d908      	bls.n	8000de2 <_free_r+0x42>
 8000dd0:	6820      	ldr	r0, [r4, #0]
 8000dd2:	1821      	adds	r1, r4, r0
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	bf01      	itttt	eq
 8000dd8:	6819      	ldreq	r1, [r3, #0]
 8000dda:	685b      	ldreq	r3, [r3, #4]
 8000ddc:	1809      	addeq	r1, r1, r0
 8000dde:	6021      	streq	r1, [r4, #0]
 8000de0:	e7ed      	b.n	8000dbe <_free_r+0x1e>
 8000de2:	461a      	mov	r2, r3
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	b10b      	cbz	r3, 8000dec <_free_r+0x4c>
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d9fa      	bls.n	8000de2 <_free_r+0x42>
 8000dec:	6811      	ldr	r1, [r2, #0]
 8000dee:	1850      	adds	r0, r2, r1
 8000df0:	42a0      	cmp	r0, r4
 8000df2:	d10b      	bne.n	8000e0c <_free_r+0x6c>
 8000df4:	6820      	ldr	r0, [r4, #0]
 8000df6:	4401      	add	r1, r0
 8000df8:	1850      	adds	r0, r2, r1
 8000dfa:	4283      	cmp	r3, r0
 8000dfc:	6011      	str	r1, [r2, #0]
 8000dfe:	d1e0      	bne.n	8000dc2 <_free_r+0x22>
 8000e00:	6818      	ldr	r0, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	6053      	str	r3, [r2, #4]
 8000e06:	4401      	add	r1, r0
 8000e08:	6011      	str	r1, [r2, #0]
 8000e0a:	e7da      	b.n	8000dc2 <_free_r+0x22>
 8000e0c:	d902      	bls.n	8000e14 <_free_r+0x74>
 8000e0e:	230c      	movs	r3, #12
 8000e10:	602b      	str	r3, [r5, #0]
 8000e12:	e7d6      	b.n	8000dc2 <_free_r+0x22>
 8000e14:	6820      	ldr	r0, [r4, #0]
 8000e16:	1821      	adds	r1, r4, r0
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	bf04      	itt	eq
 8000e1c:	6819      	ldreq	r1, [r3, #0]
 8000e1e:	685b      	ldreq	r3, [r3, #4]
 8000e20:	6063      	str	r3, [r4, #4]
 8000e22:	bf04      	itt	eq
 8000e24:	1809      	addeq	r1, r1, r0
 8000e26:	6021      	streq	r1, [r4, #0]
 8000e28:	6054      	str	r4, [r2, #4]
 8000e2a:	e7ca      	b.n	8000dc2 <_free_r+0x22>
 8000e2c:	bd38      	pop	{r3, r4, r5, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000088 	.word	0x20000088

08000e34 <sbrk_aligned>:
 8000e34:	b570      	push	{r4, r5, r6, lr}
 8000e36:	4e0e      	ldr	r6, [pc, #56]	; (8000e70 <sbrk_aligned+0x3c>)
 8000e38:	460c      	mov	r4, r1
 8000e3a:	6831      	ldr	r1, [r6, #0]
 8000e3c:	4605      	mov	r5, r0
 8000e3e:	b911      	cbnz	r1, 8000e46 <sbrk_aligned+0x12>
 8000e40:	f000 f8bc 	bl	8000fbc <_sbrk_r>
 8000e44:	6030      	str	r0, [r6, #0]
 8000e46:	4621      	mov	r1, r4
 8000e48:	4628      	mov	r0, r5
 8000e4a:	f000 f8b7 	bl	8000fbc <_sbrk_r>
 8000e4e:	1c43      	adds	r3, r0, #1
 8000e50:	d00a      	beq.n	8000e68 <sbrk_aligned+0x34>
 8000e52:	1cc4      	adds	r4, r0, #3
 8000e54:	f024 0403 	bic.w	r4, r4, #3
 8000e58:	42a0      	cmp	r0, r4
 8000e5a:	d007      	beq.n	8000e6c <sbrk_aligned+0x38>
 8000e5c:	1a21      	subs	r1, r4, r0
 8000e5e:	4628      	mov	r0, r5
 8000e60:	f000 f8ac 	bl	8000fbc <_sbrk_r>
 8000e64:	3001      	adds	r0, #1
 8000e66:	d101      	bne.n	8000e6c <sbrk_aligned+0x38>
 8000e68:	f04f 34ff 	mov.w	r4, #4294967295
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	bd70      	pop	{r4, r5, r6, pc}
 8000e70:	2000008c 	.word	0x2000008c

08000e74 <_malloc_r>:
 8000e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e78:	1ccd      	adds	r5, r1, #3
 8000e7a:	f025 0503 	bic.w	r5, r5, #3
 8000e7e:	3508      	adds	r5, #8
 8000e80:	2d0c      	cmp	r5, #12
 8000e82:	bf38      	it	cc
 8000e84:	250c      	movcc	r5, #12
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	4607      	mov	r7, r0
 8000e8a:	db01      	blt.n	8000e90 <_malloc_r+0x1c>
 8000e8c:	42a9      	cmp	r1, r5
 8000e8e:	d905      	bls.n	8000e9c <_malloc_r+0x28>
 8000e90:	230c      	movs	r3, #12
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	2600      	movs	r6, #0
 8000e96:	4630      	mov	r0, r6
 8000e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e9c:	4e2e      	ldr	r6, [pc, #184]	; (8000f58 <_malloc_r+0xe4>)
 8000e9e:	f000 f89d 	bl	8000fdc <__malloc_lock>
 8000ea2:	6833      	ldr	r3, [r6, #0]
 8000ea4:	461c      	mov	r4, r3
 8000ea6:	bb34      	cbnz	r4, 8000ef6 <_malloc_r+0x82>
 8000ea8:	4629      	mov	r1, r5
 8000eaa:	4638      	mov	r0, r7
 8000eac:	f7ff ffc2 	bl	8000e34 <sbrk_aligned>
 8000eb0:	1c43      	adds	r3, r0, #1
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	d14d      	bne.n	8000f52 <_malloc_r+0xde>
 8000eb6:	6834      	ldr	r4, [r6, #0]
 8000eb8:	4626      	mov	r6, r4
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d140      	bne.n	8000f40 <_malloc_r+0xcc>
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	4631      	mov	r1, r6
 8000ec2:	4638      	mov	r0, r7
 8000ec4:	eb04 0803 	add.w	r8, r4, r3
 8000ec8:	f000 f878 	bl	8000fbc <_sbrk_r>
 8000ecc:	4580      	cmp	r8, r0
 8000ece:	d13a      	bne.n	8000f46 <_malloc_r+0xd2>
 8000ed0:	6821      	ldr	r1, [r4, #0]
 8000ed2:	3503      	adds	r5, #3
 8000ed4:	1a6d      	subs	r5, r5, r1
 8000ed6:	f025 0503 	bic.w	r5, r5, #3
 8000eda:	3508      	adds	r5, #8
 8000edc:	2d0c      	cmp	r5, #12
 8000ede:	bf38      	it	cc
 8000ee0:	250c      	movcc	r5, #12
 8000ee2:	4629      	mov	r1, r5
 8000ee4:	4638      	mov	r0, r7
 8000ee6:	f7ff ffa5 	bl	8000e34 <sbrk_aligned>
 8000eea:	3001      	adds	r0, #1
 8000eec:	d02b      	beq.n	8000f46 <_malloc_r+0xd2>
 8000eee:	6823      	ldr	r3, [r4, #0]
 8000ef0:	442b      	add	r3, r5
 8000ef2:	6023      	str	r3, [r4, #0]
 8000ef4:	e00e      	b.n	8000f14 <_malloc_r+0xa0>
 8000ef6:	6822      	ldr	r2, [r4, #0]
 8000ef8:	1b52      	subs	r2, r2, r5
 8000efa:	d41e      	bmi.n	8000f3a <_malloc_r+0xc6>
 8000efc:	2a0b      	cmp	r2, #11
 8000efe:	d916      	bls.n	8000f2e <_malloc_r+0xba>
 8000f00:	1961      	adds	r1, r4, r5
 8000f02:	42a3      	cmp	r3, r4
 8000f04:	6025      	str	r5, [r4, #0]
 8000f06:	bf18      	it	ne
 8000f08:	6059      	strne	r1, [r3, #4]
 8000f0a:	6863      	ldr	r3, [r4, #4]
 8000f0c:	bf08      	it	eq
 8000f0e:	6031      	streq	r1, [r6, #0]
 8000f10:	5162      	str	r2, [r4, r5]
 8000f12:	604b      	str	r3, [r1, #4]
 8000f14:	4638      	mov	r0, r7
 8000f16:	f104 060b 	add.w	r6, r4, #11
 8000f1a:	f000 f865 	bl	8000fe8 <__malloc_unlock>
 8000f1e:	f026 0607 	bic.w	r6, r6, #7
 8000f22:	1d23      	adds	r3, r4, #4
 8000f24:	1af2      	subs	r2, r6, r3
 8000f26:	d0b6      	beq.n	8000e96 <_malloc_r+0x22>
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	50a3      	str	r3, [r4, r2]
 8000f2c:	e7b3      	b.n	8000e96 <_malloc_r+0x22>
 8000f2e:	6862      	ldr	r2, [r4, #4]
 8000f30:	42a3      	cmp	r3, r4
 8000f32:	bf0c      	ite	eq
 8000f34:	6032      	streq	r2, [r6, #0]
 8000f36:	605a      	strne	r2, [r3, #4]
 8000f38:	e7ec      	b.n	8000f14 <_malloc_r+0xa0>
 8000f3a:	4623      	mov	r3, r4
 8000f3c:	6864      	ldr	r4, [r4, #4]
 8000f3e:	e7b2      	b.n	8000ea6 <_malloc_r+0x32>
 8000f40:	4634      	mov	r4, r6
 8000f42:	6876      	ldr	r6, [r6, #4]
 8000f44:	e7b9      	b.n	8000eba <_malloc_r+0x46>
 8000f46:	230c      	movs	r3, #12
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	4638      	mov	r0, r7
 8000f4c:	f000 f84c 	bl	8000fe8 <__malloc_unlock>
 8000f50:	e7a1      	b.n	8000e96 <_malloc_r+0x22>
 8000f52:	6025      	str	r5, [r4, #0]
 8000f54:	e7de      	b.n	8000f14 <_malloc_r+0xa0>
 8000f56:	bf00      	nop
 8000f58:	20000088 	.word	0x20000088

08000f5c <_realloc_r>:
 8000f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f60:	4680      	mov	r8, r0
 8000f62:	4614      	mov	r4, r2
 8000f64:	460e      	mov	r6, r1
 8000f66:	b921      	cbnz	r1, 8000f72 <_realloc_r+0x16>
 8000f68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	f7ff bf81 	b.w	8000e74 <_malloc_r>
 8000f72:	b92a      	cbnz	r2, 8000f80 <_realloc_r+0x24>
 8000f74:	f7ff ff14 	bl	8000da0 <_free_r>
 8000f78:	4625      	mov	r5, r4
 8000f7a:	4628      	mov	r0, r5
 8000f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f80:	f000 f838 	bl	8000ff4 <_malloc_usable_size_r>
 8000f84:	4284      	cmp	r4, r0
 8000f86:	4607      	mov	r7, r0
 8000f88:	d802      	bhi.n	8000f90 <_realloc_r+0x34>
 8000f8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000f8e:	d812      	bhi.n	8000fb6 <_realloc_r+0x5a>
 8000f90:	4621      	mov	r1, r4
 8000f92:	4640      	mov	r0, r8
 8000f94:	f7ff ff6e 	bl	8000e74 <_malloc_r>
 8000f98:	4605      	mov	r5, r0
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	d0ed      	beq.n	8000f7a <_realloc_r+0x1e>
 8000f9e:	42bc      	cmp	r4, r7
 8000fa0:	4622      	mov	r2, r4
 8000fa2:	4631      	mov	r1, r6
 8000fa4:	bf28      	it	cs
 8000fa6:	463a      	movcs	r2, r7
 8000fa8:	f7ff fed2 	bl	8000d50 <memcpy>
 8000fac:	4631      	mov	r1, r6
 8000fae:	4640      	mov	r0, r8
 8000fb0:	f7ff fef6 	bl	8000da0 <_free_r>
 8000fb4:	e7e1      	b.n	8000f7a <_realloc_r+0x1e>
 8000fb6:	4635      	mov	r5, r6
 8000fb8:	e7df      	b.n	8000f7a <_realloc_r+0x1e>
	...

08000fbc <_sbrk_r>:
 8000fbc:	b538      	push	{r3, r4, r5, lr}
 8000fbe:	4d06      	ldr	r5, [pc, #24]	; (8000fd8 <_sbrk_r+0x1c>)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	602b      	str	r3, [r5, #0]
 8000fc8:	f7ff f9f4 	bl	80003b4 <_sbrk>
 8000fcc:	1c43      	adds	r3, r0, #1
 8000fce:	d102      	bne.n	8000fd6 <_sbrk_r+0x1a>
 8000fd0:	682b      	ldr	r3, [r5, #0]
 8000fd2:	b103      	cbz	r3, 8000fd6 <_sbrk_r+0x1a>
 8000fd4:	6023      	str	r3, [r4, #0]
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
 8000fd8:	20000090 	.word	0x20000090

08000fdc <__malloc_lock>:
 8000fdc:	4801      	ldr	r0, [pc, #4]	; (8000fe4 <__malloc_lock+0x8>)
 8000fde:	f000 b811 	b.w	8001004 <__retarget_lock_acquire_recursive>
 8000fe2:	bf00      	nop
 8000fe4:	20000094 	.word	0x20000094

08000fe8 <__malloc_unlock>:
 8000fe8:	4801      	ldr	r0, [pc, #4]	; (8000ff0 <__malloc_unlock+0x8>)
 8000fea:	f000 b80c 	b.w	8001006 <__retarget_lock_release_recursive>
 8000fee:	bf00      	nop
 8000ff0:	20000094 	.word	0x20000094

08000ff4 <_malloc_usable_size_r>:
 8000ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ff8:	1f18      	subs	r0, r3, #4
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	bfbc      	itt	lt
 8000ffe:	580b      	ldrlt	r3, [r1, r0]
 8001000:	18c0      	addlt	r0, r0, r3
 8001002:	4770      	bx	lr

08001004 <__retarget_lock_acquire_recursive>:
 8001004:	4770      	bx	lr

08001006 <__retarget_lock_release_recursive>:
 8001006:	4770      	bx	lr

08001008 <_init>:
 8001008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100a:	bf00      	nop
 800100c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800100e:	bc08      	pop	{r3}
 8001010:	469e      	mov	lr, r3
 8001012:	4770      	bx	lr

08001014 <_fini>:
 8001014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001016:	bf00      	nop
 8001018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101a:	bc08      	pop	{r3}
 800101c:	469e      	mov	lr, r3
 800101e:	4770      	bx	lr
