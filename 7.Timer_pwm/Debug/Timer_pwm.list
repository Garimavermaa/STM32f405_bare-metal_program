
Timer_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000334  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004dc  080004e4  000104e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004dc  080004dc  000104e4  2**0
                  CONTENTS
  4 .ARM          00000000  080004dc  080004dc  000104e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004dc  080004e4  000104e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004dc  080004dc  000104dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004e0  080004e0  000104e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000104e4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000104e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000192  00000000  00000000  00010514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000d6  00000000  00000000  000106a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  00010780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000048  00000000  00000000  000107e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000fb3  00000000  00000000  00010828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000518  00000000  00000000  000117db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003e1a  00000000  00000000  00011cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00015b0d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c4  00000000  00000000  00015b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080004c4 	.word	0x080004c4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080004c4 	.word	0x080004c4

080001e8 <gpio_initialise>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void gpio_initialise()
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
		RCC_AHB1ENR |= (1<<2);		//enable GPIOC clock
 80001ec:	4b1a      	ldr	r3, [pc, #104]	; (8000258 <gpio_initialise+0x70>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a19      	ldr	r2, [pc, #100]	; (8000258 <gpio_initialise+0x70>)
 80001f2:	f043 0304 	orr.w	r3, r3, #4
 80001f6:	6013      	str	r3, [r2, #0]
		GPIOC_MODER &= ~(3<<12);	//clear PC6 mode bits
 80001f8:	4b18      	ldr	r3, [pc, #96]	; (800025c <gpio_initialise+0x74>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a17      	ldr	r2, [pc, #92]	; (800025c <gpio_initialise+0x74>)
 80001fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000202:	6013      	str	r3, [r2, #0]
		GPIOC_MODER |= (2<<12);		// Alternate function for PC6
 8000204:	4b15      	ldr	r3, [pc, #84]	; (800025c <gpio_initialise+0x74>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a14      	ldr	r2, [pc, #80]	; (800025c <gpio_initialise+0x74>)
 800020a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800020e:	6013      	str	r3, [r2, #0]
		GPIOC_AFRL &= ~(0xF<<24);	//clear PC6 AFRL bits
 8000210:	4b13      	ldr	r3, [pc, #76]	; (8000260 <gpio_initialise+0x78>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a12      	ldr	r2, [pc, #72]	; (8000260 <gpio_initialise+0x78>)
 8000216:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800021a:	6013      	str	r3, [r2, #0]
		GPIOC_AFRL |= (0x2<<24);	// PC6 alternate fn as TIM3 CH1
 800021c:	4b10      	ldr	r3, [pc, #64]	; (8000260 <gpio_initialise+0x78>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a0f      	ldr	r2, [pc, #60]	; (8000260 <gpio_initialise+0x78>)
 8000222:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000226:	6013      	str	r3, [r2, #0]
		GPIOC_OTYPER &= ~(1<<6);	// PC6 push pull
 8000228:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <gpio_initialise+0x7c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <gpio_initialise+0x7c>)
 800022e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000232:	6013      	str	r3, [r2, #0]
		GPIOC_OSPEEDR &= ~(3<<12);	// PC6 clear speed
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <gpio_initialise+0x80>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <gpio_initialise+0x80>)
 800023a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800023e:	6013      	str	r3, [r2, #0]
		GPIOC_OSPEEDR |= (1<<12);	// PC6 medium speed
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <gpio_initialise+0x80>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a08      	ldr	r2, [pc, #32]	; (8000268 <gpio_initialise+0x80>)
 8000246:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800024a:	6013      	str	r3, [r2, #0]
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	40023830 	.word	0x40023830
 800025c:	40020800 	.word	0x40020800
 8000260:	40020820 	.word	0x40020820
 8000264:	40020804 	.word	0x40020804
 8000268:	40020808 	.word	0x40020808

0800026c <timer3_initialize>:

void timer3_initialize()
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
		RCC_APB1ENR |= (1<<1);		// enable TIM3 clock //183
 8000270:	4b22      	ldr	r3, [pc, #136]	; (80002fc <timer3_initialize+0x90>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a21      	ldr	r2, [pc, #132]	; (80002fc <timer3_initialize+0x90>)
 8000276:	f043 0302 	orr.w	r3, r3, #2
 800027a:	6013      	str	r3, [r2, #0]
		TIM3_PSC = 0;
 800027c:	4b20      	ldr	r3, [pc, #128]	; (8000300 <timer3_initialize+0x94>)
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
		TIM3_ARR = 16000-1;			// Timer Output 1KHz
 8000282:	4b20      	ldr	r3, [pc, #128]	; (8000304 <timer3_initialize+0x98>)
 8000284:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000288:	601a      	str	r2, [r3, #0]
		TIM3_CNT=0;					// Reset Counter
 800028a:	4b1f      	ldr	r3, [pc, #124]	; (8000308 <timer3_initialize+0x9c>)
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
		TIM3_CCMR1 &= ~(7<<4);		// Clear Output mode in TIM3 CH1
 8000290:	4b1e      	ldr	r3, [pc, #120]	; (800030c <timer3_initialize+0xa0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a1d      	ldr	r2, [pc, #116]	; (800030c <timer3_initialize+0xa0>)
 8000296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800029a:	6013      	str	r3, [r2, #0]
		TIM3_CCMR1 |= (6<<4);		// Set PWM mode 1 for TIM3 CH1 output 678
 800029c:	4b1b      	ldr	r3, [pc, #108]	; (800030c <timer3_initialize+0xa0>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a1a      	ldr	r2, [pc, #104]	; (800030c <timer3_initialize+0xa0>)
 80002a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80002a6:	6013      	str	r3, [r2, #0]
		TIM3_CCMR1 |= (1<<3);		// Enable CCR preload 	678
 80002a8:	4b18      	ldr	r3, [pc, #96]	; (800030c <timer3_initialize+0xa0>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a17      	ldr	r2, [pc, #92]	; (800030c <timer3_initialize+0xa0>)
 80002ae:	f043 0308 	orr.w	r3, r3, #8
 80002b2:	6013      	str	r3, [r2, #0]
		TIM3_CCER |= (1<<1);		// Active LOW Polarity enable 576
 80002b4:	4b16      	ldr	r3, [pc, #88]	; (8000310 <timer3_initialize+0xa4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a15      	ldr	r2, [pc, #84]	; (8000310 <timer3_initialize+0xa4>)
 80002ba:	f043 0302 	orr.w	r3, r3, #2
 80002be:	6013      	str	r3, [r2, #0]
		TIM3_CCER |= (1<<0);		//	Send timer output to PC6 576
 80002c0:	4b13      	ldr	r3, [pc, #76]	; (8000310 <timer3_initialize+0xa4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a12      	ldr	r2, [pc, #72]	; (8000310 <timer3_initialize+0xa4>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6013      	str	r3, [r2, #0]
		TIM3_EGR |= (1<<0);			// Update all registers 635
 80002cc:	4b11      	ldr	r3, [pc, #68]	; (8000314 <timer3_initialize+0xa8>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a10      	ldr	r2, [pc, #64]	; (8000314 <timer3_initialize+0xa8>)
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6013      	str	r3, [r2, #0]
		TIM3_CR1 |= (1<<7);			// Auto preload enable page number 672
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <timer3_initialize+0xac>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <timer3_initialize+0xac>)
 80002de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002e2:	6013      	str	r3, [r2, #0]
		/*CCR value (PWM OUTPUT) = ARR value x (duty cyle in percentage)*/
		//TIM3_CCR1 =(uint32_t)((TIM3_ARR * 10)/100); // load duty cycle for PWM
		TIM3_CR1 |= (1<<0);			// Start timer page number 672
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <timer3_initialize+0xac>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a0b      	ldr	r2, [pc, #44]	; (8000318 <timer3_initialize+0xac>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6013      	str	r3, [r2, #0]
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40023840 	.word	0x40023840
 8000300:	40000428 	.word	0x40000428
 8000304:	4000042c 	.word	0x4000042c
 8000308:	40000424 	.word	0x40000424
 800030c:	40000418 	.word	0x40000418
 8000310:	40000420 	.word	0x40000420
 8000314:	40000414 	.word	0x40000414
 8000318:	40000400 	.word	0x40000400

0800031c <tim3_pc6_set_dutycycle>:

	void tim3_pc6_set_dutycycle(uint32_t freq, uint32_t duty_cycle, uint8_t channel)
	{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	4613      	mov	r3, r2
 8000328:	71fb      	strb	r3, [r7, #7]
	TIM3_ARR=(16000000/freq-1);
 800032a:	4a1e      	ldr	r2, [pc, #120]	; (80003a4 <tim3_pc6_set_dutycycle+0x88>)
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000332:	4a1d      	ldr	r2, [pc, #116]	; (80003a8 <tim3_pc6_set_dutycycle+0x8c>)
 8000334:	3b01      	subs	r3, #1
 8000336:	6013      	str	r3, [r2, #0]
	switch(channel)
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	2b03      	cmp	r3, #3
 800033c:	d01e      	beq.n	800037c <tim3_pc6_set_dutycycle+0x60>
 800033e:	2b03      	cmp	r3, #3
 8000340:	dc28      	bgt.n	8000394 <tim3_pc6_set_dutycycle+0x78>
 8000342:	2b01      	cmp	r3, #1
 8000344:	d002      	beq.n	800034c <tim3_pc6_set_dutycycle+0x30>
 8000346:	2b02      	cmp	r3, #2
 8000348:	d00c      	beq.n	8000364 <tim3_pc6_set_dutycycle+0x48>
			break;
	case 3:
				TIM3_CCR1 = (uint32_t)((TIM3_ARR * duty_cycle)/100);
				break;
	default:
			break;
 800034a:	e023      	b.n	8000394 <tim3_pc6_set_dutycycle+0x78>
		TIM3_CCR1 = (uint32_t)((TIM3_ARR * duty_cycle)/100);	//period = (ARR)*(clock cycle)
 800034c:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <tim3_pc6_set_dutycycle+0x8c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	68ba      	ldr	r2, [r7, #8]
 8000352:	fb02 f303 	mul.w	r3, r2, r3
 8000356:	4a15      	ldr	r2, [pc, #84]	; (80003ac <tim3_pc6_set_dutycycle+0x90>)
 8000358:	4915      	ldr	r1, [pc, #84]	; (80003b0 <tim3_pc6_set_dutycycle+0x94>)
 800035a:	fba1 1303 	umull	r1, r3, r1, r3
 800035e:	095b      	lsrs	r3, r3, #5
 8000360:	6013      	str	r3, [r2, #0]
		break;
 8000362:	e018      	b.n	8000396 <tim3_pc6_set_dutycycle+0x7a>
			TIM3_CCR1 = (uint32_t)((TIM3_ARR * duty_cycle)/100);
 8000364:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <tim3_pc6_set_dutycycle+0x8c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	68ba      	ldr	r2, [r7, #8]
 800036a:	fb02 f303 	mul.w	r3, r2, r3
 800036e:	4a0f      	ldr	r2, [pc, #60]	; (80003ac <tim3_pc6_set_dutycycle+0x90>)
 8000370:	490f      	ldr	r1, [pc, #60]	; (80003b0 <tim3_pc6_set_dutycycle+0x94>)
 8000372:	fba1 1303 	umull	r1, r3, r1, r3
 8000376:	095b      	lsrs	r3, r3, #5
 8000378:	6013      	str	r3, [r2, #0]
			break;
 800037a:	e00c      	b.n	8000396 <tim3_pc6_set_dutycycle+0x7a>
				TIM3_CCR1 = (uint32_t)((TIM3_ARR * duty_cycle)/100);
 800037c:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <tim3_pc6_set_dutycycle+0x8c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	68ba      	ldr	r2, [r7, #8]
 8000382:	fb02 f303 	mul.w	r3, r2, r3
 8000386:	4a09      	ldr	r2, [pc, #36]	; (80003ac <tim3_pc6_set_dutycycle+0x90>)
 8000388:	4909      	ldr	r1, [pc, #36]	; (80003b0 <tim3_pc6_set_dutycycle+0x94>)
 800038a:	fba1 1303 	umull	r1, r3, r1, r3
 800038e:	095b      	lsrs	r3, r3, #5
 8000390:	6013      	str	r3, [r2, #0]
				break;
 8000392:	e000      	b.n	8000396 <tim3_pc6_set_dutycycle+0x7a>
			break;
 8000394:	bf00      	nop

	}
	}
 8000396:	bf00      	nop
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	00f42400 	.word	0x00f42400
 80003a8:	4000042c 	.word	0x4000042c
 80003ac:	40000434 	.word	0x40000434
 80003b0:	51eb851f 	.word	0x51eb851f

080003b4 <main>:
int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0


	gpio_initialise();
 80003ba:	f7ff ff15 	bl	80001e8 <gpio_initialise>

	timer3_initialize();
 80003be:	f7ff ff55 	bl	800026c <timer3_initialize>
	while(1)
	{
		 tim3_pc6_set_dutycycle(1000,80,1); ////duty_cycle = ((CCR1/(ARR+1))
 80003c2:	2201      	movs	r2, #1
 80003c4:	2150      	movs	r1, #80	; 0x50
 80003c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ca:	f7ff ffa7 	bl	800031c <tim3_pc6_set_dutycycle>
		 for(int i=0;i<300000;i++);
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	e002      	b.n	80003da <main+0x26>
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	3301      	adds	r3, #1
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	4a11      	ldr	r2, [pc, #68]	; (8000424 <main+0x70>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	ddf8      	ble.n	80003d4 <main+0x20>
		 tim3_pc6_set_dutycycle(1000,40,1);
 80003e2:	2201      	movs	r2, #1
 80003e4:	2128      	movs	r1, #40	; 0x28
 80003e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ea:	f7ff ff97 	bl	800031c <tim3_pc6_set_dutycycle>
			 for(int i=0;i<300000;i++);
 80003ee:	2300      	movs	r3, #0
 80003f0:	60bb      	str	r3, [r7, #8]
 80003f2:	e002      	b.n	80003fa <main+0x46>
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	3301      	adds	r3, #1
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	4a09      	ldr	r2, [pc, #36]	; (8000424 <main+0x70>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	ddf8      	ble.n	80003f4 <main+0x40>
			 tim3_pc6_set_dutycycle(1000,10,1);
 8000402:	2201      	movs	r2, #1
 8000404:	210a      	movs	r1, #10
 8000406:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800040a:	f7ff ff87 	bl	800031c <tim3_pc6_set_dutycycle>
				 for(int i=0;i<300000;i++);
 800040e:	2300      	movs	r3, #0
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	e002      	b.n	800041a <main+0x66>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	3301      	adds	r3, #1
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a01      	ldr	r2, [pc, #4]	; (8000424 <main+0x70>)
 800041e:	4293      	cmp	r3, r2
 8000420:	ddf8      	ble.n	8000414 <main+0x60>
		 tim3_pc6_set_dutycycle(1000,80,1); ////duty_cycle = ((CCR1/(ARR+1))
 8000422:	e7ce      	b.n	80003c2 <main+0xe>
 8000424:	000493df 	.word	0x000493df

08000428 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000428:	480d      	ldr	r0, [pc, #52]	; (8000460 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800042a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800042c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000430:	480c      	ldr	r0, [pc, #48]	; (8000464 <LoopForever+0x6>)
  ldr r1, =_edata
 8000432:	490d      	ldr	r1, [pc, #52]	; (8000468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000434:	4a0d      	ldr	r2, [pc, #52]	; (800046c <LoopForever+0xe>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000438:	e002      	b.n	8000440 <LoopCopyDataInit>

0800043a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800043a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800043c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800043e:	3304      	adds	r3, #4

08000440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000444:	d3f9      	bcc.n	800043a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000446:	4a0a      	ldr	r2, [pc, #40]	; (8000470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000448:	4c0a      	ldr	r4, [pc, #40]	; (8000474 <LoopForever+0x16>)
  movs r3, #0
 800044a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800044c:	e001      	b.n	8000452 <LoopFillZerobss>

0800044e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800044e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000450:	3204      	adds	r2, #4

08000452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000454:	d3fb      	bcc.n	800044e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000456:	f000 f811 	bl	800047c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800045a:	f7ff ffab 	bl	80003b4 <main>

0800045e <LoopForever>:

LoopForever:
  b LoopForever
 800045e:	e7fe      	b.n	800045e <LoopForever>
  ldr   r0, =_estack
 8000460:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000468:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800046c:	080004e4 	.word	0x080004e4
  ldr r2, =_sbss
 8000470:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000474:	2000001c 	.word	0x2000001c

08000478 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000478:	e7fe      	b.n	8000478 <ADC_IRQHandler>
	...

0800047c <__libc_init_array>:
 800047c:	b570      	push	{r4, r5, r6, lr}
 800047e:	4d0d      	ldr	r5, [pc, #52]	; (80004b4 <__libc_init_array+0x38>)
 8000480:	4c0d      	ldr	r4, [pc, #52]	; (80004b8 <__libc_init_array+0x3c>)
 8000482:	1b64      	subs	r4, r4, r5
 8000484:	10a4      	asrs	r4, r4, #2
 8000486:	2600      	movs	r6, #0
 8000488:	42a6      	cmp	r6, r4
 800048a:	d109      	bne.n	80004a0 <__libc_init_array+0x24>
 800048c:	4d0b      	ldr	r5, [pc, #44]	; (80004bc <__libc_init_array+0x40>)
 800048e:	4c0c      	ldr	r4, [pc, #48]	; (80004c0 <__libc_init_array+0x44>)
 8000490:	f000 f818 	bl	80004c4 <_init>
 8000494:	1b64      	subs	r4, r4, r5
 8000496:	10a4      	asrs	r4, r4, #2
 8000498:	2600      	movs	r6, #0
 800049a:	42a6      	cmp	r6, r4
 800049c:	d105      	bne.n	80004aa <__libc_init_array+0x2e>
 800049e:	bd70      	pop	{r4, r5, r6, pc}
 80004a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a4:	4798      	blx	r3
 80004a6:	3601      	adds	r6, #1
 80004a8:	e7ee      	b.n	8000488 <__libc_init_array+0xc>
 80004aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ae:	4798      	blx	r3
 80004b0:	3601      	adds	r6, #1
 80004b2:	e7f2      	b.n	800049a <__libc_init_array+0x1e>
 80004b4:	080004dc 	.word	0x080004dc
 80004b8:	080004dc 	.word	0x080004dc
 80004bc:	080004dc 	.word	0x080004dc
 80004c0:	080004e0 	.word	0x080004e0

080004c4 <_init>:
 80004c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c6:	bf00      	nop
 80004c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ca:	bc08      	pop	{r3}
 80004cc:	469e      	mov	lr, r3
 80004ce:	4770      	bx	lr

080004d0 <_fini>:
 80004d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d2:	bf00      	nop
 80004d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d6:	bc08      	pop	{r3}
 80004d8:	469e      	mov	lr, r3
 80004da:	4770      	bx	lr
